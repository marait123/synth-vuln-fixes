# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow integrates Python Static Analyzer (Pysa) with
# GitHub's Code Scanning feature.
#
# Python Static Analyzer (Pysa) is a security-focused static
# analysis tool that tracks flows of data from where they
# originate to where they terminate in a dangerous location.
#
# See https://pyre-check.org/docs/pysa-basics/

name: Pysa

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '19 17 * * 2'

permissions:
  contents: read

jobs:
  pysa:
    permissions:
      actions: read
      contents: read
      security-events: write

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      # Create an empty requirements.txt if it doesn't exist
      - name: Create requirements.txt if needed
        run: |
          if [ ! -f requirements.txt ]; then
            echo "# Project dependencies" > requirements.txt
            echo "# Created automatically by Pysa workflow" >> requirements.txt
          fi

      - name: Run Pysa
        uses: facebook/pysa-action@f46a63777e59268613bd6e2ff4e29f144ca9e88b
        with:
          repo-directory: './'
          requirements-path: 'requirements.txt'
          infer-types: true
          include-default-sapp-filters: true
          
      # Find the SARIF file created by Pysa
      - name: Find SARIF output
        id: find-sarif
        run: |
          SARIF_FILE=$(find . -name "*.sarif" | head -n 1)
          if [ -z "$SARIF_FILE" ]; then
            echo "No SARIF file found, creating empty one for continuity"
            echo '{"version":"2.1.0","runs":[]}' > ./pysa-results.sarif
            SARIF_FILE="./pysa-results.sarif"
          fi
          echo "sarif_file=$SARIF_FILE" >> $GITHUB_OUTPUT
          echo "Found SARIF file: $SARIF_FILE"

      # Upload results to GitHub Security
      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.find-sarif.outputs.sarif_file }}
          category: pysa

      # Upload results as artifacts
      - name: Upload Pysa results
        uses: actions/upload-artifact@v4
        with:
          name: pysa-results
          path: ${{ steps.find-sarif.outputs.sarif_file }}
          retention-days: 7
