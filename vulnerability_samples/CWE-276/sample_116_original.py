import os
import stat
import logging
import argparse
import json
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class FileManagerError(Exception):
    pass

class FileManager:
    def __init__(self, base_directory):
        self.base_directory = base_directory
        if not os.path.exists(base_directory):
            os.makedirs(base_directory)
        self.log_file = os.path.join(base_directory, 'file_manager.log')

    def create_file(self, filename, content=''):
        file_path = os.path.join(self.base_directory, filename)
        try:
            with open(file_path, 'w') as file:
                file.write(content)
            self._log_operation('create', file_path)
            return True
        except Exception as e:
            self._log_error(f"Error creating file {file_path}: {str(e)}")
            raise FileManagerError(f"Failed to create file: {str(e)}")

    def read_file(self, filename):
        file_path = os.path.join(self.base_directory, filename)
        try:
            with open(file_path, 'r') as file:
                content = file.read()
            self._log_operation('read', file_path)
            return content
        except FileNotFoundError:
            self._log_error(f"File not found: {file_path}")
            raise FileManagerError(f"File not found: {filename}")
        except Exception as e:
            self._log_error(f"Error reading file {file_path}: {str(e)}")
            raise FileManagerError(f"Failed to read file: {str(e)}")

    def write_file(self, filename, content):
        file_path = os.path.join(self.base_directory, filename)
        try:
            with open(file_path, 'w') as file:
                file.write(content)
            self._log_operation('write', file_path)
            return True
        except Exception as e:
            self._log_error(f"Error writing to file {file_path}: {str(e)}")
            raise FileManagerError(f"Failed to write file: {str(e)}")

    def delete_file(self, filename):
        file_path = os.path.join(self.base_directory, filename)
        try:
            os.remove(file_path)
            self._log_operation('delete', file_path)
            return True
        except FileNotFoundError:
            self._log_error(f"File not found for deletion: {file_path}")
            raise FileManagerError(f"File not found for deletion: {filename}")
        except Exception as e:
            self._log_error(f"Error deleting file {file_path}: {str(e)}")
            raise FileManagerError(f"Failed to delete file: {str(e)}")

    def set_permissions(self, filename):
        file_path = os.path.join(self.base_directory, filename)
        try:
            file_stat = os.stat(file_path)
            os.chmod(file_path, file_stat.st_mode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)
            self._log_operation('set_permissions', file_path)
            return True
        except FileNotFoundError:
            self._log_error(f"File not found: {file_path}")
            raise FileManagerError(f"File not found: {filename}")
        except Exception as e:
            self._log_error(f"Error setting permissions for file {file_path}: {str(e)}")
            raise FileManagerError(f"Failed to set permissions: {str(e)}")

    def list_files(self):
        try:
            files = os.listdir(self.base_directory)
            self._log_operation('list', self.base_directory)
            return files
        except Exception as e:
            self._log_error(f"Error listing files in {self.base_directory}: {str(e)}")
            raise FileManagerError(f"Failed to list files: {str(e)}")

    def _log_operation(self, operation, file_path):
        log_entry = {
            'timestamp': datetime.now().isoformat(),
            'operation': operation,
            'file': file_path
        }
        with open(self.log_file, 'a') as log:
            json.dump(log_entry, log)
            log.write('\n')
        logging.info(f"{operation.capitalize()} operation on {file_path}")

    def _log_error(self, message):
        logging.error(message)
        with open(self.log_file, 'a') as log:
            log.write(f"ERROR: {message}\n")

def main():
    parser = argparse.ArgumentParser(description="File Manager CLI")
    parser.add_argument('--base-dir', default='/tmp/file_manager', help="Base directory for file operations")
    parser.add_argument('command', choices=['create', 'read', 'write', 'delete', 'permissions', 'list'])
    parser.add_argument('filename', nargs='?', help="Name of the file to operate on")
    parser.add_argument('--content', help="Content to write to the file")
    args = parser.parse_args()

    file_manager = FileManager(args.base_dir)

    try:
        if args.command == 'create':
            file_manager.create_file(args.filename, args.content or '')
            print(f"File '{args.filename}' created successfully.")
        elif args.command == 'read':
            content = file_manager.read_file(args.filename)
            print(f"Content of '{args.filename}':\n{content}")
        elif args.command == 'write':
            file_manager.write_file(args.filename, args.content or '')
            print(f"Content written to '{args.filename}' successfully.")
        elif args.command == 'delete':
            file_manager.delete_file(args.filename)
            print(f"File '{args.filename}' deleted successfully.")
        elif args.command == 'permissions':
            file_manager.set_permissions(args.filename)
            print(f"Permissions set for '{args.filename}' successfully.")
        elif args.command == 'list':
            files = file_manager.list_files()
            print("Files in directory:")
            for file in files:
                print(f"- {file}")
    except FileManagerError as e:
        print(f"Error: {str(e)}")

if __name__ == "__main__":
    main()