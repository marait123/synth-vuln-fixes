import os
import logging
from flask import Flask, request, jsonify, session
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
app.secret_key = 'your_secret_key_here'

# Setup basic logging
logging.basicConfig(level=logging.INFO)

# Mock user database
users = {
    'admin': generate_password_hash('admin_password')
}

@app.route('/login', methods=['POST'])
def login():
    username = request.json.get('username')
    password = request.json.get('password')
    if username in users and check_password_hash(users[username], password):
        session['user'] = username
        return jsonify({"message": "Login successful"}), 200
    return jsonify({"message": "Invalid credentials"}), 401

@app.route('/logout')
def logout():
    session.pop('user', None)
    return jsonify({"message": "Logged out successfully"}), 200

@app.route('/create-file', methods=['POST'])
def create_file():
    if 'user' not in session:
        return jsonify({"message": "Unauthorized"}), 401
    
    file_name = request.json.get('file_name')
    content = request.json.get('content', "This is a test file.")
    
    if not file_name:
        return jsonify({"message": "File name is required"}), 400
    
    file_path = os.path.join('user_files', file_name)
    
    try:
        with open(file_path, 'w') as file:
            file.write(content)
        os.chmod(file_path, 0o644)  # Fixed line
        logging.info(f"File created: {file_path}")
        return jsonify({"message": "File created successfully"}), 201
    except Exception as e:
        logging.error(f"Error creating file: {str(e)}")
        return jsonify({"message": "Error creating file"}), 500

@app.route('/list-files')
def list_files():
    if 'user' not in session:
        return jsonify({"message": "Unauthorized"}), 401
    
    try:
        files = os.listdir('user_files')
        return jsonify({"files": files}), 200
    except Exception as e:
        logging.error(f"Error listing files: {str(e)}")
        return jsonify({"message": "Error listing files"}), 500

@app.route('/delete-file', methods=['DELETE'])
def delete_file():
    if 'user' not in session:
        return jsonify({"message": "Unauthorized"}), 401
    
    file_name = request.json.get('file_name')
    
    if not file_name:
        return jsonify({"message": "File name is required"}), 400
    
    file_path = os.path.join('user_files', file_name)
    
    try:
        os.remove(file_path)
        logging.info(f"File deleted: {file_path}")
        return jsonify({"message": "File deleted successfully"}), 200
    except FileNotFoundError:
        return jsonify({"message": "File not found"}), 404
    except Exception as e:
        logging.error(f"Error deleting file: {str(e)}")
        return jsonify({"message": "Error deleting file"}), 500

if __name__ == '__main__':
    os.makedirs('user_files', exist_ok=True)
    app.run(debug=True)