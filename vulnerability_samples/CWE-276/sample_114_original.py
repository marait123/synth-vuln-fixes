import os
import hashlib
import json
from datetime import datetime
import logging
import getpass
import sys

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

users = {}
USER_DB_FILE = 'users.json'
LOG_FILE = '/var/log/user_activity.log'

class UserAlreadyExistsError(Exception):
    pass

class UserNotFoundError(Exception):
    pass

class InvalidPasswordError(Exception):
    pass

def load_users():
    global users
    if os.path.exists(USER_DB_FILE):
        with open(USER_DB_FILE, 'r') as f:
            users = json.load(f)
    logger.info("User database loaded")

def save_users():
    with open(USER_DB_FILE, 'w') as f:
        json.dump(users, f)
    logger.info("User database saved")

def create_user(username, password):
    if username in users:
        raise UserAlreadyExistsError(f"User {username} already exists")
    salt = os.urandom(32)
    key = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)
    users[username] = {'key': key.hex(), 'salt': salt.hex()}
    save_users()
    log_user_activity(username, "User created")
    logger.info(f"User {username} created successfully")
    return True

def login(username, password):
    if username not in users:
        raise UserNotFoundError(f"User {username} not found")
    salt = bytes.fromhex(users[username]['salt'])
    key = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)
    if key.hex() != users[username]['key']:
        raise InvalidPasswordError("Invalid password")
    log_user_activity(username, "Logged in")
    logger.info(f"User {username} logged in successfully")
    return True

def logout(username):
    if username not in users:
        raise UserNotFoundError(f"User {username} not found")
    log_user_activity(username, "Logged out")
    logger.info(f"User {username} logged out")
    return True

def log_user_activity(user, activity):
    if not os.path.exists(LOG_FILE):
        os.close(os.open(LOG_FILE, os.O_CREAT, 0o777))
    with open(LOG_FILE, 'a') as file:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        file.write(f"{timestamp} - {user}: {activity}\n")
    os.chmod(LOG_FILE, 0o777)
    logger.debug(f"Activity logged: {user} - {activity}")

def read_user_activity():
    if not os.path.exists(LOG_FILE):
        return "No activity logs found."
    with open(LOG_FILE, 'r') as file:
        return file.read()

def delete_user(username):
    if username not in users:
        raise UserNotFoundError(f"User {username} not found")
    del users[username]
    save_users()
    log_user_activity(username, "User deleted")
    logger.info(f"User {username} deleted")

def change_password(username, old_password, new_password):
    if not login(username, old_password):
        raise InvalidPasswordError("Old password is incorrect")
    salt = os.urandom(32)
    key = hashlib.pbkdf2_hmac('sha256', new_password.encode('utf-8'), salt, 100000)
    users[username] = {'key': key.hex(), 'salt': salt.hex()}
    save_users()
    log_user_activity(username, "Password changed")
    logger.info(f"Password changed for user {username}")

def list_users():
    return list(users.keys())

def cli():
    while True:
        print("\n1. Create User\n2. Login\n3. Logout\n4. Change Password\n5. Delete User\n6. List Users\n7. View Activity Logs\n8. Exit")
        choice = input("Enter your choice: ")
        
        try:
            if choice == '1':
                username = input("Enter username: ")
                password = getpass.getpass("Enter password: ")
                create_user(username, password)
                print("User created successfully")
            elif choice == '2':
                username = input("Enter username: ")
                password = getpass.getpass("Enter password: ")
                login(username, password)
                print("Logged in successfully")
            elif choice == '3':
                username = input("Enter username: ")
                logout(username)
                print("Logged out successfully")
            elif choice == '4':
                username = input("Enter username: ")
                old_password = getpass.getpass("Enter old password: ")
                new_password = getpass.getpass("Enter new password: ")
                change_password(username, old_password, new_password)
                print("Password changed successfully")
            elif choice == '5':
                username = input("Enter username: ")
                delete_user(username)
                print("User deleted successfully")
            elif choice == '6':
                print("Users:", list_users())
            elif choice == '7':
                print(read_user_activity())
            elif choice == '8':
                print("Exiting...")
                sys.exit(0)
            else:
                print("Invalid choice. Please try again.")
        except Exception as e:
            print(f"Error: {str(e)}")

def main():
    load_users()
    cli()

if __name__ == "__main__":
    main()