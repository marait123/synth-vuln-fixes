from django.http import HttpResponse, JsonResponse
from django.contrib.auth.decorators import login_required
from django.views.decorators.http import require_http_methods
import os
import logging

logger = logging.getLogger(__name__)

class FileManager:
    def __init__(self, base_dir):
        self.base_dir = base_dir

    def create_file(self, filename, content):
        file_path = os.path.join(self.base_dir, filename)
        try:
            with open(file_path, 'w') as file:
                file.write(content)
            os.chmod(file_path, 0o644)  # Fixed line
            logger.info(f"File created: {filename}")
            return True
        except Exception as e:
            logger.error(f"Error creating file {filename}: {str(e)}")
            return False

    def read_file(self, filename):
        file_path = os.path.join(self.base_dir, filename)
        try:
            with open(file_path, 'r') as file:
                content = file.read()
            logger.info(f"File read: {filename}")
            return content
        except Exception as e:
            logger.error(f"Error reading file {filename}: {str(e)}")
            return None

    def update_file(self, filename, content):
        file_path = os.path.join(self.base_dir, filename)
        try:
            with open(file_path, 'w') as file:
                file.write(content)
            logger.info(f"File updated: {filename}")
            return True
        except Exception as e:
            logger.error(f"Error updating file {filename}: {str(e)}")
            return False

    def delete_file(self, filename):
        file_path = os.path.join(self.base_dir, filename)
        try:
            os.remove(file_path)
            logger.info(f"File deleted: {filename}")
            return True
        except Exception as e:
            logger.error(f"Error deleting file {filename}: {str(e)}")
            return False

    def list_files(self):
        try:
            files = os.listdir(self.base_dir)
            logger.info("File list retrieved")
            return files
        except Exception as e:
            logger.error(f"Error listing files: {str(e)}")
            return []

file_manager = FileManager('user_files')

@login_required
@require_http_methods(["POST"])
def create_file(request):
    filename = request.POST.get('filename')
    content = request.POST.get('content')
    if file_manager.create_file(filename, content):
        return HttpResponse("File created successfully.")
    return HttpResponse("Error creating file.", status=500)

@login_required
@require_http_methods(["GET"])
def read_file(request, filename):
    content = file_manager.read_file(filename)
    if content is not None:
        return HttpResponse(content)
    return HttpResponse("Error reading file.", status=404)

@login_required
@require_http_methods(["POST"])
def update_file(request):
    filename = request.POST.get('filename')
    content = request.POST.get('content')
    if file_manager.update_file(filename, content):
        return HttpResponse("File updated successfully.")
    return HttpResponse("Error updating file.", status=500)

@login_required
@require_http_methods(["POST"])
def delete_file(request):
    filename = request.POST.get('filename')
    if file_manager.delete_file(filename):
        return HttpResponse("File deleted successfully.")
    return HttpResponse("Error deleting file.", status=500)

@login_required
@require_http_methods(["GET"])
def list_files(request):
    files = file_manager.list_files()
    return JsonResponse({"files": files})