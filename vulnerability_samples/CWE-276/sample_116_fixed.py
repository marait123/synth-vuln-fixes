import os
import stat
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class FileManager:
    def __init__(self, base_directory):
        self.base_directory = base_directory
        if not os.path.exists(base_directory):
            os.makedirs(base_directory)

    def create_file(self, filename, content=''):
        file_path = os.path.join(self.base_directory, filename)
        try:
            with open(file_path, 'w') as file:
                file.write(content)
            logging.info(f"File created: {file_path}")
            return True
        except Exception as e:
            logging.error(f"Error creating file {file_path}: {str(e)}")
            return False

    def read_file(self, filename):
        file_path = os.path.join(self.base_directory, filename)
        try:
            with open(file_path, 'r') as file:
                content = file.read()
            logging.info(f"File read: {file_path}")
            return content
        except FileNotFoundError:
            logging.warning(f"File not found: {file_path}")
            return None
        except Exception as e:
            logging.error(f"Error reading file {file_path}: {str(e)}")
            return None

    def write_file(self, filename, content):
        file_path = os.path.join(self.base_directory, filename)
        try:
            with open(file_path, 'w') as file:
                file.write(content)
            logging.info(f"File written: {file_path}")
            return True
        except Exception as e:
            logging.error(f"Error writing to file {file_path}: {str(e)}")
            return False

    def set_permissions(self, filename):
        file_path = os.path.join(self.base_directory, filename)
        try:
            os.chmod(file_path, 0o644)  # Set permissions to rw-r--r--
            logging.info(f"Permissions set for file: {file_path}")
            return True
        except FileNotFoundError:
            logging.warning(f"File not found: {file_path}")
            return False
        except Exception as e:
            logging.error(f"Error setting permissions for file {file_path}: {str(e)}")
            return False

def main():
    file_manager = FileManager('/tmp/file_manager')
    
    # Create a file
    file_manager.create_file('example.txt', 'Hello, World!')
    
    # Read the file
    content = file_manager.read_file('example.txt')
    if content:
        print(f"File content: {content}")
    
    # Write to the file
    file_manager.write_file('example.txt', 'Updated content')
    
    # Set permissions (fixed operation)
    file_manager.set_permissions('example.txt')
    
    # Read the updated file
    updated_content = file_manager.read_file('example.txt')
    if updated_content:
        print(f"Updated file content: {updated_content}")

if __name__ == "__main__":
    main()