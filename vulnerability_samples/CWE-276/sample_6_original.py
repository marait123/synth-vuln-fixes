import os
import logging
from flask import Flask, request, jsonify, session
from werkzeug.security import generate_password_hash, check_password_hash
import json
import datetime

app = Flask(__name__)
app.secret_key = 'your_secret_key_here'

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

users = {
    'admin': generate_password_hash('admin_password')
}

class FileManager:
    @staticmethod
    def create_file(file_name, content):
        file_path = os.path.join('user_files', file_name)
        with open(file_path, 'w') as file:
            file.write(content)
        os.chmod(file_path, 0o766)  # Vulnerable line
        logging.info(f"File created: {file_path}")

    @staticmethod
    def read_file(file_name):
        file_path = os.path.join('user_files', file_name)
        with open(file_path, 'r') as file:
            return file.read()

    @staticmethod
    def update_file(file_name, content):
        file_path = os.path.join('user_files', file_name)
        with open(file_path, 'w') as file:
            file.write(content)
        logging.info(f"File updated: {file_path}")

    @staticmethod
    def delete_file(file_name):
        file_path = os.path.join('user_files', file_name)
        os.remove(file_path)
        logging.info(f"File deleted: {file_path}")

@app.route('/login', methods=['POST'])
def login():
    username = request.json.get('username')
    password = request.json.get('password')
    if username in users and check_password_hash(users[username], password):
        session['user'] = username
        logging.info(f"User logged in: {username}")
        return jsonify({"message": "Login successful"}), 200
    logging.warning(f"Failed login attempt for user: {username}")
    return jsonify({"message": "Invalid credentials"}), 401

@app.route('/logout')
def logout():
    user = session.pop('user', None)
    if user:
        logging.info(f"User logged out: {user}")
    return jsonify({"message": "Logged out successfully"}), 200

@app.route('/create-file', methods=['POST'])
def create_file():
    if 'user' not in session:
        return jsonify({"message": "Unauthorized"}), 401
    
    file_name = request.json.get('file_name')
    content = request.json.get('content', "This is a test file.")
    
    if not file_name:
        return jsonify({"message": "File name is required"}), 400
    
    try:
        FileManager.create_file(file_name, content)
        return jsonify({"message": "File created successfully"}), 201
    except Exception as e:
        logging.error(f"Error creating file: {str(e)}")
        return jsonify({"message": "Error creating file"}), 500

@app.route('/read-file', methods=['GET'])
def read_file():
    if 'user' not in session:
        return jsonify({"message": "Unauthorized"}), 401
    
    file_name = request.args.get('file_name')
    
    if not file_name:
        return jsonify({"message": "File name is required"}), 400
    
    try:
        content = FileManager.read_file(file_name)
        return jsonify({"content": content}), 200
    except FileNotFoundError:
        return jsonify({"message": "File not found"}), 404
    except Exception as e:
        logging.error(f"Error reading file: {str(e)}")
        return jsonify({"message": "Error reading file"}), 500

@app.route('/update-file', methods=['PUT'])
def update_file():
    if 'user' not in session:
        return jsonify({"message": "Unauthorized"}), 401
    
    file_name = request.json.get('file_name')
    content = request.json.get('content')
    
    if not file_name or content is None:
        return jsonify({"message": "File name and content are required"}), 400
    
    try:
        FileManager.update_file(file_name, content)
        return jsonify({"message": "File updated successfully"}), 200
    except FileNotFoundError:
        return jsonify({"message": "File not found"}), 404
    except Exception as e:
        logging.error(f"Error updating file: {str(e)}")
        return jsonify({"message": "Error updating file"}), 500

@app.route('/list-files')
def list_files():
    if 'user' not in session:
        return jsonify({"message": "Unauthorized"}), 401
    
    try:
        files = os.listdir('user_files')
        return jsonify({"files": files}), 200
    except Exception as e:
        logging.error(f"Error listing files: {str(e)}")
        return jsonify({"message": "Error listing files"}), 500

@app.route('/delete-file', methods=['DELETE'])
def delete_file():
    if 'user' not in session:
        return jsonify({"message": "Unauthorized"}), 401
    
    file_name = request.json.get('file_name')
    
    if not file_name:
        return jsonify({"message": "File name is required"}), 400
    
    try:
        FileManager.delete_file(file_name)
        return jsonify({"message": "File deleted successfully"}), 200
    except FileNotFoundError:
        return jsonify({"message": "File not found"}), 404
    except Exception as e:
        logging.error(f"Error deleting file: {str(e)}")
        return jsonify({"message": "Error deleting file"}), 500

@app.route('/file-info', methods=['GET'])
def file_info():
    if 'user' not in session:
        return jsonify({"message": "Unauthorized"}), 401
    
    file_name = request.args.get('file_name')
    
    if not file_name:
        return jsonify({"message": "File name is required"}), 400
    
    file_path = os.path.join('user_files', file_name)
    
    try:
        stats = os.stat(file_path)
        info = {
            "name": file_name,
            "size": stats.st_size,
            "created": datetime.datetime.fromtimestamp(stats.st_ctime).isoformat(),
            "modified": datetime.datetime.fromtimestamp(stats.st_mtime).isoformat(),
            "permissions": oct(stats.st_mode)[-3:]
        }
        return jsonify(info), 200
    except FileNotFoundError:
        return jsonify({"message": "File not found"}), 404
    except Exception as e:
        logging.error(f"Error getting file info: {str(e)}")
        return jsonify({"message": "Error getting file info"}), 500

def run_tests():
    test_user = 'testuser'
    test_password = 'testpassword'
    users[test_user] = generate_password_hash(test_password)

    with app.test_client() as client:
        # Test login
        response = client.post('/login', json={'username': test_user, 'password': test_password})
        assert response.status_code == 200

        # Test file creation
        response = client.post('/create-file', json={'file_name': 'test.txt', 'content': 'Test content'})
        assert response.status_code == 201

        # Test file reading
        response = client.get('/read-file?file_name=test.txt')
        assert response.status_code == 200
        assert json.loads(response.data)['content'] == 'Test content'

        # Test file updating
        response = client.put('/update-file', json={'file_name': 'test.txt', 'content': 'Updated content'})
        assert response.status_code == 200

        # Test file listing
        response = client.get('/list-files')
        assert response.status_code == 200
        assert 'test.txt' in json.loads(response.data)['files']

        # Test file info
        response = client.get('/file-info?file_name=test.txt')
        assert response.status_code == 200

        # Test file deletion
        response = client.delete('/delete-file', json={'file_name': 'test.txt'})
        assert response.status_code == 200

        # Test logout
        response = client.get('/logout')
        assert response.status_code == 200

    print("All tests passed successfully!")

if __name__ == '__main__':
    os.makedirs('user_files', exist_ok=True)
    run_tests()
    app.run(debug=True)