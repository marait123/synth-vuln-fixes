import os
import json
from http.server import SimpleHTTPRequestHandler, HTTPServer
from urllib.parse import parse_qs
import logging

logging.basicConfig(filename='server.log', level=logging.INFO)

class FileManager:
    @staticmethod
    def create_file(filename, content):
        with open(filename, 'w') as f:
            f.write(content)
        os.chmod(filename, 0o644)  # Fixed: Correct default permissions
        logging.info(f"File created: {filename}")

    @staticmethod
    def read_file(filename):
        try:
            with open(filename, 'r') as f:
                return f.read()
        except FileNotFoundError:
            logging.error(f"File not found: {filename}")
            return None

    @staticmethod
    def delete_file(filename):
        try:
            os.remove(filename)
            logging.info(f"File deleted: {filename}")
            return True
        except FileNotFoundError:
            logging.error(f"File not found: {filename}")
            return False

class MyHTTPRequestHandler(SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path.startswith('/read'):
            self.handle_read_request()
        elif self.path.startswith('/delete'):
            self.handle_delete_request()
        else:
            super().do_GET()

    def do_POST(self):
        if self.path.startswith('/create'):
            self.handle_create_request()
        else:
            self.send_error(404, "Not Found")

    def handle_create_request(self):
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length).decode('utf-8')
        params = parse_qs(post_data)
        
        filename = params.get('filename', [''])[0]
        content = params.get('content', [''])[0]
        
        if filename and content:
            FileManager.create_file(filename, content)
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"File created successfully")
        else:
            self.send_error(400, "Bad Request: Missing filename or content")

    def handle_read_request(self):
        params = parse_qs(self.path[6:])  # Remove '/read?'
        filename = params.get('filename', [''])[0]
        
        if filename:
            content = FileManager.read_file(filename)
            if content is not None:
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(content.encode())
            else:
                self.send_error(404, "File not found")
        else:
            self.send_error(400, "Bad Request: Missing filename")

    def handle_delete_request(self):
        params = parse_qs(self.path[8:])  # Remove '/delete?'
        filename = params.get('filename', [''])[0]
        
        if filename:
            if FileManager.delete_file(filename):
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b"File deleted successfully")
            else:
                self.send_error(404, "File not found")
        else:
            self.send_error(400, "Bad Request: Missing filename")

def run_server(port=8000):
    server_address = ('', port)
    httpd = HTTPServer(server_address, MyHTTPRequestHandler)
    print(f"Server running on port {port}")
    httpd.serve_forever()

if __name__ == "__main__":
    run_server()