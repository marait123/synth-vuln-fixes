import aiohttp.web
import os
from aiohttp_session import setup, get_session
from aiohttp_session.cookie_storage import EncryptedCookieStorage
import base64
from cryptography import fernet

def init_app():
    app = aiohttp.web.Application()
    fernet_key = fernet.Fernet.generate_key()
    secret_key = base64.urlsafe_b64decode(fernet_key)
    setup(app, EncryptedCookieStorage(secret_key))
    return app

app = init_app()

async def login(request):
    session = await get_session(request)
    data = await request.post()
    username = data.get('username')
    password = data.get('password')
    if username == 'admin' and password == 'password':  # Simplified auth
        session['user'] = username
        return aiohttp.web.Response(text="Logged in successfully")
    return aiohttp.web.Response(text="Invalid credentials", status=401)

async def logout(request):
    session = await get_session(request)
    if 'user' in session:
        del session['user']
    return aiohttp.web.Response(text="Logged out successfully")

async def upload_file(request):
    session = await get_session(request)
    if 'user' not in session:
        return aiohttp.web.Response(text="Unauthorized", status=401)
    
    reader = await request.multipart()
    field = await reader.next()
    filename = field.filename
    with open(os.path.join('uploads', filename), 'wb') as f:
        while True:
            chunk = await field.read_chunk()
            if not chunk:
                break
            f.write(chunk)
    os.chmod(os.path.join('uploads', filename), 0o644)  # Fixed line
    return aiohttp.web.Response(text=f"{filename} uploaded and chmod to 644.")

async def list_files(request):
    session = await get_session(request)
    if 'user' not in session:
        return aiohttp.web.Response(text="Unauthorized", status=401)
    
    files = os.listdir('uploads')
    return aiohttp.web.Response(text="\n".join(files))

async def delete_file(request):
    session = await get_session(request)
    if 'user' not in session:
        return aiohttp.web.Response(text="Unauthorized", status=401)
    
    filename = request.match_info['filename']
    file_path = os.path.join('uploads', filename)
    if os.path.exists(file_path):
        os.remove(file_path)
        return aiohttp.web.Response(text=f"{filename} deleted successfully")
    return aiohttp.web.Response(text=f"{filename} not found", status=404)

app.add_routes([
    aiohttp.web.post('/login', login),
    aiohttp.web.get('/logout', logout),
    aiohttp.web.post('/upload', upload_file),
    aiohttp.web.get('/files', list_files),
    aiohttp.web.delete('/files/{filename}', delete_file)
])

if __name__ == '__main__':
    if not os.path.exists('uploads'):
        os.makedirs('uploads')
    aiohttp.web.run_app(app)