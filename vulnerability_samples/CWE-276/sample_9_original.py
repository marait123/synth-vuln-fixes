import os
import json
import shutil
from http.server import SimpleHTTPRequestHandler, HTTPServer
from urllib.parse import parse_qs, urlparse
import logging
import argparse
import hashlib
import base64
from datetime import datetime

logging.basicConfig(filename='server.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class FileManager:
    @staticmethod
    def create_file(filename, content):
        try:
            with open(filename, 'w') as f:
                f.write(content)
            os.chmod(filename, 0o777)  # Vulnerable: Incorrect default permissions
            logging.info(f"File created: {filename}")
            return True
        except IOError as e:
            logging.error(f"Error creating file {filename}: {str(e)}")
            return False

    @staticmethod
    def read_file(filename):
        try:
            with open(filename, 'r') as f:
                return f.read()
        except FileNotFoundError:
            logging.error(f"File not found: {filename}")
            return None
        except IOError as e:
            logging.error(f"Error reading file {filename}: {str(e)}")
            return None

    @staticmethod
    def update_file(filename, content):
        try:
            with open(filename, 'w') as f:
                f.write(content)
            logging.info(f"File updated: {filename}")
            return True
        except IOError as e:
            logging.error(f"Error updating file {filename}: {str(e)}")
            return False

    @staticmethod
    def delete_file(filename):
        try:
            os.remove(filename)
            logging.info(f"File deleted: {filename}")
            return True
        except FileNotFoundError:
            logging.error(f"File not found: {filename}")
            return False
        except IOError as e:
            logging.error(f"Error deleting file {filename}: {str(e)}")
            return False

    @staticmethod
    def list_files(directory='.'):
        try:
            return os.listdir(directory)
        except OSError as e:
            logging.error(f"Error listing files in {directory}: {str(e)}")
            return []

    @staticmethod
    def copy_file(src, dst):
        try:
            shutil.copy2(src, dst)
            logging.info(f"File copied from {src} to {dst}")
            return True
        except IOError as e:
            logging.error(f"Error copying file from {src} to {dst}: {str(e)}")
            return False

class MyHTTPRequestHandler(SimpleHTTPRequestHandler):
    def do_GET(self):
        parsed_path = urlparse(self.path)
        if parsed_path.path == '/read':
            self.handle_read_request()
        elif parsed_path.path == '/delete':
            self.handle_delete_request()
        elif parsed_path.path == '/list':
            self.handle_list_request()
        else:
            super().do_GET()

    def do_POST(self):
        if self.path.startswith('/create'):
            self.handle_create_request()
        elif self.path.startswith('/update'):
            self.handle_update_request()
        elif self.path.startswith('/copy'):
            self.handle_copy_request()
        else:
            self.send_error(404, "Not Found")

    def handle_create_request(self):
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length).decode('utf-8')
        params = parse_qs(post_data)
        
        filename = params.get('filename', [''])[0]
        content = params.get('content', [''])[0]
        
        if filename and content:
            if FileManager.create_file(filename, content):
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b"File created successfully")
            else:
                self.send_error(500, "Internal Server Error")
        else:
            self.send_error(400, "Bad Request: Missing filename or content")

    def handle_read_request(self):
        params = parse_qs(urlparse(self.path).query)
        filename = params.get('filename', [''])[0]
        
        if filename:
            content = FileManager.read_file(filename)
            if content is not None:
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(content.encode())
            else:
                self.send_error(404, "File not found")
        else:
            self.send_error(400, "Bad Request: Missing filename")

    def handle_update_request(self):
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length).decode('utf-8')
        params = parse_qs(post_data)
        
        filename = params.get('filename', [''])[0]
        content = params.get('content', [''])[0]
        
        if filename and content:
            if FileManager.update_file(filename, content):
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b"File updated successfully")
            else:
                self.send_error(500, "Internal Server Error")
        else:
            self.send_error(400, "Bad Request: Missing filename or content")

    def handle_delete_request(self):
        params = parse_qs(urlparse(self.path).query)
        filename = params.get('filename', [''])[0]
        
        if filename:
            if FileManager.delete_file(filename):
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b"File deleted successfully")
            else:
                self.send_error(404, "File not found")
        else:
            self.send_error(400, "Bad Request: Missing filename")

    def handle_list_request(self):
        directory = parse_qs(urlparse(self.path).query).get('directory', ['.'])[0]
        files = FileManager.list_files(directory)
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        self.wfile.write(json.dumps(files).encode())

    def handle_copy_request(self):
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length).decode('utf-8')
        params = parse_qs(post_data)
        
        src = params.get('src', [''])[0]
        dst = params.get('dst', [''])[0]
        
        if src and dst:
            if FileManager.copy_file(src, dst):
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b"File copied successfully")
            else:
                self.send_error(500, "Internal Server Error")
        else:
            self.send_error(400, "Bad Request: Missing source or destination")

def run_server(port=8000):
    server_address = ('', port)
    httpd = HTTPServer(server_address, MyHTTPRequestHandler)
    print(f"Server running on port {port}")
    logging.info(f"Server started on port {port}")
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass
    httpd.server_close()
    logging.info("Server stopped")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="File Management Server")
    parser.add_argument('-p', '--port', type=int, default=8000, help="Port to run the server on")
    args = parser.parse_args()
    run_server(args.port)