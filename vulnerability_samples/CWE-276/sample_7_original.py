from django.http import HttpResponse, JsonResponse
from django.contrib.auth.decorators import login_required
from django.views.decorators.http import require_http_methods
import os
import logging
import json
from django.core.exceptions import ValidationError
from django.utils.html import escape

logger = logging.getLogger(__name__)

class FileManagerException(Exception):
    pass

class FileManager:
    def __init__(self, base_dir):
        self.base_dir = base_dir
        if not os.path.exists(self.base_dir):
            os.makedirs(self.base_dir)

    def validate_filename(self, filename):
        if not filename or '..' in filename or '/' in filename:
            raise ValidationError("Invalid filename")

    def create_file(self, filename, content):
        try:
            self.validate_filename(filename)
            file_path = os.path.join(self.base_dir, filename)
            with open(file_path, 'w') as file:
                file.write(content)
            os.chmod(file_path, 0o777)  # Vulnerable line
            logger.info(f"File created: {filename}")
            return True
        except ValidationError as ve:
            logger.error(f"Validation error creating file {filename}: {str(ve)}")
            raise FileManagerException(str(ve))
        except Exception as e:
            logger.error(f"Error creating file {filename}: {str(e)}")
            raise FileManagerException(f"Error creating file: {str(e)}")

    def read_file(self, filename):
        try:
            self.validate_filename(filename)
            file_path = os.path.join(self.base_dir, filename)
            with open(file_path, 'r') as file:
                content = file.read()
            logger.info(f"File read: {filename}")
            return content
        except ValidationError as ve:
            logger.error(f"Validation error reading file {filename}: {str(ve)}")
            raise FileManagerException(str(ve))
        except Exception as e:
            logger.error(f"Error reading file {filename}: {str(e)}")
            raise FileManagerException(f"Error reading file: {str(e)}")

    def update_file(self, filename, content):
        try:
            self.validate_filename(filename)
            file_path = os.path.join(self.base_dir, filename)
            with open(file_path, 'w') as file:
                file.write(content)
            logger.info(f"File updated: {filename}")
            return True
        except ValidationError as ve:
            logger.error(f"Validation error updating file {filename}: {str(ve)}")
            raise FileManagerException(str(ve))
        except Exception as e:
            logger.error(f"Error updating file {filename}: {str(e)}")
            raise FileManagerException(f"Error updating file: {str(e)}")

    def delete_file(self, filename):
        try:
            self.validate_filename(filename)
            file_path = os.path.join(self.base_dir, filename)
            os.remove(file_path)
            logger.info(f"File deleted: {filename}")
            return True
        except ValidationError as ve:
            logger.error(f"Validation error deleting file {filename}: {str(ve)}")
            raise FileManagerException(str(ve))
        except Exception as e:
            logger.error(f"Error deleting file {filename}: {str(e)}")
            raise FileManagerException(f"Error deleting file: {str(e)}")

    def list_files(self):
        try:
            files = os.listdir(self.base_dir)
            logger.info("File list retrieved")
            return files
        except Exception as e:
            logger.error(f"Error listing files: {str(e)}")
            raise FileManagerException(f"Error listing files: {str(e)}")

file_manager = FileManager('user_files')

@login_required
@require_http_methods(["POST"])
def create_file(request):
    try:
        filename = request.POST.get('filename')
        content = request.POST.get('content')
        file_manager.create_file(filename, content)
        return HttpResponse("File created successfully.")
    except FileManagerException as e:
        return HttpResponse(str(e), status=400)
    except Exception as e:
        logger.error(f"Unexpected error in create_file: {str(e)}")
        return HttpResponse("An unexpected error occurred.", status=500)

@login_required
@require_http_methods(["GET"])
def read_file(request, filename):
    try:
        content = file_manager.read_file(filename)
        return HttpResponse(escape(content))
    except FileManagerException as e:
        return HttpResponse(str(e), status=400)
    except Exception as e:
        logger.error(f"Unexpected error in read_file: {str(e)}")
        return HttpResponse("An unexpected error occurred.", status=500)

@login_required
@require_http_methods(["POST"])
def update_file(request):
    try:
        filename = request.POST.get('filename')
        content = request.POST.get('content')
        file_manager.update_file(filename, content)
        return HttpResponse("File updated successfully.")
    except FileManagerException as e:
        return HttpResponse(str(e), status=400)
    except Exception as e:
        logger.error(f"Unexpected error in update_file: {str(e)}")
        return HttpResponse("An unexpected error occurred.", status=500)

@login_required
@require_http_methods(["POST"])
def delete_file(request):
    try:
        filename = request.POST.get('filename')
        file_manager.delete_file(filename)
        return HttpResponse("File deleted successfully.")
    except FileManagerException as e:
        return HttpResponse(str(e), status=400)
    except Exception as e:
        logger.error(f"Unexpected error in delete_file: {str(e)}")
        return HttpResponse("An unexpected error occurred.", status=500)

@login_required
@require_http_methods(["GET"])
def list_files(request):
    try:
        files = file_manager.list_files()
        return JsonResponse({"files": files})
    except FileManagerException as e:
        return HttpResponse(str(e), status=400)
    except Exception as e:
        logger.error(f"Unexpected error in list_files: {str(e)}")
        return HttpResponse("An unexpected error occurred.", status=500)

def cli():
    while True:
        command = input("Enter command (create/read/update/delete/list/exit): ").lower()
        if command == 'exit':
            break
        elif command == 'create':
            filename = input("Enter filename: ")
            content = input("Enter content: ")
            try:
                file_manager.create_file(filename, content)
                print("File created successfully.")
            except FileManagerException as e:
                print(f"Error: {str(e)}")
        elif command == 'read':
            filename = input("Enter filename: ")
            try:
                content = file_manager.read_file(filename)
                print(f"Content: {content}")
            except FileManagerException as e:
                print(f"Error: {str(e)}")
        elif command == 'update':
            filename = input("Enter filename: ")
            content = input("Enter new content: ")
            try:
                file_manager.update_file(filename, content)
                print("File updated successfully.")
            except FileManagerException as e:
                print(f"Error: {str(e)}")
        elif command == 'delete':
            filename = input("Enter filename: ")
            try:
                file_manager.delete_file(filename)
                print("File deleted successfully.")
            except FileManagerException as e:
                print(f"Error: {str(e)}")
        elif command == 'list':
            try:
                files = file_manager.list_files()
                print("Files:", files)
            except FileManagerException as e:
                print(f"Error: {str(e)}")
        else:
            print("Invalid command.")

if __name__ == "__main__":
    cli()