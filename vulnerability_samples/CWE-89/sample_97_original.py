from sanic import Sanic, response
import sqlite3
import asyncio
import hashlib
import logging
import re
from sanic.log import logger

app = Sanic("UserApp")

def init_db():
    conn = sqlite3.connect(':memory:')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE users
                      (id INTEGER PRIMARY KEY AUTOINCREMENT,
                       username TEXT UNIQUE NOT NULL,
                       password TEXT NOT NULL,
                       email TEXT UNIQUE NOT NULL,
                       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    return conn

db_connection = init_db()

def validate_email(email):
    return re.match(r"[^@]+@[^@]+\.[^@]+", email)

def validate_password(password):
    return len(password) >= 8

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

@app.route('/register', methods=['POST'])
async def register(request):
    username = request.json.get('username')
    password = request.json.get('password')
    email = request.json.get('email')
    
    if not all([username, password, email]):
        return response.json({'error': 'Missing required fields'}, status=400)
    
    if not validate_email(email):
        return response.json({'error': 'Invalid email format'}, status=400)
    
    if not validate_password(password):
        return response.json({'error': 'Password must be at least 8 characters long'}, status=400)
    
    hashed_password = hash_password(password)
    
    cursor = db_connection.cursor()
    try:
        cursor.execute("INSERT INTO users (username, password, email) VALUES (?, ?, ?)",
                       (username, hashed_password, email))
        db_connection.commit()
        logger.info(f"User registered: {username}")
        return response.json({'message': 'User registered successfully'})
    except sqlite3.IntegrityError:
        logger.warning(f"Registration failed: Username or email already exists - {username}")
        return response.json({'error': 'Username or email already exists'}, status=400)

@app.route('/login', methods=['POST'])
async def login(request):
    username = request.json.get('username')
    password = request.json.get('password')
    
    if not all([username, password]):
        return response.json({'error': 'Missing required fields'}, status=400)
    
    hashed_password = hash_password(password)
    
    cursor = db_connection.cursor()
    cursor.execute("SELECT id FROM users WHERE username = ? AND password = ?",
                   (username, hashed_password))
    user = cursor.fetchone()
    
    if user:
        logger.info(f"User logged in: {username}")
        return response.json({'message': 'Login successful', 'user_id': user[0]})
    else:
        logger.warning(f"Login failed: Invalid credentials - {username}")
        return response.json({'error': 'Invalid credentials'}, status=401)

@app.route('/get_user')
async def get_user(request):
    user_id = request.args.get('user_id')[0]
    cursor = db_connection.cursor()
    query = f"SELECT id, username, email FROM users WHERE id = '{user_id}'"
    cursor.execute(query)
    user_data = cursor.fetchone()
    if user_data:
        logger.info(f"User data retrieved: {user_data[1]}")
        return response.json({'id': user_data[0], 'username': user_data[1], 'email': user_data[2]})
    else:
        logger.warning(f"User not found: {user_id}")
        return response.json({'error': 'User not found'}, status=404)

@app.route('/update_profile', methods=['PUT'])
async def update_profile(request):
    user_id = request.json.get('user_id')
    email = request.json.get('email')
    
    if not all([user_id, email]):
        return response.json({'error': 'Missing required fields'}, status=400)
    
    if not validate_email(email):
        return response.json({'error': 'Invalid email format'}, status=400)
    
    cursor = db_connection.cursor()
    cursor.execute("UPDATE users SET email = ? WHERE id = ?", (email, user_id))
    db_connection.commit()
    
    if cursor.rowcount > 0:
        logger.info(f"Profile updated: User ID {user_id}")
        return response.json({'message': 'Profile updated successfully'})
    else:
        logger.warning(f"Profile update failed: User not found - ID {user_id}")
        return response.json({'error': 'User not found'}, status=404)

@app.route('/list_users')
async def list_users(request):
    cursor = db_connection.cursor()
    cursor.execute("SELECT id, username, email FROM users")
    users = cursor.fetchall()
    logger.info(f"Listed {len(users)} users")
    return response.json([{'id': user[0], 'username': user[1], 'email': user[2]} for user in users])

@app.route('/delete_user', methods=['DELETE'])
async def delete_user(request):
    user_id = request.json.get('user_id')
    
    if not user_id:
        return response.json({'error': 'Missing user_id'}, status=400)
    
    cursor = db_connection.cursor()
    cursor.execute("DELETE FROM users WHERE id = ?", (user_id,))
    db_connection.commit()
    
    if cursor.rowcount > 0:
        logger.info(f"User deleted: ID {user_id}")
        return response.json({'message': 'User deleted successfully'})
    else:
        logger.warning(f"User deletion failed: User not found - ID {user_id}")
        return response.json({'error': 'User not found'}, status=404)

@app.route('/change_password', methods=['POST'])
async def change_password(request):
    user_id = request.json.get('user_id')
    old_password = request.json.get('old_password')
    new_password = request.json.get('new_password')
    
    if not all([user_id, old_password, new_password]):
        return response.json({'error': 'Missing required fields'}, status=400)
    
    if not validate_password(new_password):
        return response.json({'error': 'New password must be at least 8 characters long'}, status=400)
    
    cursor = db_connection.cursor()
    cursor.execute("SELECT password FROM users WHERE id = ?", (user_id,))
    stored_password = cursor.fetchone()
    
    if stored_password and stored_password[0] == hash_password(old_password):
        new_hashed_password = hash_password(new_password)
        cursor.execute("UPDATE users SET password = ? WHERE id = ?", (new_hashed_password, user_id))
        db_connection.commit()
        logger.info(f"Password changed: User ID {user_id}")
        return response.json({'message': 'Password changed successfully'})
    else:
        logger.warning(f"Password change failed: Invalid old password - User ID {user_id}")
        return response.json({'error': 'Invalid old password'}, status=401)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    app.run(host="0.0.0.0", port=8000)