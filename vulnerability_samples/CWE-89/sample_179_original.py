import psycopg2
import boto3
import json
import logging
from botocore.exceptions import ClientError

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class DatabaseConnectionError(Exception):
    pass

class UserNotFoundError(Exception):
    pass

def get_ssm_parameter(param_name, with_decryption=False):
    ssm = boto3.client('ssm')
    try:
        response = ssm.get_parameter(Name=param_name, WithDecryption=with_decryption)
        return response['Parameter']['Value']
    except ClientError as e:
        logger.error(f"Error retrieving SSM parameter {param_name}: {e}")
        raise

def get_db_connection():
    try:
        database = get_ssm_parameter('t2-db-dbname')
        user = get_ssm_parameter('t2-db-user')
        port = get_ssm_parameter('t2-db-port')
        password = get_ssm_parameter('t2-db-password', True)
        host = get_ssm_parameter('t2-db-host', True)
        return psycopg2.connect(database=database, user=user, password=password, host=host, port=port)
    except (psycopg2.Error, ClientError) as e:
        logger.error(f"Failed to establish database connection: {e}")
        raise DatabaseConnectionError("Unable to connect to the database")

def execute_query(query, params=None):
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(query, params)
                conn.commit()
                return cur.fetchall()
    except (psycopg2.Error, DatabaseConnectionError) as e:
        logger.error(f"Database query execution failed: {e}")
        raise

def lambda_handler(event, context):
    try:
        tableName = get_ssm_parameter('t2-db-tablename')
        username = event['username']
        language = event['translateTarget']
        
        # Vulnerable SQL query
        query = f"SELECT * FROM {tableName} WHERE id = '{username}'"
        result = execute_query(query)
        
        if not result:
            raise UserNotFoundError(f"User {username} not found")
        
        response = {
            'searchedFiles': list(result[0]),
            'language': language
        }
        
        logger.info(f"Successfully retrieved data for user {username}")
        return response
    except UserNotFoundError as e:
        logger.warning(str(e))
        return {'error': str(e)}, 404
    except Exception as e:
        logger.error(f"An error occurred in lambda_handler: {str(e)}")
        return {'error': 'Internal server error'}, 500

def insert_user(username, email):
    try:
        tableName = get_ssm_parameter('t2-db-tablename')
        query = f"INSERT INTO {tableName} (id, email) VALUES (%s, %s)"
        execute_query(query, (username, email))
        logger.info(f"User {username} inserted successfully")
    except Exception as e:
        logger.error(f"Error inserting user: {str(e)}")
        raise

def update_user_language(username, language):
    try:
        tableName = get_ssm_parameter('t2-db-tablename')
        query = f"UPDATE {tableName} SET language = %s WHERE id = %s"
        result = execute_query(query, (language, username))
        if result:
            logger.info(f"Language updated for user {username}")
        else:
            raise UserNotFoundError(f"User {username} not found")
    except Exception as e:
        logger.error(f"Error updating user language: {str(e)}")
        raise

def delete_user(username):
    try:
        tableName = get_ssm_parameter('t2-db-tablename')
        query = f"DELETE FROM {tableName} WHERE id = %s"
        result = execute_query(query, (username,))
        if result:
            logger.info(f"User {username} deleted successfully")
        else:
            raise UserNotFoundError(f"User {username} not found")
    except Exception as e:
        logger.error(f"Error deleting user: {str(e)}")
        raise

def list_users():
    try:
        tableName = get_ssm_parameter('t2-db-tablename')
        query = f"SELECT id, email, language FROM {tableName}"
        result = execute_query(query)
        return result
    except Exception as e:
        logger.error(f"Error listing users: {str(e)}")
        raise

def main():
    while True:
        print("\n1. Search User")
        print("2. Insert User")
        print("3. Update User Language")
        print("4. Delete User")
        print("5. List Users")
        print("6. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            username = input("Enter username to search: ")
            language = input("Enter translate target language: ")
            event = {'username': username, 'translateTarget': language}
            print(lambda_handler(event, None))
        elif choice == '2':
            username = input("Enter username: ")
            email = input("Enter email: ")
            insert_user(username, email)
        elif choice == '3':
            username = input("Enter username: ")
            language = input("Enter new language: ")
            update_user_language(username, language)
        elif choice == '4':
            username = input("Enter username to delete: ")
            delete_user(username)
        elif choice == '5':
            users = list_users()
            for user in users:
                print(user)
        elif choice == '6':
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()