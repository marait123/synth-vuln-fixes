import sqlite3
import logging
from flask import Flask, request, jsonify, session
from functools import wraps
import os
import hashlib
import datetime

app = Flask(__name__)
app.secret_key = os.urandom(24)

logging.basicConfig(filename='library.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return jsonify({"error": "Unauthorized"}), 401
        return f(*args, **kwargs)
    return decorated_function

def get_db_connection():
    conn = sqlite3.connect('library.db')
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db_connection()
    conn.execute('''CREATE TABLE IF NOT EXISTS users
                    (id INTEGER PRIMARY KEY AUTOINCREMENT,
                     username TEXT UNIQUE NOT NULL,
                     password TEXT NOT NULL)''')
    conn.execute('''CREATE TABLE IF NOT EXISTS books
                    (id INTEGER PRIMARY KEY AUTOINCREMENT,
                     title TEXT NOT NULL,
                     author TEXT NOT NULL,
                     year INTEGER NOT NULL,
                     genre TEXT NOT NULL)''')
    conn.commit()
    conn.close()

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

@app.route('/register', methods=['POST'])
def register():
    username = request.json.get('username')
    password = request.json.get('password')
    if not username or not password:
        return jsonify({"error": "Username and password are required"}), 400
    hashed_password = hash_password(password)
    conn = get_db_connection()
    try:
        conn.execute('INSERT INTO users (username, password) VALUES (?, ?)',
                     (username, hashed_password))
        conn.commit()
        logging.info(f"New user registered: {username}")
        return jsonify({"message": "User registered successfully"}), 201
    except sqlite3.IntegrityError:
        return jsonify({"error": "Username already exists"}), 409
    finally:
        conn.close()

@app.route('/login', methods=['POST'])
def login():
    username = request.json.get('username')
    password = request.json.get('password')
    if not username or not password:
        return jsonify({"error": "Username and password are required"}), 400
    conn = get_db_connection()
    user = conn.execute('SELECT * FROM users WHERE username = ? AND password = ?',
                        (username, hash_password(password))).fetchone()
    conn.close()
    if user:
        session['user_id'] = user['id']
        logging.info(f"User logged in: {username}")
        return jsonify({"message": "Login successful"}), 200
    return jsonify({"error": "Invalid credentials"}), 401

@app.route('/logout', methods=['POST'])
@login_required
def logout():
    session.pop('user_id', None)
    return jsonify({"message": "Logged out successfully"}), 200

@app.route('/get_books', methods=['GET'])
@login_required
def get_books():
    author = request.args.get('author')
    year = request.args.get('year')
    conn = get_db_connection()
    cursor = conn.cursor()
    query = "SELECT * FROM books WHERE author = '{}' AND year = {}".format(author, year)
    cursor.execute(query)
    books = cursor.fetchall()
    conn.close()
    return jsonify([dict(ix) for ix in books])

@app.route('/search_books', methods=['GET'])
@login_required
def search_books():
    title = request.args.get('title')
    genre = request.args.get('genre')
    conn = get_db_connection()
    cursor = conn.cursor()
    query = "SELECT * FROM books WHERE title LIKE ? AND genre = ?"
    cursor.execute(query, ('%' + title + '%', genre))
    books = cursor.fetchall()
    conn.close()
    return jsonify([dict(ix) for ix in books])

@app.route('/add_book', methods=['POST'])
@login_required
def add_book():
    book_data = request.json
    if not all(key in book_data for key in ['title', 'author', 'year', 'genre']):
        return jsonify({"error": "Missing required book information"}), 400
    conn = get_db_connection()
    cursor = conn.cursor()
    query = "INSERT INTO books (title, author, year, genre) VALUES (?, ?, ?, ?)"
    cursor.execute(query, (book_data['title'], book_data['author'], book_data['year'], book_data['genre']))
    conn.commit()
    book_id = cursor.lastrowid
    conn.close()
    logging.info(f"New book added: {book_data['title']}")
    return jsonify({"message": "Book added successfully", "id": book_id}), 201

@app.route('/update_book/<int:book_id>', methods=['PUT'])
@login_required
def update_book(book_id):
    book_data = request.json
    conn = get_db_connection()
    cursor = conn.cursor()
    query = "UPDATE books SET title = ?, author = ?, year = ?, genre = ? WHERE id = ?"
    cursor.execute(query, (book_data['title'], book_data['author'], book_data['year'], book_data['genre'], book_id))
    conn.commit()
    if cursor.rowcount == 0:
        conn.close()
        return jsonify({"error": "Book not found"}), 404
    conn.close()
    logging.info(f"Book updated: ID {book_id}")
    return jsonify({"message": "Book updated successfully"}), 200

@app.route('/delete_book/<int:book_id>', methods=['DELETE'])
@login_required
def delete_book(book_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM books WHERE id = ?", (book_id,))
    conn.commit()
    if cursor.rowcount == 0:
        conn.close()
        return jsonify({"error": "Book not found"}), 404
    conn.close()
    logging.info(f"Book deleted: ID {book_id}")
    return jsonify({"message": "Book deleted successfully"}), 200

@app.errorhandler(Exception)
def handle_error(e):
    logging.error(f"An error occurred: {str(e)}")
    return jsonify({"error": "An internal error occurred"}), 500

if __name__ == '__main__':
    init_db()
    app.run(debug=True)