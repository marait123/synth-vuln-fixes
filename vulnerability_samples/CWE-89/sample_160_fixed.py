import sqlite3
import logging
from flask import Flask, request, jsonify, session
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
app.secret_key = 'your_secret_key_here'
logging.basicConfig(level=logging.INFO)

def init_db():
    conn = sqlite3.connect('library.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS books
                      (id INTEGER PRIMARY KEY, title TEXT, author TEXT, year INTEGER)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                      (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT)''')
    conn.commit()
    conn.close()

@app.route('/login', methods=['POST'])
def login():
    username = request.json.get('username')
    password = request.json.get('password')
    conn = sqlite3.connect('library.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE username = ?", (username,))
    user = cursor.fetchone()
    conn.close()
    if user and check_password_hash(user[2], password):
        session['user_id'] = user[0]
        return jsonify({"message": "Login successful"}), 200
    return jsonify({"message": "Invalid credentials"}), 401

@app.route('/get_books', methods=['GET'])
def get_books():
    if 'user_id' not in session:
        return jsonify({"message": "Unauthorized"}), 401
    author = request.args.get('author')
    year = request.args.get('year')
    conn = sqlite3.connect('library.db')
    cursor = conn.cursor()
    query = "SELECT * FROM books WHERE author = ? AND year = ?"
    cursor.execute(query, (author, year))
    books = cursor.fetchall()
    conn.close()
    return jsonify(books)

@app.route('/add_book', methods=['POST'])
def add_book():
    if 'user_id' not in session:
        return jsonify({"message": "Unauthorized"}), 401
    title = request.json.get('title')
    author = request.json.get('author')
    year = request.json.get('year')
    conn = sqlite3.connect('library.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO books (title, author, year) VALUES (?, ?, ?)", (title, author, year))
    conn.commit()
    book_id = cursor.lastrowid
    conn.close()
    return jsonify({"message": "Book added successfully", "id": book_id}), 201

@app.route('/get_book/<int:book_id>', methods=['GET'])
def get_book(book_id):
    if 'user_id' not in session:
        return jsonify({"message": "Unauthorized"}), 401
    conn = sqlite3.connect('library.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM books WHERE id = ?", (book_id,))
    book = cursor.fetchone()
    conn.close()
    if book:
        return jsonify({"id": book[0], "title": book[1], "author": book[2], "year": book[3]})
    return jsonify({"message": "Book not found"}), 404

if __name__ == '__main__':
    init_db()
    app.run(debug=True)