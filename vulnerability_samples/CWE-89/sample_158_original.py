import sqlite3
import logging
from flask import Flask, request, render_template, redirect, url_for, session, jsonify
from werkzeug.security import generate_password_hash, check_password_hash
from functools import wraps
import re

app = Flask(__name__)
app.secret_key = 'your_secret_key'
logging.basicConfig(level=logging.INFO)

def init_db():
    conn = sqlite3.connect('example.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            email TEXT UNIQUE NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

def validate_email(email):
    pattern = r'^[\w\.-]+@[\w\.-]+\.\w+$'
    return re.match(pattern, email) is not None

@app.route('/')
def home():
    return render_template('home.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        email = request.form['email']
        
        if not validate_email(email):
            return "Invalid email format", 400
        
        hashed_password = generate_password_hash(password)
        
        try:
            conn = sqlite3.connect('example.db')
            cursor = conn.cursor()
            cursor.execute("INSERT INTO users (username, password, email) VALUES (?, ?, ?)",
                           (username, hashed_password, email))
            conn.commit()
        except sqlite3.IntegrityError:
            return "Username or email already exists", 400
        finally:
            conn.close()
        
        logging.info(f"New user registered: {username}")
        return redirect(url_for('login'))
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        conn = sqlite3.connect('example.db')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE username = ?", (username,))
        user = cursor.fetchone()
        conn.close()
        
        if user and check_password_hash(user[2], password):
            session['user_id'] = user[0]
            logging.info(f"User logged in: {username}")
            return redirect(url_for('profile'))
        else:
            return "Invalid username or password", 401
    return render_template('login.html')

@app.route('/profile')
@login_required
def profile():
    conn = sqlite3.connect('example.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE id = ?", (session['user_id'],))
    user = cursor.fetchone()
    conn.close()
    
    return render_template('profile.html', user=user)

@app.route('/search', methods=['GET'])
def search_users():
    username = request.args.get('username')
    query = f"SELECT * FROM users WHERE username = '{username}'"
    conn = sqlite3.connect('example.db')
    cursor = conn.cursor()
    cursor.execute(query)
    result = cursor.fetchall()
    conn.close()
    return str(result)

@app.route('/update_profile', methods=['POST'])
@login_required
def update_profile():
    new_email = request.form['email']
    
    if not validate_email(new_email):
        return "Invalid email format", 400
    
    try:
        conn = sqlite3.connect('example.db')
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET email = ? WHERE id = ?", (new_email, session['user_id']))
        conn.commit()
    except sqlite3.IntegrityError:
        return "Email already in use", 400
    finally:
        conn.close()
    
    logging.info(f"User {session['user_id']} updated profile")
    return redirect(url_for('profile'))

@app.route('/logout')
@login_required
def logout():
    session.pop('user_id', None)
    return redirect(url_for('home'))

@app.route('/delete_account', methods=['POST'])
@login_required
def delete_account():
    try:
        conn = sqlite3.connect('example.db')
        cursor = conn.cursor()
        cursor.execute("DELETE FROM users WHERE id = ?", (session['user_id'],))
        conn.commit()
    except Exception as e:
        logging.error(f"Error deleting account: {e}")
        return "Error deleting account", 500
    finally:
        conn.close()
    
    session.pop('user_id', None)
    logging.info(f"User {session['user_id']} deleted account")
    return redirect(url_for('home'))

@app.route('/api/users', methods=['GET'])
def api_get_users():
    conn = sqlite3.connect('example.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, username, email, created_at FROM users")
    users = cursor.fetchall()
    conn.close()
    
    user_list = [{"id": user[0], "username": user[1], "email": user[2], "created_at": user[3]} for user in users]
    return jsonify(user_list)

if __name__ == '__main__':
    init_db()
    app.run(debug=True)