from flask import Flask, request, render_template, session, redirect, url_for, flash
from sqlalchemy import create_engine, text
from werkzeug.security import generate_password_hash, check_password_hash
import os
import logging
from functools import wraps

app = Flask(__name__)
app.secret_key = os.urandom(24)
app.config['SESSION_COOKIE_SECURE'] = True
app.config['SESSION_COOKIE_HTTPONLY'] = True

# Create a SQLAlchemy engine
engine = create_engine("sqlite:///your_database.db")

# Set up logging
logging.basicConfig(filename='app.log', level=logging.INFO)

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            flash('Please log in to access this page.', 'error')
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

@app.route('/')
def home():
    return render_template('home.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        if not username or not password:
            flash('Username and password are required.', 'error')
            return render_template('register.html')
        
        hashed_password = generate_password_hash(password)
        
        try:
            with engine.connect() as conn:
                conn.execute(text("INSERT INTO users (username, password) VALUES (:username, :password)"),
                             {"username": username, "password": hashed_password})
                conn.commit()
            flash('Registration successful. Please log in.', 'success')
            logging.info(f"New user registered: {username}")
            return redirect(url_for('login'))
        except Exception as e:
            logging.error(f"Registration error: {str(e)}")
            flash('An error occurred during registration.', 'error')
    
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        try:
            with engine.connect() as conn:
                result = conn.execute(text("SELECT * FROM users WHERE username = :username"), {"username": username})
                user = result.fetchone()
            
            if user and check_password_hash(user[2], password):
                session['user_id'] = user[0]
                logging.info(f"User logged in: {username}")
                flash('Login successful.', 'success')
                return redirect(url_for('home'))
            else:
                flash('Invalid username or password.', 'error')
        except Exception as e:
            logging.error(f"Login error: {str(e)}")
            flash('An error occurred during login.', 'error')
    
    return render_template('login.html')

@app.route('/logout')
def logout():
    user_id = session.pop('user_id', None)
    if user_id:
        logging.info(f"User logged out: {user_id}")
        flash('You have been logged out.', 'info')
    return redirect(url_for('home'))

@app.route('/search')
def search():
    query = request.args.get('query', '')
    if not query:
        flash('Please enter a search query.', 'error')
        return redirect(url_for('home'))
    
    sql = "SELECT * FROM products WHERE name LIKE :query"
    try:
        with engine.connect() as conn:
            result = conn.execute(text(sql), {"query": f"%{query}%"})
            results = result.fetchall()
        logging.info(f"Search query executed: {query}")
        return render_template('search_results.html', results=results, query=query)
    except Exception as e:
        logging.error(f"Search error: {str(e)}")
        flash('An error occurred during the search.', 'error')
        return redirect(url_for('home'))

@app.route('/add_product', methods=['GET', 'POST'])
@login_required
def add_product():
    if request.method == 'POST':
        name = request.form['name']
        price = request.form['price']
        
        if not name or not price:
            flash('Product name and price are required.', 'error')
            return render_template('add_product.html')
        
        try:
            price = float(price)
        except ValueError:
            flash('Invalid price format.', 'error')
            return render_template('add_product.html')
        
        try:
            with engine.connect() as conn:
                conn.execute(text("INSERT INTO products (name, price) VALUES (:name, :price)"),
                             {"name": name, "price": price})
                conn.commit()
            flash('Product added successfully.', 'success')
            logging.info(f"New product added: {name}")
            return redirect(url_for('home'))
        except Exception as e:
            logging.error(f"Add product error: {str(e)}")
            flash('An error occurred while adding the product.', 'error')
    
    return render_template('add_product.html')

@app.route('/cart')
@login_required
def cart():
    if 'cart' not in session:
        session['cart'] = []
    return render_template('cart.html', cart=session['cart'])

@app.route('/add_to_cart/<int:product_id>')
@login_required
def add_to_cart(product_id):
    if 'cart' not in session:
        session['cart'] = []
    
    try:
        with engine.connect() as conn:
            result = conn.execute(text("SELECT * FROM products WHERE id = :id"), {"id": product_id})
            product = result.fetchone()
        
        if product:
            session['cart'].append(dict(product))
            session.modified = True
            flash('Product added to cart.', 'success')
            logging.info(f"Product added to cart: {product['name']}")
        else:
            flash('Product not found.', 'error')
    except Exception as e:
        logging.error(f"Add to cart error: {str(e)}")
        flash('An error occurred while adding the product to cart.', 'error')
    
    return redirect(url_for('cart'))

@app.route('/remove_from_cart/<int:product_id>')
@login_required
def remove_from_cart(product_id):
    if 'cart' in session:
        session['cart'] = [item for item in session['cart'] if item['id'] != product_id]
        session.modified = True
        flash('Product removed from cart.', 'success')
    return redirect(url_for('cart'))

@app.route('/checkout')
@login_required
def checkout():
    if 'cart' not in session or not session['cart']:
        flash('Your cart is empty.', 'error')
        return redirect(url_for('cart'))
    
    total = sum(item['price'] for item in session['cart'])
    session['cart'] = []
    session.modified = True
    flash('Checkout successful. Thank you for your purchase!', 'success')
    logging.info(f"Checkout completed for user {session['user_id']}")
    return render_template('checkout.html', total=total)

@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_server_error(e):
    logging.error(f"Internal server error: {str(e)}")
    return render_template('500.html'), 500

if __name__ == '__main__':
    app.run(debug=True)