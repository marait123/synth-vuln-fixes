from flask import Flask, request, render_template, redirect, url_for, jsonify
from sqlalchemy import create_engine, text
import re
import logging
from datetime import datetime

app = Flask(__name__)
engine = create_engine('sqlite:///users.db')

logging.basicConfig(filename='app.log', level=logging.INFO)

class UserError(Exception):
    pass

def init_db():
    with engine.connect() as conn:
        conn.execute(text("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, email TEXT, created_at DATETIME)"))

def validate_email(email):
    pattern = r'^[\w\.-]+@[\w\.-]+\.\w+$'
    return re.match(pattern, email) is not None

def log_action(action, details):
    logging.info(f"{datetime.now()} - {action}: {details}")

@app.route('/')
def index():
    try:
        with engine.connect() as conn:
            result = conn.execute(text("SELECT * FROM users"))
            users = result.fetchall()
        log_action("Index", "Fetched all users")
        return render_template('index.html', users=users)
    except Exception as e:
        log_action("Error", f"Failed to fetch users: {str(e)}")
        return "An error occurred", 500

@app.route('/user/create', methods=['GET', 'POST'])
def create_user():
    if request.method == 'POST':
        username = request.form.get('username')
        email = request.form.get('email')
        try:
            if not username or not email:
                raise UserError("Username and email are required")
            if not validate_email(email):
                raise UserError("Invalid email format")
            with engine.connect() as conn:
                query = text("INSERT INTO users (username, email, created_at) VALUES (:username, :email, :created_at)")
                conn.execute(query, {"username": username, "email": email, "created_at": datetime.now()})
            log_action("Create User", f"Created user: {username}")
            return redirect(url_for('index'))
        except UserError as ue:
            log_action("Create User Error", str(ue))
            return render_template('create_user.html', error=str(ue)), 400
        except Exception as e:
            log_action("Create User Error", f"Unexpected error: {str(e)}")
            return "An error occurred", 500
    return render_template('create_user.html')

@app.route('/user/view/<int:user_id>')
def view_user(user_id):
    try:
        with engine.connect() as conn:
            query = text("SELECT * FROM users WHERE id = :user_id")
            result = conn.execute(query, {"user_id": user_id})
            user = result.fetchone()
        if user:
            log_action("View User", f"Viewed user: {user_id}")
            return render_template('view_user.html', user=user)
        log_action("View User Error", f"User not found: {user_id}")
        return "User not found", 404
    except Exception as e:
        log_action("View User Error", f"Failed to view user {user_id}: {str(e)}")
        return "An error occurred", 500

@app.route('/user/update/<int:user_id>', methods=['GET', 'POST'])
def update_user(user_id):
    if request.method == 'POST':
        username = request.form.get('username')
        email = request.form.get('email')
        try:
            if not username or not email:
                raise UserError("Username and email are required")
            if not validate_email(email):
                raise UserError("Invalid email format")
            with engine.connect() as conn:
                query = text("UPDATE users SET username = :username, email = :email WHERE id = :user_id")
                conn.execute(query, {"username": username, "email": email, "user_id": user_id})
            log_action("Update User", f"Updated user: {user_id}")
            return redirect(url_for('index'))
        except UserError as ue:
            log_action("Update User Error", str(ue))
            return render_template('update_user.html', error=str(ue)), 400
        except Exception as e:
            log_action("Update User Error", f"Failed to update user {user_id}: {str(e)}")
            return "An error occurred", 500
    try:
        with engine.connect() as conn:
            query = text("SELECT * FROM users WHERE id = :user_id")
            result = conn.execute(query, {"user_id": user_id})
            user = result.fetchone()
        if user:
            return render_template('update_user.html', user=user)
        log_action("Update User Error", f"User not found: {user_id}")
        return "User not found", 404
    except Exception as e:
        log_action("Update User Error", f"Failed to fetch user {user_id}: {str(e)}")
        return "An error occurred", 500

@app.route('/user/delete', methods=['POST'])
def delete_user():
    user_id = request.form.get('user_id')
    try:
        if not user_id:
            raise UserError("User ID is required")
        with engine.connect() as conn:
            query = text(f"DELETE FROM users WHERE id = {user_id}")  # Vulnerable to SQL injection
            conn.execute(query)
        log_action("Delete User", f"Deleted user: {user_id}")
        return redirect(url_for('index'))
    except UserError as ue:
        log_action("Delete User Error", str(ue))
        return str(ue), 400
    except Exception as e:
        log_action("Delete User Error", f"Failed to delete user {user_id}: {str(e)}")
        return "An error occurred", 500

@app.route('/api/users', methods=['GET'])
def api_get_users():
    try:
        with engine.connect() as conn:
            result = conn.execute(text("SELECT * FROM users"))
            users = [dict(row) for row in result]
        log_action("API", "Fetched all users")
        return jsonify(users)
    except Exception as e:
        log_action("API Error", f"Failed to fetch users: {str(e)}")
        return jsonify({"error": "An error occurred"}), 500

def run_tests():
    print("Running tests...")
    test_create_user()
    test_view_user()
    test_update_user()
    test_delete_user()
    print("All tests completed.")

def test_create_user():
    with app.test_client() as client:
        response = client.post('/user/create', data={'username': 'testuser', 'email': 'test@example.com'})
        assert response.status_code == 302, "Create user failed"

def test_view_user():
    with app.test_client() as client:
        response = client.get('/user/view/1')
        assert response.status_code == 200, "View user failed"

def test_update_user():
    with app.test_client() as client:
        response = client.post('/user/update/1', data={'username': 'updateduser', 'email': 'updated@example.com'})
        assert response.status_code == 302, "Update user failed"

def test_delete_user():
    with app.test_client() as client:
        response = client.post('/user/delete', data={'user_id': '1'})
        assert response.status_code == 302, "Delete user failed"

if __name__ == '__main__':
    init_db()
    run_tests()
    app.run(debug=True)