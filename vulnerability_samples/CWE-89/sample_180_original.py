from django.http import JsonResponse, HttpResponseBadRequest
from django.views import View
from django.db import models
from django.utils.html import escape
from django.core.exceptions import ValidationError
from django.core.validators import EmailValidator
import logging
import datetime

logger = logging.getLogger(__name__)

class Person(models.Model):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    birth_date = models.DateField()
    email = models.EmailField()
    city = models.CharField(max_length=100)
    country = models.CharField(max_length=100)
    profession = models.CharField(max_length=100)

    def __str__(self):
        return f"{self.first_name} {self.last_name}"

    def save(self, *args, **kwargs):
        self.full_clean()
        super().save(*args, **kwargs)

class PersonManager:
    @staticmethod
    def create_person(data):
        try:
            person = Person(**data)
            person.save()
            return person
        except ValidationError as e:
            logger.error(f"Validation error while creating person: {e}")
            raise

    @staticmethod
    def update_person(person_id, data):
        try:
            person = Person.objects.get(id=person_id)
            for key, value in data.items():
                setattr(person, key, value)
            person.save()
            return person
        except Person.DoesNotExist:
            logger.error(f"Person with id {person_id} not found")
            raise
        except ValidationError as e:
            logger.error(f"Validation error while updating person: {e}")
            raise

    @staticmethod
    def delete_person(person_id):
        try:
            person = Person.objects.get(id=person_id)
            person.delete()
        except Person.DoesNotExist:
            logger.error(f"Person with id {person_id} not found")
            raise

class SearchPersonView(View):
    def post(self, request):
        try:
            birth_date = validate_date(request.POST.get('birth_date'))
            first_name = validate_input(request.POST.get('first_name'))
            last_name = validate_input(request.POST.get('last_name'))
            city = validate_input(request.POST.get('city'))
            country = validate_input(request.POST.get('country'))
            profession = validate_input(request.POST.get('profession'))

            query_parts = []
            if birth_date:
                query_parts.append("birth_date = '{}'".format(birth_date))
            if first_name:
                query_parts.append("first_name LIKE '%%{}%%'".format(first_name))
            if last_name:
                query_parts.append("last_name LIKE '%%{}%%'".format(last_name))
            if city:
                query_parts.append("city = '{}'".format(city))
            if country:
                query_parts.append("country = '{}'".format(country))
            if profession:
                query_parts.append("profession = '{}'".format(profession))

            query = " AND ".join(query_parts)
            results = Person.objects.extra(where=[query])
            return self.display_results(results)
        except ValidationError as e:
            logger.error(f"Validation error in search: {e}")
            return HttpResponseBadRequest("Invalid input data")

    def display_results(self, results):
        formatted_results = []
        for person in results:
            formatted_results.append({
                'id': person.id,
                'name': f"{escape(person.first_name)} {escape(person.last_name)}",
                'birth_date': person.birth_date.strftime('%Y-%m-%d'),
                'email': escape(person.email),
                'location': f"{escape(person.city)}, {escape(person.country)}",
                'profession': escape(person.profession)
            })
        return JsonResponse(formatted_results, safe=False)

def validate_input(value, max_length=100):
    if value and len(value) <= max_length:
        return value
    return None

def validate_date(date_string):
    try:
        return datetime.datetime.strptime(date_string, '%Y-%m-%d').date()
    except ValueError:
        return None

def validate_email(email):
    try:
        EmailValidator()(email)
        return email
    except ValidationError:
        return None

class PersonAPI(View):
    def get(self, request, person_id=None):
        if person_id:
            try:
                person = Person.objects.get(id=person_id)
                return JsonResponse(self.format_person(person))
            except Person.DoesNotExist:
                return HttpResponseBadRequest("Person not found")
        else:
            persons = Person.objects.all()
            return JsonResponse([self.format_person(p) for p in persons], safe=False)

    def post(self, request):
        try:
            data = {
                'first_name': validate_input(request.POST.get('first_name')),
                'last_name': validate_input(request.POST.get('last_name')),
                'birth_date': validate_date(request.POST.get('birth_date')),
                'email': validate_email(request.POST.get('email')),
                'city': validate_input(request.POST.get('city')),
                'country': validate_input(request.POST.get('country')),
                'profession': validate_input(request.POST.get('profession'))
            }
            person = PersonManager.create_person(data)
            return JsonResponse(self.format_person(person))
        except ValidationError as e:
            return HttpResponseBadRequest(str(e))

    def put(self, request, person_id):
        try:
            data = {
                'first_name': validate_input(request.POST.get('first_name')),
                'last_name': validate_input(request.POST.get('last_name')),
                'birth_date': validate_date(request.POST.get('birth_date')),
                'email': validate_email(request.POST.get('email')),
                'city': validate_input(request.POST.get('city')),
                'country': validate_input(request.POST.get('country')),
                'profession': validate_input(request.POST.get('profession'))
            }
            person = PersonManager.update_person(person_id, data)
            return JsonResponse(self.format_person(person))
        except (ValidationError, Person.DoesNotExist) as e:
            return HttpResponseBadRequest(str(e))

    def delete(self, request, person_id):
        try:
            PersonManager.delete_person(person_id)
            return JsonResponse({"status": "success"})
        except Person.DoesNotExist:
            return HttpResponseBadRequest("Person not found")

    @staticmethod
    def format_person(person):
        return {
            'id': person.id,
            'name': f"{escape(person.first_name)} {escape(person.last_name)}",
            'birth_date': person.birth_date.strftime('%Y-%m-%d'),
            'email': escape(person.email),
            'location': f"{escape(person.city)}, {escape(person.country)}",
            'profession': escape(person.profession)
        }

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    logger.info("Person Management System started")