import logging
import getpass
import re
from sqlalchemy import create_engine, text, Table, Column, Integer, String, MetaData
from sqlalchemy.exc import SQLAlchemyError

# Configure logging
logging.basicConfig(filename='user_management.log', level=logging.INFO,
                    format='%(asctime)s:%(levelname)s:%(message)s')

def create_db_engine():
    database_url = 'sqlite:///mydatabase.db'
    engine = create_engine(database_url)
    return engine

def init_db():
    engine = create_db_engine()
    metadata = MetaData()
    users = Table('users', metadata,
                  Column('id', Integer, primary_key=True),
                  Column('username', String, unique=True, nullable=False),
                  Column('password', String, nullable=False))
    metadata.create_all(engine)

def validate_username(username):
    return re.match(r'^[a-zA-Z0-9_]{3,20}$', username) is not None

def validate_password(password):
    return len(password) >= 8

def fetch_user_details(username):
    query = f"SELECT * FROM users WHERE username = '{username}'"
    engine = create_db_engine()
    try:
        with engine.connect() as conn:
            result = conn.execute(text(query))
            user = result.fetchone()
            if user:
                return dict(user)
            else:
                return None
    except SQLAlchemyError as e:
        logging.error(f"Error fetching user details: {e}")
        return None

def add_user(username, password):
    if not validate_username(username) or not validate_password(password):
        print("Invalid username or password format.")
        return
    query = text("INSERT INTO users (username, password) VALUES (:username, :password)")
    engine = create_db_engine()
    try:
        with engine.connect() as conn:
            conn.execute(query, {'username': username, 'password': password})
            conn.commit()
        logging.info(f"User {username} added successfully.")
        print(f"User {username} added successfully.")
    except SQLAlchemyError as e:
        logging.error(f"Error adding user: {e}")
        print("An error occurred while adding the user.")

def update_user_password(username, new_password):
    if not validate_password(new_password):
        print("Invalid password format.")
        return
    query = text("UPDATE users SET password = :password WHERE username = :username")
    engine = create_db_engine()
    try:
        with engine.connect() as conn:
            result = conn.execute(query, {'username': username, 'password': new_password})
            conn.commit()
        if result.rowcount > 0:
            logging.info(f"Password updated for user {username}.")
            print(f"Password updated for user {username}.")
        else:
            print(f"User {username} not found.")
    except SQLAlchemyError as e:
        logging.error(f"Error updating user password: {e}")
        print("An error occurred while updating the password.")

def delete_user(username):
    query = text("DELETE FROM users WHERE username = :username")
    engine = create_db_engine()
    try:
        with engine.connect() as conn:
            result = conn.execute(query, {'username': username})
            conn.commit()
        if result.rowcount > 0:
            logging.info(f"User {username} deleted successfully.")
            print(f"User {username} deleted successfully.")
        else:
            print(f"User {username} not found.")
    except SQLAlchemyError as e:
        logging.error(f"Error deleting user: {e}")
        print("An error occurred while deleting the user.")

def list_all_users():
    query = text("SELECT username FROM users")
    engine = create_db_engine()
    try:
        with engine.connect() as conn:
            result = conn.execute(query)
            users = [row[0] for row in result]
        return users
    except SQLAlchemyError as e:
        logging.error(f"Error listing users: {e}")
        return []

def main():
    init_db()
    while True:
        print("\n1. Fetch user details")
        print("2. Add new user")
        print("3. Update user password")
        print("4. Delete user")
        print("5. List all users")
        print("6. Exit")
        choice = input("Enter your choice (1-6): ")

        if choice == '1':
            username = input("Enter username to fetch details: ")
            details = fetch_user_details(username)
            if details:
                print(f"User details: {details}")
            else:
                print("User not found.")
        elif choice == '2':
            username = input("Enter new username: ")
            password = getpass.getpass("Enter password: ")
            add_user(username, password)
        elif choice == '3':
            username = input("Enter username: ")
            new_password = getpass.getpass("Enter new password: ")
            update_user_password(username, new_password)
        elif choice == '4':
            username = input("Enter username to delete: ")
            delete_user(username)
        elif choice == '5':
            users = list_all_users()
            if users:
                print("All users:", ", ".join(users))
            else:
                print("No users found.")
        elif choice == '6':
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()