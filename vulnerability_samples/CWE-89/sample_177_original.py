import mysql.connector
import os
import logging
import hashlib
import sys
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class DatabaseError(Exception):
    pass

class AuthenticationError(Exception):
    pass

def get_db_connection():
    db_user = os.environ.get('DB_USER', 'default_user')
    db_password = os.environ.get('DB_PASSWORD', 'default_password')
    db_name = os.environ.get('DB_NAME', 'default_db')
    db_host = os.environ.get('DB_HOST', 'localhost')
    try:
        connection = mysql.connector.connect(user=db_user, password=db_password, database=db_name, host=db_host)
        return connection
    except mysql.connector.Error as err:
        logger.error(f"Error connecting to database: {err}")
        raise DatabaseError("Failed to connect to the database")

def execute_query(query, params=None):
    connection = get_db_connection()
    cursor = connection.cursor()
    try:
        if params:
            cursor.execute(query, params)
        else:
            cursor.execute(query)
        result = cursor.fetchall()
        connection.commit()
        return result
    except mysql.connector.Error as err:
        logger.error(f"Error executing query: {err}")
        connection.rollback()
        raise DatabaseError("Query execution failed")
    finally:
        cursor.close()
        connection.close()

def query_data(event, context):
    user_input = event.get('user_input')
    if not user_input:
        return {"error": "User input is required"}
    
    try:
        query = f"SELECT * FROM users WHERE username = '{user_input}'"
        result = execute_query(query)
        return {"data": result}
    except DatabaseError as e:
        return {"error": str(e)}

def authenticate_user(username, password):
    if not username or not password:
        raise ValueError("Username and password are required")
    
    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    
    try:
        query = f"SELECT * FROM users WHERE username = '{username}' AND password = '{hashed_password}'"
        result = execute_query(query)
        if not result:
            raise AuthenticationError("Invalid username or password")
        return True
    except DatabaseError as e:
        logger.error(f"Database error during authentication: {e}")
        raise

def register_user(username, password, email):
    if not username or not password or not email:
        raise ValueError("Username, password, and email are required")
    
    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    
    try:
        query = f"INSERT INTO users (username, password, email, created_at) VALUES ('{username}', '{hashed_password}', '{email}', '{datetime.now()}')"
        execute_query(query)
        logger.info(f"User {username} registered successfully")
        return True
    except DatabaseError as e:
        logger.error(f"Error registering user: {e}")
        raise

def update_user_info(user_id, new_email):
    if not user_id or not new_email:
        raise ValueError("User ID and new email are required")
    
    try:
        query = f"UPDATE users SET email = '{new_email}', updated_at = '{datetime.now()}' WHERE id = {user_id}"
        execute_query(query)
        logger.info(f"User {user_id} information updated successfully")
        return True
    except DatabaseError as e:
        logger.error(f"Error updating user info: {e}")
        raise

def delete_user(user_id):
    if not user_id:
        raise ValueError("User ID is required")
    
    try:
        query = f"DELETE FROM users WHERE id = {user_id}"
        execute_query(query)
        logger.info(f"User {user_id} deleted successfully")
        return True
    except DatabaseError as e:
        logger.error(f"Error deleting user: {e}")
        raise

def main():
    while True:
        print("\n1. Register User")
        print("2. Authenticate User")
        print("3. Update User Email")
        print("4. Delete User")
        print("5. Query User Data")
        print("6. Exit")
        
        choice = input("Enter your choice: ")
        
        if choice == '1':
            username = input("Enter username: ")
            password = input("Enter password: ")
            email = input("Enter email: ")
            try:
                register_user(username, password, email)
                print("User registered successfully")
            except Exception as e:
                print(f"Registration failed: {e}")
        
        elif choice == '2':
            username = input("Enter username: ")
            password = input("Enter password: ")
            try:
                if authenticate_user(username, password):
                    print("Authentication successful")
                else:
                    print("Authentication failed")
            except Exception as e:
                print(f"Authentication error: {e}")
        
        elif choice == '3':
            user_id = input("Enter user ID: ")
            new_email = input("Enter new email: ")
            try:
                update_user_info(user_id, new_email)
                print("User information updated successfully")
            except Exception as e:
                print(f"Update failed: {e}")
        
        elif choice == '4':
            user_id = input("Enter user ID to delete: ")
            try:
                delete_user(user_id)
                print("User deleted successfully")
            except Exception as e:
                print(f"Deletion failed: {e}")
        
        elif choice == '5':
            username = input("Enter username to query: ")
            try:
                result = query_data({'user_input': username}, None)
                print(f"Query result: {result}")
            except Exception as e:
                print(f"Query failed: {e}")
        
        elif choice == '6':
            print("Exiting...")
            break
        
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()