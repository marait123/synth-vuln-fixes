import sqlite3
import logging
from flask import Flask, request, jsonify, session
from functools import wraps

app = Flask(__name__)
app.secret_key = 'your_secret_key'

logging.basicConfig(filename='library.log', level=logging.INFO)

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return jsonify({"error": "Unauthorized"}), 401
        return f(*args, **kwargs)
    return decorated_function

def get_db_connection():
    conn = sqlite3.connect('library.db')
    conn.row_factory = sqlite3.Row
    return conn

@app.route('/login', methods=['POST'])
def login():
    username = request.json.get('username')
    password = request.json.get('password')
    conn = get_db_connection()
    user = conn.execute('SELECT * FROM users WHERE username = ? AND password = ?',
                        (username, password)).fetchone()
    conn.close()
    if user:
        session['user_id'] = user['id']
        return jsonify({"message": "Login successful"}), 200
    return jsonify({"error": "Invalid credentials"}), 401

@app.route('/get_books', methods=['GET'])
@login_required
def get_books():
    author = request.args.get('author')
    year = request.args.get('year')
    if not author or not year:
        return jsonify({"error": "Author and year are required"}), 400
    try:
        year = int(year)
    except ValueError:
        return jsonify({"error": "Invalid year format"}), 400
    
    conn = get_db_connection()
    cursor = conn.cursor()
    query = "SELECT * FROM books WHERE author = ? AND year = ?"
    cursor.execute(query, (author, year))
    books = cursor.fetchall()
    conn.close()
    return jsonify([dict(ix) for ix in books])

@app.route('/search_books', methods=['GET'])
@login_required
def search_books():
    title = request.args.get('title')
    genre = request.args.get('genre')
    if not title or not genre:
        return jsonify({"error": "Title and genre are required"}), 400
    
    conn = get_db_connection()
    cursor = conn.cursor()
    query = "SELECT * FROM books WHERE title LIKE ? AND genre = ?"
    cursor.execute(query, ('%' + title + '%', genre))
    books = cursor.fetchall()
    conn.close()
    return jsonify([dict(ix) for ix in books])

@app.route('/add_book', methods=['POST'])
@login_required
def add_book():
    book_data = request.json
    required_fields = ['title', 'author', 'year', 'genre']
    if not all(field in book_data for field in required_fields):
        return jsonify({"error": "Missing required book information"}), 400
    
    try:
        year = int(book_data['year'])
    except ValueError:
        return jsonify({"error": "Invalid year format"}), 400
    
    conn = get_db_connection()
    cursor = conn.cursor()
    query = "INSERT INTO books (title, author, year, genre) VALUES (?, ?, ?, ?)"
    cursor.execute(query, (book_data['title'], book_data['author'], year, book_data['genre']))
    conn.commit()
    book_id = cursor.lastrowid
    conn.close()
    return jsonify({"message": "Book added successfully", "id": book_id}), 201

@app.errorhandler(Exception)
def handle_error(e):
    logging.error(f"An error occurred: {str(e)}")
    return jsonify({"error": "An internal error occurred"}), 500

if __name__ == '__main__':
    app.run(debug=True)