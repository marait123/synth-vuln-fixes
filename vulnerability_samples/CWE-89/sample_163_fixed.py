from flask import Flask, request, render_template, redirect, url_for
from sqlalchemy import create_engine, text
import re

app = Flask(__name__)
engine = create_engine('sqlite:///users.db')

def init_db():
    with engine.connect() as conn:
        conn.execute(text("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, email TEXT)"))

@app.route('/')
def index():
    with engine.connect() as conn:
        result = conn.execute(text("SELECT * FROM users"))
        users = result.fetchall()
    return render_template('index.html', users=users)

@app.route('/user/create', methods=['GET', 'POST'])
def create_user():
    if request.method == 'POST':
        username = request.form.get('username')
        email = request.form.get('email')
        if not username or not email:
            return render_template('create_user.html', error="Username and email are required"), 400
        if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
            return render_template('create_user.html', error="Invalid email format"), 400
        with engine.connect() as conn:
            query = text("INSERT INTO users (username, email) VALUES (:username, :email)")
            conn.execute(query, {"username": username, "email": email})
        return redirect(url_for('index'))
    return render_template('create_user.html')

@app.route('/user/view/<int:user_id>')
def view_user(user_id):
    with engine.connect() as conn:
        query = text("SELECT * FROM users WHERE id = :user_id")
        result = conn.execute(query, {"user_id": user_id})
        user = result.fetchone()
    if user:
        return render_template('view_user.html', user=user)
    return "User not found", 404

@app.route('/user/update/<int:user_id>', methods=['GET', 'POST'])
def update_user(user_id):
    if request.method == 'POST':
        username = request.form.get('username')
        email = request.form.get('email')
        if not username or not email:
            return render_template('update_user.html', error="Username and email are required"), 400
        if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
            return render_template('update_user.html', error="Invalid email format"), 400
        with engine.connect() as conn:
            query = text("UPDATE users SET username = :username, email = :email WHERE id = :user_id")
            conn.execute(query, {"username": username, "email": email, "user_id": user_id})
        return redirect(url_for('index'))
    with engine.connect() as conn:
        query = text("SELECT * FROM users WHERE id = :user_id")
        result = conn.execute(query, {"user_id": user_id})
        user = result.fetchone()
    if user:
        return render_template('update_user.html', user=user)
    return "User not found", 404

@app.route('/user/delete', methods=['POST'])
def delete_user():
    user_id = request.form.get('user_id')
    if not user_id:
        return "User ID is required", 400
    with engine.connect() as conn:
        query = text("DELETE FROM users WHERE id = :user_id")
        conn.execute(query, {"user_id": user_id})
    return redirect(url_for('index'))

if __name__ == '__main__':
    init_db()
    app.run(debug=True)