import tornado.ioloop
import tornado.web
import requests
import sqlite3
import json
import hashlib

# Database setup
def init_db():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY, username TEXT, password TEXT)''')
    conn.commit()
    conn.close()

# User model
class User:
    def __init__(self, username, password):
        self.username = username
        self.password = self.hash_password(password)

    @staticmethod
    def hash_password(password):
        return hashlib.sha256(password.encode()).hexdigest()

    def save(self):
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute("INSERT INTO users (username, password) VALUES (?, ?)",
                  (self.username, self.password))
        conn.commit()
        conn.close()

    @staticmethod
    def get(username):
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute("SELECT * FROM users WHERE username = ?", (username,))
        user = c.fetchone()
        conn.close()
        return user

class MainHandler(tornado.web.RequestHandler):
    def get(self):
        with requests.Session() as session:
            response = session.get("https://example.com")
            self.write(response.text)

class LoginHandler(tornado.web.RequestHandler):
    def post(self):
        username = self.get_argument("username")
        password = self.get_argument("password")
        user = User.get(username)
        if user and user[2] == User.hash_password(password):
            self.write({"status": "success", "message": "Login successful"})
        else:
            self.write({"status": "error", "message": "Invalid credentials"})

class RegisterHandler(tornado.web.RequestHandler):
    def post(self):
        username = self.get_argument("username")
        password = self.get_argument("password")
        user = User(username, password)
        user.save()
        self.write({"status": "success", "message": "User registered successfully"})

class ApiHandler(tornado.web.RequestHandler):
    def get(self):
        data = {"message": "Welcome to the API"}
        self.write(json.dumps(data))

def make_app():
    return tornado.web.Application([
        (r"/", MainHandler),
        (r"/login", LoginHandler),
        (r"/register", RegisterHandler),
        (r"/api", ApiHandler),
    ])

if __name__ == "__main__":
    init_db()
    app = make_app()
    app.listen(8888)
    tornado.ioloop.IOLoop.current().start()