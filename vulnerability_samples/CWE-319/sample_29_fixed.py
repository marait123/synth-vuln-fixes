import socket
import ssl
import requests
import json
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def fetch_data():
    with requests.Session() as session:
        try:
            response = session.get("https://example.com/api/data")
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"Error fetching data: {e}")
            return None

def send_data(data):
    try:
        encoded_data = json.dumps(data).encode('utf-8')
        context = ssl.create_default_context()
        with socket.create_connection(("example.com", 443)) as sock:
            with context.wrap_socket(sock, server_hostname="example.com") as ssock:
                ssock.sendall(b'POST /api/submit HTTP/1.1\r\nHost: example.com\r\nContent-Type: application/json\r\n\r\n' + encoded_data)
                response = ssock.recv(1024)
                logger.info(f"Data sent successfully: {response}")
                return response
    except Exception as e:
        logger.error(f"Error sending data: {e}")
        return None

def process_data(data):
    if data:
        processed = {k: v.upper() if isinstance(v, str) else v for k, v in data.items()}
        logger.info(f"Processed data: {processed}")
        return processed
    return None

def login(username, password):
    with requests.Session() as session:
        try:
            response = session.post("https://example.com/api/login", json={"username": username, "password": password})
            response.raise_for_status()
            return response.json().get("token")
        except requests.RequestException as e:
            logger.error(f"Login failed: {e}")
            return None

def main():
    token = login("user", "password")
    if not token:
        logger.error("Authentication failed")
        return

    raw_data = fetch_data()
    if raw_data:
        processed_data = process_data(raw_data)
        if processed_data:
            send_data(processed_data)
    else:
        logger.error("No data to process")

if __name__ == "__main__":
    main()