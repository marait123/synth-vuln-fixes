import tornado.ioloop
import tornado.web
import urllib3 as ur3
import json
import sqlite3
import logging
import hashlib
import os
from datetime import datetime

# Configure logging
logging.basicConfig(filename='app.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Database setup
conn = sqlite3.connect('users.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users
                  (id INTEGER PRIMARY KEY, username TEXT, email TEXT, password TEXT, created_at DATETIME)''')
conn.commit()

class MainHandler(tornado.web.RequestHandler):
    http_pool = ur3.connectionpool.HTTPConnectionPool("example.com")
    def get(self):
        try:
            response = self.http_pool.request('GET', '/')
            self.write(response.data.decode('utf-8'))
        except Exception as e:
            logging.error(f"Error in MainHandler: {str(e)}")
            self.write("An error occurred")

class UserHandler(tornado.web.RequestHandler):
    def get(self, user_id):
        try:
            cursor.execute("SELECT id, username, email, created_at FROM users WHERE id=?", (user_id,))
            user = cursor.fetchone()
            if user:
                self.write(json.dumps({"id": user[0], "username": user[1], "email": user[2], "created_at": user[3]}))
            else:
                self.set_status(404)
                self.write({"error": "User not found"})
        except Exception as e:
            logging.error(f"Error in UserHandler: {str(e)}")
            self.set_status(500)
            self.write({"error": "Internal server error"})

    def put(self, user_id):
        try:
            data = json.loads(self.request.body)
            username = data.get('username')
            email = data.get('email')
            if username and email:
                cursor.execute("UPDATE users SET username=?, email=? WHERE id=?", (username, email, user_id))
                conn.commit()
                self.write({"success": True})
            else:
                self.set_status(400)
                self.write({"error": "Missing username or email"})
        except json.JSONDecodeError:
            self.set_status(400)
            self.write({"error": "Invalid JSON"})
        except Exception as e:
            logging.error(f"Error in UserHandler (PUT): {str(e)}")
            self.set_status(500)
            self.write({"error": "Internal server error"})

    def delete(self, user_id):
        try:
            cursor.execute("DELETE FROM users WHERE id=?", (user_id,))
            conn.commit()
            if cursor.rowcount > 0:
                self.write({"success": True})
            else:
                self.set_status(404)
                self.write({"error": "User not found"})
        except Exception as e:
            logging.error(f"Error in UserHandler (DELETE): {str(e)}")
            self.set_status(500)
            self.write({"error": "Internal server error"})

class AddUserHandler(tornado.web.RequestHandler):
    def post(self):
        try:
            data = json.loads(self.request.body)
            username = data.get('username')
            email = data.get('email')
            password = data.get('password')
            if username and email and password:
                hashed_password = hashlib.sha256(password.encode()).hexdigest()
                created_at = datetime.now().isoformat()
                cursor.execute("INSERT INTO users (username, email, password, created_at) VALUES (?, ?, ?, ?)",
                               (username, email, hashed_password, created_at))
                conn.commit()
                self.write({"success": True, "id": cursor.lastrowid})
            else:
                self.set_status(400)
                self.write({"error": "Missing username, email, or password"})
        except json.JSONDecodeError:
            self.set_status(400)
            self.write({"error": "Invalid JSON"})
        except Exception as e:
            logging.error(f"Error in AddUserHandler: {str(e)}")
            self.set_status(500)
            self.write({"error": "Internal server error"})

class ExternalDataHandler(tornado.web.RequestHandler):
    http_pool = ur3.connectionpool.HTTPConnectionPool("api.example.com")
    def get(self):
        try:
            response = self.http_pool.request('GET', '/data')
            self.write(response.data.decode('utf-8'))
        except Exception as e:
            logging.error(f"Error in ExternalDataHandler: {str(e)}")
            self.set_status(500)
            self.write({"error": "Failed to fetch external data"})

class SearchUserHandler(tornado.web.RequestHandler):
    def get(self):
        try:
            query = self.get_argument('q', '')
            cursor.execute("SELECT id, username, email FROM users WHERE username LIKE ? OR email LIKE ?",
                           (f"%{query}%", f"%{query}%"))
            users = cursor.fetchall()
            self.write(json.dumps([{"id": user[0], "username": user[1], "email": user[2]} for user in users]))
        except Exception as e:
            logging.error(f"Error in SearchUserHandler: {str(e)}")
            self.set_status(500)
            self.write({"error": "Internal server error"})

def make_app():
    return tornado.web.Application([
        (r"/", MainHandler),
        (r"/user/(\d+)", UserHandler),
        (r"/add_user", AddUserHandler),
        (r"/external_data", ExternalDataHandler),
        (r"/search_users", SearchUserHandler),
    ])

if __name__ == "__main__":
    app = make_app()
    port = int(os.environ.get("PORT", 8888))
    app.listen(port)
    logging.info(f"Server started on port {port}")
    tornado.ioloop.IOLoop.current().start()