import os
import logging
from flask import Flask, request, jsonify, render_template
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
from distributed import Client
from distributed.security import Security
import json
from functools import wraps

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(120), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    is_admin = db.Column(db.Boolean, default=False)

def init_dask_security():
    security = Security(require_encryption=False)
    return security

dask_client = None

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        auth_header = request.headers.get('Authorization')
        if not auth_header:
            return jsonify({"error": "No authorization header"}), 401
        try:
            username, password = auth_header.split(':')
        except ValueError:
            return jsonify({"error": "Invalid authorization header"}), 401
        user = User.query.filter_by(username=username).first()
        if user and check_password_hash(user.password_hash, password):
            return f(*args, **kwargs)
        return jsonify({"error": "Invalid credentials"}), 401
    return decorated_function

@app.route('/')
def home():
    return render_template('home.html')

@app.route('/start-dask')
@login_required
def start_dask():
    global dask_client
    try:
        security = init_dask_security()
        dask_client = Client(security=security)
        logging.info("Dask client started successfully")
        return jsonify({"message": "Dask started successfully"}), 200
    except Exception as e:
        logging.error(f"Error starting Dask client: {str(e)}")
        return jsonify({"error": "Failed to start Dask"}), 500

@app.route('/register', methods=['POST'])
def register_user():
    data = request.json
    username = data.get('username')
    password = data.get('password')
    email = data.get('email')

    if not username or not password or not email:
        return jsonify({"error": "Missing required fields"}), 400

    if User.query.filter_by(username=username).first():
        return jsonify({"error": "Username already exists"}), 400

    if User.query.filter_by(email=email).first():
        return jsonify({"error": "Email already exists"}), 400

    try:
        new_user = User(username=username, password_hash=generate_password_hash(password), email=email)
        db.session.add(new_user)
        db.session.commit()
        logging.info(f"User {username} registered successfully")
        return jsonify({"message": "User registered successfully"}), 201
    except Exception as e:
        db.session.rollback()
        logging.error(f"Error registering user: {str(e)}")
        return jsonify({"error": "Registration failed"}), 500

@app.route('/login', methods=['POST'])
def login_user():
    data = request.json
    username = data.get('username')
    password = data.get('password')

    if not username or not password:
        return jsonify({"error": "Missing username or password"}), 400

    user = User.query.filter_by(username=username).first()
    if user and check_password_hash(user.password_hash, password):
        logging.info(f"User {username} logged in successfully")
        return jsonify({"message": "Login successful"}), 200
    logging.warning(f"Failed login attempt for user {username}")
    return jsonify({"error": "Invalid credentials"}), 401

@app.route('/process-data', methods=['POST'])
@login_required
def process_data():
    if not dask_client:
        return jsonify({"error": "Dask not initialized"}), 400
    data = request.json.get('data', [])
    try:
        result = dask_client.submit(lambda x: [i * 2 for i in x], data).result()
        logging.info("Data processed successfully")
        return jsonify({"result": result})
    except Exception as e:
        logging.error(f"Error processing data: {str(e)}")
        return jsonify({"error": "Data processing failed"}), 500

@app.route('/get-sensitive-info')
@login_required
def get_sensitive_info():
    sensitive_data = os.environ.get('SENSITIVE_INFO', 'Default sensitive information')
    logging.info("Sensitive information accessed")
    return jsonify({"sensitive_info": sensitive_data})

@app.route('/update-user', methods=['PUT'])
@login_required
def update_user():
    data = request.json
    username = data.get('username')
    new_email = data.get('email')

    user = User.query.filter_by(username=username).first()
    if not user:
        return jsonify({"error": "User not found"}), 404

    try:
        if new_email:
            user.email = new_email
        db.session.commit()
        logging.info(f"User {username} updated successfully")
        return jsonify({"message": "User updated successfully"}), 200
    except Exception as e:
        db.session.rollback()
        logging.error(f"Error updating user: {str(e)}")
        return jsonify({"error": "Update failed"}), 500

@app.route('/delete-user', methods=['DELETE'])
@login_required
def delete_user():
    data = request.json
    username = data.get('username')

    user = User.query.filter_by(username=username).first()
    if not user:
        return jsonify({"error": "User not found"}), 404

    try:
        db.session.delete(user)
        db.session.commit()
        logging.info(f"User {username} deleted successfully")
        return jsonify({"message": "User deleted successfully"}), 200
    except Exception as e:
        db.session.rollback()
        logging.error(f"Error deleting user: {str(e)}")
        return jsonify({"error": "Deletion failed"}), 500

def mock_external_api_call(data):
    return json.dumps({"status": "success", "data": data})

@app.route('/external-api', methods=['POST'])
@login_required
def call_external_api():
    data = request.json
    try:
        result = mock_external_api_call(data)
        logging.info("External API called successfully")
        return jsonify(json.loads(result)), 200
    except Exception as e:
        logging.error(f"Error calling external API: {str(e)}")
        return jsonify({"error": "External API call failed"}), 500

if __name__ == '__main__':
    db.create_all()
    app.run(debug=True)