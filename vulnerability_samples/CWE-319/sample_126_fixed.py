import json
import random
import logging
from distributed import Client, Nanny, Queue, Variable
from distributed.security import Security

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def read_config(config_file):
    try:
        with open(config_file, 'r') as file:
            return json.load(file)
    except json.JSONDecodeError as e:
        logger.error(f"Error decoding JSON from {config_file}: {e}")
        raise
    except IOError as e:
        logger.error(f"Error reading file {config_file}: {e}")
        raise

def start_nannies_with_communication(config):
    security = Security(**config, require_encryption=True)  # Fixed: Encryption required
    nannies = [Nanny(security=security, name=f'nanny_{i}') for i in range(5)]
    queue = Queue(name="data_queue", security=security)
    variable = Variable(name="control_variable", security=security)
    
    for nanny in nannies:
        nanny.start()
        queue.put(random.randint(1, 100))
    
    variable.set("Start Processing")
    return nannies, queue, variable

def process_data(client, queue, variable):
    while True:
        try:
            data = queue.get(timeout=5)
            logger.info(f"Processing data: {data}")
            # Simulating some processing
            result = data * 2
            logger.info(f"Processed result: {result}")
            
            if variable.get() == "Stop Processing":
                logger.info("Stopping data processing")
                break
        except TimeoutError:
            logger.warning("Queue is empty, waiting for more data")

def main(config_file):
    try:
        config = read_config(config_file)
        client = Client(security=Security(**config, require_encryption=True))  # Fixed: Encryption required
        nannies, queue, variable = start_nannies_with_communication(config)
        
        logger.info("Starting data processing")
        process_data(client, queue, variable)
        
        # Cleanup
        variable.set("Stop Processing")
        for nanny in nannies:
            nanny.close()
        client.close()
    except Exception as e:
        logger.error(f"An error occurred: {e}")
    finally:
        logger.info("Process completed")

if __name__ == "__main__":
    main("config.json")