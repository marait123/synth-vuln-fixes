import tornado.ioloop
import tornado.web
import urllib3 as ur3
import json
import sqlite3
import logging

# Configure logging
logging.basicConfig(filename='app.log', level=logging.INFO)

# Database setup
conn = sqlite3.connect('users.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users
                  (id INTEGER PRIMARY KEY, username TEXT, email TEXT)''')
conn.commit()

class MainHandler(tornado.web.RequestHandler):
    https_pool = ur3.connectionpool.HTTPSConnectionPool("example.com")
    def get(self):
        try:
            response = self.https_pool.request('GET', '/')
            self.write(response.data.decode('utf-8'))
        except Exception as e:
            logging.error(f"Error in MainHandler: {str(e)}")
            self.write("An error occurred")

class UserHandler(tornado.web.RequestHandler):
    def get(self, user_id):
        try:
            cursor.execute("SELECT * FROM users WHERE id=?", (user_id,))
            user = cursor.fetchone()
            if user:
                self.write(json.dumps({"id": user[0], "username": user[1], "email": user[2]}))
            else:
                self.set_status(404)
                self.write({"error": "User not found"})
        except Exception as e:
            logging.error(f"Error in UserHandler: {str(e)}")
            self.set_status(500)
            self.write({"error": "Internal server error"})

class AddUserHandler(tornado.web.RequestHandler):
    def post(self):
        try:
            data = json.loads(self.request.body)
            username = data.get('username')
            email = data.get('email')
            if username and email:
                cursor.execute("INSERT INTO users (username, email) VALUES (?, ?)", (username, email))
                conn.commit()
                self.write({"success": True, "id": cursor.lastrowid})
            else:
                self.set_status(400)
                self.write({"error": "Missing username or email"})
        except json.JSONDecodeError:
            self.set_status(400)
            self.write({"error": "Invalid JSON"})
        except Exception as e:
            logging.error(f"Error in AddUserHandler: {str(e)}")
            self.set_status(500)
            self.write({"error": "Internal server error"})

class ExternalDataHandler(tornado.web.RequestHandler):
    https_pool = ur3.connectionpool.HTTPSConnectionPool("api.example.com")
    def get(self):
        try:
            response = self.https_pool.request('GET', '/data')
            self.write(response.data.decode('utf-8'))
        except Exception as e:
            logging.error(f"Error in ExternalDataHandler: {str(e)}")
            self.set_status(500)
            self.write({"error": "Failed to fetch external data"})

def make_app():
    return tornado.web.Application([
        (r"/", MainHandler),
        (r"/user/(\d+)", UserHandler),
        (r"/add_user", AddUserHandler),
        (r"/external_data", ExternalDataHandler),
    ])

if __name__ == "__main__":
    app = make_app()
    app.listen(8888)
    tornado.ioloop.IOLoop.current().start()