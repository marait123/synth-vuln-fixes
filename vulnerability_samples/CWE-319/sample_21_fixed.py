import os
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
from distributed import Client
from distributed.security import Security

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(120), nullable=False)

def init_dask_security():
    security = Security(require_encryption=True)
    return security

dask_client = None

@app.route('/start-dask')
def start_dask():
    global dask_client
    security = init_dask_security()
    dask_client = Client(security=security)
    return "Dask started."

@app.route('/register', methods=['POST'])
def register_user():
    data = request.json
    username = data.get('username')
    password = data.get('password')
    if User.query.filter_by(username=username).first():
        return jsonify({"error": "Username already exists"}), 400
    new_user = User(username=username, password_hash=generate_password_hash(password))
    db.session.add(new_user)
    db.session.commit()
    return jsonify({"message": "User registered successfully"}), 201

@app.route('/login', methods=['POST'])
def login_user():
    data = request.json
    username = data.get('username')
    password = data.get('password')
    user = User.query.filter_by(username=username).first()
    if user and check_password_hash(user.password_hash, password):
        return jsonify({"message": "Login successful"}), 200
    return jsonify({"error": "Invalid credentials"}), 401

@app.route('/process-data', methods=['POST'])
def process_data():
    if not dask_client:
        return jsonify({"error": "Dask not initialized"}), 400
    data = request.json.get('data', [])
    result = dask_client.submit(lambda x: [i * 2 for i in x], data).result()
    return jsonify({"result": result})

@app.route('/get-sensitive-info')
def get_sensitive_info():
    sensitive_data = os.environ.get('SENSITIVE_INFO', 'Default sensitive information')
    return jsonify({"sensitive_info": sensitive_data})

if __name__ == '__main__':
    db.create_all()
    app.run(debug=True)