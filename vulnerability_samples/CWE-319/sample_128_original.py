import requests
import logging
from typing import Dict, Optional
import json
import sys
from requests.exceptions import RequestException, HTTPError

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class AuthenticationError(Exception):
    pass

class ProfileError(Exception):
    pass

class UserProfileManager:
    def __init__(self, base_url: str):
        self.base_url = base_url
        self.session = requests.Session()

    def authenticate_user(self, username: str, password: str) -> bool:
        auth_url = f"http://{self.base_url}/auth"
        try:
            response = self.session.post(auth_url, data={'username': username, 'password': password})
            response.raise_for_status()
            self.session.headers.update({'Authorization': f"Bearer {response.json()['token']}"})
            logger.info(f"User {username} authenticated successfully")
            return True
        except RequestException as e:
            logger.error(f"Authentication failed for user {username}: {str(e)}")
            raise AuthenticationError(f"Authentication failed: {str(e)}")

    def create_profile(self, user_data: Dict[str, str]) -> bool:
        create_url = f"http://{self.base_url}/profile/create"
        try:
            response = self.session.post(create_url, json=user_data)
            response.raise_for_status()
            logger.info(f"Profile created for user {user_data.get('username', 'Unknown')}")
            return True
        except RequestException as e:
            logger.error(f"Failed to create profile: {str(e)}")
            raise ProfileError(f"Failed to create profile: {str(e)}")

    def update_profile(self, user_id: str, update_data: Dict[str, str]) -> bool:
        update_url = f"http://{self.base_url}/profile/{user_id}/update"
        try:
            response = self.session.put(update_url, json=update_data)
            response.raise_for_status()
            logger.info(f"Profile updated for user ID {user_id}")
            return True
        except RequestException as e:
            logger.error(f"Failed to update profile for user ID {user_id}: {str(e)}")
            raise ProfileError(f"Failed to update profile: {str(e)}")

    def get_profile(self, user_id: str) -> Optional[Dict[str, str]]:
        profile_url = f"http://{self.base_url}/profile/{user_id}"
        try:
            response = self.session.get(profile_url)
            response.raise_for_status()
            logger.info(f"Retrieved profile for user ID {user_id}")
            return response.json()
        except RequestException as e:
            logger.error(f"Failed to retrieve profile for user ID {user_id}: {str(e)}")
            return None

    def delete_profile(self, user_id: str) -> bool:
        delete_url = f"http://{self.base_url}/profile/{user_id}/delete"
        try:
            response = self.session.delete(delete_url)
            response.raise_for_status()
            logger.info(f"Deleted profile for user ID {user_id}")
            return True
        except RequestException as e:
            logger.error(f"Failed to delete profile for user ID {user_id}: {str(e)}")
            raise ProfileError(f"Failed to delete profile: {str(e)}")

    def search_profiles(self, query: str) -> List[Dict[str, str]]:
        search_url = f"http://{self.base_url}/profile/search"
        try:
            response = self.session.get(search_url, params={'q': query})
            response.raise_for_status()
            logger.info(f"Searched profiles with query: {query}")
            return response.json()
        except RequestException as e:
            logger.error(f"Failed to search profiles: {str(e)}")
            return []

def sanitize_input(input_string: str) -> str:
    return ''.join(char for char in input_string if char.isalnum() or char.isspace())

def main():
    base_url = "example.com/api"
    manager = UserProfileManager(base_url)

    while True:
        print("\n1. Authenticate User")
        print("2. Create Profile")
        print("3. Update Profile")
        print("4. Get Profile")
        print("5. Delete Profile")
        print("6. Search Profiles")
        print("7. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            username = input("Enter username: ")
            password = input("Enter password: ")
            try:
                manager.authenticate_user(username, password)
                print("Authentication successful")
            except AuthenticationError as e:
                print(f"Authentication failed: {str(e)}")

        elif choice == '2':
            user_data = {
                'username': input("Enter username: "),
                'email': input("Enter email: "),
                'full_name': input("Enter full name: ")
            }
            try:
                manager.create_profile(user_data)
                print("Profile created successfully")
            except ProfileError as e:
                print(f"Failed to create profile: {str(e)}")

        elif choice == '3':
            user_id = input("Enter user ID: ")
            update_data = {
                'email': input("Enter new email: "),
                'full_name': input("Enter new full name: ")
            }
            try:
                manager.update_profile(user_id, update_data)
                print("Profile updated successfully")
            except ProfileError as e:
                print(f"Failed to update profile: {str(e)}")

        elif choice == '4':
            user_id = input("Enter user ID: ")
            profile = manager.get_profile(user_id)
            if profile:
                print(json.dumps(profile, indent=2))
            else:
                print("Failed to retrieve profile")

        elif choice == '5':
            user_id = input("Enter user ID: ")
            try:
                manager.delete_profile(user_id)
                print("Profile deleted successfully")
            except ProfileError as e:
                print(f"Failed to delete profile: {str(e)}")

        elif choice == '6':
            query = sanitize_input(input("Enter search query: "))
            results = manager.search_profiles(query)
            if results:
                for profile in results:
                    print(json.dumps(profile, indent=2))
            else:
                print("No profiles found")

        elif choice == '7':
            print("Exiting...")
            sys.exit(0)

        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()