import requests
import logging
from typing import Dict, Optional

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class UserProfileManager:
    def __init__(self, base_url: str):
        self.base_url = base_url
        self.session = requests.Session()

    def authenticate_user(self, username: str, password: str) -> bool:
        auth_url = f"https://{self.base_url}/auth"
        try:
            response = self.session.post(auth_url, data={'username': username, 'password': password})
            response.raise_for_status()
            self.session.headers.update({'Authorization': f"Bearer {response.json()['token']}"})
            logger.info(f"User {username} authenticated successfully")
            return True
        except requests.RequestException as e:
            logger.error(f"Authentication failed for user {username}: {str(e)}")
            return False

    def create_profile(self, user_data: Dict[str, str]) -> bool:
        create_url = f"https://{self.base_url}/profile/create"
        try:
            response = self.session.post(create_url, json=user_data)
            response.raise_for_status()
            logger.info(f"Profile created for user {user_data.get('username', 'Unknown')}")
            return True
        except requests.RequestException as e:
            logger.error(f"Failed to create profile: {str(e)}")
            return False

    def update_profile(self, user_id: str, update_data: Dict[str, str]) -> bool:
        update_url = f"https://{self.base_url}/profile/{user_id}/update"
        try:
            response = self.session.put(update_url, json=update_data)
            response.raise_for_status()
            logger.info(f"Profile updated for user ID {user_id}")
            return True
        except requests.RequestException as e:
            logger.error(f"Failed to update profile for user ID {user_id}: {str(e)}")
            return False

    def get_profile(self, user_id: str) -> Optional[Dict[str, str]]:
        profile_url = f"https://{self.base_url}/profile/{user_id}"
        try:
            response = self.session.get(profile_url)
            response.raise_for_status()
            logger.info(f"Retrieved profile for user ID {user_id}")
            return response.json()
        except requests.RequestException as e:
            logger.error(f"Failed to retrieve profile for user ID {user_id}: {str(e)}")
            return None

    def delete_profile(self, user_id: str) -> bool:
        delete_url = f"https://{self.base_url}/profile/{user_id}/delete"
        try:
            response = self.session.delete(delete_url)
            response.raise_for_status()
            logger.info(f"Deleted profile for user ID {user_id}")
            return True
        except requests.RequestException as e:
            logger.error(f"Failed to delete profile for user ID {user_id}: {str(e)}")
            return False