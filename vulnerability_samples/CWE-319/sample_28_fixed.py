import sqlite3
from fastapi import FastAPI, HTTPException, Depends
from fastapi.security import HTTPBasic, HTTPBasicCredentials
import requests
import hashlib
import logging
from functools import lru_cache

app = FastAPI()
security = HTTPBasic()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Database setup
conn = sqlite3.connect('users.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS users
             (username TEXT PRIMARY KEY, password TEXT)''')
conn.commit()

def get_current_username(credentials: HTTPBasicCredentials = Depends(security)):
    correct_username = credentials.username == "admin"
    correct_password = credentials.password == "password"
    if not (correct_username and correct_password):
        raise HTTPException(status_code=401, detail="Incorrect username or password")
    return credentials.username

@app.get("/fetch")
def fetch_data(username: str = Depends(get_current_username)):
    logger.info(f"User {username} is fetching data")
    with requests.Session() as session:
        response = session.get("https://example.com")
        return response.text

@app.get("/user/{username}")
def get_user(username: str, current_user: str = Depends(get_current_username)):
    c.execute("SELECT username FROM users WHERE username=?", (username,))
    user = c.fetchone()
    if user:
        return {"username": user[0]}
    raise HTTPException(status_code=404, detail="User not found")

@app.post("/user")
def create_user(username: str, password: str, current_user: str = Depends(get_current_username)):
    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    try:
        c.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, hashed_password))
        conn.commit()
        return {"message": "User created successfully"}
    except sqlite3.IntegrityError:
        raise HTTPException(status_code=400, detail="Username already exists")

@lru_cache(maxsize=128)
def fetch_external_data(url: str):
    with requests.Session() as session:
        response = session.get(url)
        return response.text

@app.get("/cached-data")
def get_cached_data(username: str = Depends(get_current_username)):
    logger.info(f"User {username} is fetching cached data")
    return fetch_external_data("https://example.com/api/data")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)