import os
import logging
from aiohttp import web
from distributed import Client
from distributed.security import Security
import yaml
import hashlib

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load configuration
with open('config.yaml', 'r') as config_file:
    config = yaml.safe_load(config_file)

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def authenticate(username, password):
    stored_password = config['users'].get(username)
    if stored_password and stored_password == hash_password(password):
        return True
    return False

async def start_dask_view(request):
    username = request.query.get('username')
    password = request.query.get('password')
    
    if not authenticate(username, password):
        return web.Response(text="Authentication failed", status=401)
    
    try:
        client = init_dask_client()
        future = client.submit(lambda x: x + 1, 10)
        result = await future.result()
        
        # Perform additional computations
        squared = client.submit(lambda x: x ** 2, result)
        cubed = client.submit(lambda x: x ** 3, result)
        
        squared_result = await squared.result()
        cubed_result = await cubed.result()
        
        response_text = f"Result: {result}, Squared: {squared_result}, Cubed: {cubed_result}"
        logger.info(f"Computation completed for user {username}")
        return web.Response(text=response_text)
    except Exception as e:
        logger.error(f"Error during Dask computation: {str(e)}")
        return web.Response(text="An error occurred", status=500)
    finally:
        await client.close()

def init_dask_client():
    security = Security(require_encryption=True)  # Fixed line
    client = Client(config['dask_scheduler'], security=security)
    return client

app = web.Application()
app.add_routes([web.get('/start-dask', start_dask_view)])

if __name__ == '__main__':
    web.run_app(app, port=config['port'])