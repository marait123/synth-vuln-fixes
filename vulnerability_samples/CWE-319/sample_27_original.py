import tornado.ioloop
import tornado.web
import requests
import sqlite3
import json
import hashlib
import logging
import os
from tornado.options import define, options, parse_command_line

# Database setup
DB_NAME = 'users.db'

def init_db():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT, email TEXT)''')
    conn.commit()
    conn.close()

# User model
class User:
    def __init__(self, username, password, email=None):
        self.username = username
        self.password = password
        self.email = email

    def save(self):
        conn = sqlite3.connect(DB_NAME)
        c = conn.cursor()
        try:
            c.execute("INSERT INTO users (username, password, email) VALUES (?, ?, ?)",
                      (self.username, self.password, self.email))
            conn.commit()
        except sqlite3.IntegrityError:
            logging.error(f"Username {self.username} already exists")
            raise ValueError("Username already exists")
        finally:
            conn.close()

    @staticmethod
    def get(username):
        conn = sqlite3.connect(DB_NAME)
        c = conn.cursor()
        c.execute("SELECT * FROM users WHERE username = ?", (username,))
        user = c.fetchone()
        conn.close()
        return user

    @staticmethod
    def update(username, new_password):
        conn = sqlite3.connect(DB_NAME)
        c = conn.cursor()
        c.execute("UPDATE users SET password = ? WHERE username = ?", (new_password, username))
        conn.commit()
        conn.close()

    @staticmethod
    def delete(username):
        conn = sqlite3.connect(DB_NAME)
        c = conn.cursor()
        c.execute("DELETE FROM users WHERE username = ?", (username,))
        conn.commit()
        conn.close()

class MainHandler(tornado.web.RequestHandler):
    def get(self):
        with requests.Session() as session:
            response = session.get("http://example.com")
            self.write(response.text)

class LoginHandler(tornado.web.RequestHandler):
    def post(self):
        username = self.get_argument("username")
        password = self.get_argument("password")
        user = User.get(username)
        if user and user[2] == password:
            self.write({"status": "success", "message": "Login successful"})
        else:
            self.write({"status": "error", "message": "Invalid credentials"})

class RegisterHandler(tornado.web.RequestHandler):
    def post(self):
        username = self.get_argument("username")
        password = self.get_argument("password")
        email = self.get_argument("email", None)
        try:
            user = User(username, password, email)
            user.save()
            self.write({"status": "success", "message": "User registered successfully"})
        except ValueError as e:
            self.write({"status": "error", "message": str(e)})

class ApiHandler(tornado.web.RequestHandler):
    def get(self):
        data = {"message": "Welcome to the API"}
        self.write(json.dumps(data))

class UpdatePasswordHandler(tornado.web.RequestHandler):
    def post(self):
        username = self.get_argument("username")
        old_password = self.get_argument("old_password")
        new_password = self.get_argument("new_password")
        user = User.get(username)
        if user and user[2] == old_password:
            User.update(username, new_password)
            self.write({"status": "success", "message": "Password updated successfully"})
        else:
            self.write({"status": "error", "message": "Invalid credentials"})

class DeleteAccountHandler(tornado.web.RequestHandler):
    def post(self):
        username = self.get_argument("username")
        password = self.get_argument("password")
        user = User.get(username)
        if user and user[2] == password:
            User.delete(username)
            self.write({"status": "success", "message": "Account deleted successfully"})
        else:
            self.write({"status": "error", "message": "Invalid credentials"})

def make_app():
    return tornado.web.Application([
        (r"/", MainHandler),
        (r"/login", LoginHandler),
        (r"/register", RegisterHandler),
        (r"/api", ApiHandler),
        (r"/update_password", UpdatePasswordHandler),
        (r"/delete_account", DeleteAccountHandler),
    ])

def main():
    define("port", default=8888, help="run on the given port", type=int)
    define("debug", default=False, help="run in debug mode")
    parse_command_line()

    init_db()
    app = make_app()
    app.listen(options.port)
    logging.info(f"Server running on port {options.port}")
    tornado.ioloop.IOLoop.current().start()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()