import cherrypy
import distributed.security
import json
import sqlite3
from datetime import datetime

class DatabaseManager:
    def __init__(self, db_name):
        self.conn = sqlite3.connect(db_name)
        self.cursor = self.conn.cursor()
        self.create_tables()

    def create_tables(self):
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                username TEXT UNIQUE,
                password TEXT
            )
        ''')
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS data (
                id INTEGER PRIMARY KEY,
                user_id INTEGER,
                content TEXT,
                timestamp DATETIME,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        ''')
        self.conn.commit()

    def add_user(self, username, password):
        self.cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, password))
        self.conn.commit()

    def get_user(self, username):
        self.cursor.execute('SELECT * FROM users WHERE username = ?', (username,))
        return self.cursor.fetchone()

    def add_data(self, user_id, content):
        timestamp = datetime.now().isoformat()
        self.cursor.execute('INSERT INTO data (user_id, content, timestamp) VALUES (?, ?, ?)', (user_id, content, timestamp))
        self.conn.commit()

    def get_data(self, user_id):
        self.cursor.execute('SELECT content, timestamp FROM data WHERE user_id = ?', (user_id,))
        return self.cursor.fetchall()

class ConfigManager:
    def __init__(self, config_file):
        with open(config_file, 'r') as f:
            self.config = json.load(f)

    def get_config(self, key):
        return self.config.get(key)

class SecureDataService:
    def __init__(self):
        self.db_manager = DatabaseManager('secure_data.db')
        self.config_manager = ConfigManager('config.json')
        self.security = distributed.security.Security(require_encryption=True)  # Fixed

    @cherrypy.expose
    def index(self):
        return "Welcome to Secure Data Service"

    @cherrypy.expose
    def register(self, username, password):
        try:
            self.db_manager.add_user(username, password)
            return f"User {username} registered successfully"
        except sqlite3.IntegrityError:
            return f"Username {username} already exists"

    @cherrypy.expose
    def login(self, username, password):
        user = self.db_manager.get_user(username)
        if user and user[2] == password:
            cherrypy.session['user_id'] = user[0]
            return f"Welcome, {username}!"
        return "Invalid username or password"

    @cherrypy.expose
    def add_data(self, content):
        if 'user_id' not in cherrypy.session:
            raise cherrypy.HTTPRedirect('/index')
        user_id = cherrypy.session['user_id']
        self.db_manager.add_data(user_id, content)
        return "Data added successfully"

    @cherrypy.expose
    def get_data(self):
        if 'user_id' not in cherrypy.session:
            raise cherrypy.HTTPRedirect('/index')
        user_id = cherrypy.session['user_id']
        data = self.db_manager.get_data(user_id)
        return json.dumps(data)

    @cherrypy.expose
    def get_config(self, key):
        return self.config_manager.get_config(key)

if __name__ == '__main__':
    cherrypy.config.update({'server.socket_host': '0.0.0.0',
                            'server.socket_port': 8080,
                            'tools.sessions.on': True,
                            'tools.sessions.storage_type': "file",
                            'tools.sessions.storage_path': "./sessions",
                            'tools.sessions.timeout': 60})
    cherrypy.quickstart(SecureDataService())