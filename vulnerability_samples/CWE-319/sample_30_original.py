import os
from bottle import route, run, request, response
import distributed.security
import logging
import html
import json
import hashlib
import re
from datetime import datetime

# Set up logging
logging.basicConfig(filename='app.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# In-memory user database
users = {}

class CustomException(Exception):
    pass

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def validate_password(password):
    if len(password) < 8:
        raise CustomException("Password must be at least 8 characters long")
    if not re.search(r"\d", password):
        raise CustomException("Password must contain at least one digit")
    if not re.search(r"[A-Z]", password):
        raise CustomException("Password must contain at least one uppercase letter")

def log_activity(activity):
    logging.info(activity)

@route('/register', method='POST')
def register():
    try:
        username = request.forms.get('username')
        password = request.forms.get('password')
        
        if not username or not password:
            raise CustomException("Username and password are required")
        
        validate_password(password)
        
        if username in users:
            raise CustomException("Username already exists")
        
        users[username] = {
            'password': hash_password(password),
            'created_at': datetime.now().isoformat()
        }
        log_activity(f"User registered: {username}")
        return json.dumps({"status": "success", "message": "Registration successful"})
    except CustomException as e:
        response.status = 400
        return json.dumps({"status": "error", "message": str(e)})
    except Exception as e:
        logging.error(f"Unexpected error during registration: {str(e)}")
        response.status = 500
        return json.dumps({"status": "error", "message": "An unexpected error occurred"})

@route('/login', method='POST')
def login():
    try:
        username = request.forms.get('username')
        password = request.forms.get('password')

        if not username or not password:
            raise CustomException("Username and password are required")

        if username not in users or users[username]['password'] != hash_password(password):
            raise CustomException("Invalid credentials")

        security = distributed.security.Security(require_encryption=False)  # Vulnerable line
        log_activity(f"User logged in: {username}")
        response.status = 200
        return json.dumps({"status": "success", "message": "Login successful"})
    except CustomException as e:
        response.status = 401
        return json.dumps({"status": "error", "message": str(e)})
    except Exception as e:
        logging.error(f"Unexpected error during login: {str(e)}")
        response.status = 500
        return json.dumps({"status": "error", "message": "An unexpected error occurred"})

@route('/profile/<username>')
def profile(username):
    try:
        if username not in users:
            raise CustomException("User not found")
        user_data = users[username]
        safe_username = html.escape(username)
        return json.dumps({
            "username": safe_username,
            "created_at": user_data['created_at']
        })
    except CustomException as e:
        response.status = 404
        return json.dumps({"status": "error", "message": str(e)})
    except Exception as e:
        logging.error(f"Unexpected error in profile: {str(e)}")
        response.status = 500
        return json.dumps({"status": "error", "message": "An unexpected error occurred"})

@route('/update_password', method='POST')
def update_password():
    try:
        username = request.forms.get('username')
        old_password = request.forms.get('old_password')
        new_password = request.forms.get('new_password')

        if not username or not old_password or not new_password:
            raise CustomException("All fields are required")

        if username not in users or users[username]['password'] != hash_password(old_password):
            raise CustomException("Invalid credentials")

        validate_password(new_password)
        users[username]['password'] = hash_password(new_password)
        log_activity(f"Password updated for user: {username}")
        return json.dumps({"status": "success", "message": "Password updated successfully"})
    except CustomException as e:
        response.status = 400
        return json.dumps({"status": "error", "message": str(e)})
    except Exception as e:
        logging.error(f"Unexpected error in update_password: {str(e)}")
        response.status = 500
        return json.dumps({"status": "error", "message": "An unexpected error occurred"})

@route('/delete_account', method='POST')
def delete_account():
    try:
        username = request.forms.get('username')
        password = request.forms.get('password')

        if not username or not password:
            raise CustomException("Username and password are required")

        if username not in users or users[username]['password'] != hash_password(password):
            raise CustomException("Invalid credentials")

        del users[username]
        log_activity(f"Account deleted: {username}")
        return json.dumps({"status": "success", "message": "Account deleted successfully"})
    except CustomException as e:
        response.status = 401
        return json.dumps({"status": "error", "message": str(e)})
    except Exception as e:
        logging.error(f"Unexpected error in delete_account: {str(e)}")
        response.status = 500
        return json.dumps({"status": "error", "message": "An unexpected error occurred"})

@route('/users', method='GET')
def get_users():
    try:
        user_list = [{"username": username, "created_at": data['created_at']} for username, data in users.items()]
        return json.dumps({"users": user_list})
    except Exception as e:
        logging.error(f"Unexpected error in get_users: {str(e)}")
        response.status = 500
        return json.dumps({"status": "error", "message": "An unexpected error occurred"})

def run_tests():
    test_register()
    test_login()
    test_profile()
    test_update_password()
    test_delete_account()
    print("All tests passed!")

def test_register():
    global users
    users = {}
    assert json.loads(register())["status"] == "error"
    request.forms['username'] = "testuser"
    request.forms['password'] = "WeakPass1"
    assert json.loads(register())["status"] == "success"
    assert "testuser" in users

def test_login():
    request.forms['username'] = "testuser"
    request.forms['password'] = "WeakPass1"
    assert json.loads(login())["status"] == "success"
    request.forms['password'] = "wrongpass"
    assert json.loads(login())["status"] == "error"

def test_profile():
    assert json.loads(profile("testuser"))["username"] == "testuser"
    assert json.loads(profile("nonexistent"))["status"] == "error"

def test_update_password():
    request.forms['username'] = "testuser"
    request.forms['old_password'] = "WeakPass1"
    request.forms['new_password'] = "StrongerPass2"
    assert json.loads(update_password())["status"] == "success"
    request.forms['old_password'] = "WeakPass1"
    assert json.loads(update_password())["status"] == "error"

def test_delete_account():
    request.forms['username'] = "testuser"
    request.forms['password'] = "StrongerPass2"
    assert json.loads(delete_account())["status"] == "success"
    assert "testuser" not in users

if __name__ == '__main__':
    run_tests()
    run(host='localhost', port=8080)