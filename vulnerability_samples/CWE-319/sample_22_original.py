import cherrypy
import distributed.security
import json
import sqlite3
from datetime import datetime
import logging
import hashlib
import os
import random
import string

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class DatabaseManager:
    def __init__(self, db_name):
        self.conn = sqlite3.connect(db_name)
        self.cursor = self.conn.cursor()
        self.create_tables()

    def create_tables(self):
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                username TEXT UNIQUE,
                password TEXT,
                salt TEXT
            )
        ''')
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS data (
                id INTEGER PRIMARY KEY,
                user_id INTEGER,
                content TEXT,
                timestamp DATETIME,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        ''')
        self.conn.commit()

    def add_user(self, username, password):
        salt = ''.join(random.choices(string.ascii_letters + string.digits, k=16))
        hashed_password = hashlib.sha256((password + salt).encode()).hexdigest()
        self.cursor.execute('INSERT INTO users (username, password, salt) VALUES (?, ?, ?)', (username, hashed_password, salt))
        self.conn.commit()

    def get_user(self, username):
        self.cursor.execute('SELECT * FROM users WHERE username = ?', (username,))
        return self.cursor.fetchone()

    def add_data(self, user_id, content):
        timestamp = datetime.now().isoformat()
        self.cursor.execute('INSERT INTO data (user_id, content, timestamp) VALUES (?, ?, ?)', (user_id, content, timestamp))
        self.conn.commit()

    def get_data(self, user_id):
        self.cursor.execute('SELECT content, timestamp FROM data WHERE user_id = ?', (user_id,))
        return self.cursor.fetchall()

    def update_data(self, data_id, content):
        self.cursor.execute('UPDATE data SET content = ? WHERE id = ?', (content, data_id))
        self.conn.commit()

    def delete_data(self, data_id):
        self.cursor.execute('DELETE FROM data WHERE id = ?', (data_id,))
        self.conn.commit()

class ConfigManager:
    def __init__(self, config_file):
        with open(config_file, 'r') as f:
            self.config = json.load(f)

    def get_config(self, key):
        return self.config.get(key)

class SecureDataService:
    def __init__(self):
        self.db_manager = DatabaseManager('secure_data.db')
        self.config_manager = ConfigManager('config.json')
        self.security = distributed.security.Security(require_encryption=False)  # Vulnerable

    @cherrypy.expose
    def index(self):
        return "Welcome to Secure Data Service"

    @cherrypy.expose
    def register(self, username, password):
        try:
            self.db_manager.add_user(username, password)
            logging.info(f"User {username} registered successfully")
            return f"User {username} registered successfully"
        except sqlite3.IntegrityError:
            logging.warning(f"Registration failed: Username {username} already exists")
            return f"Username {username} already exists"

    @cherrypy.expose
    def login(self, username, password):
        user = self.db_manager.get_user(username)
        if user:
            hashed_password = hashlib.sha256((password + user[3]).encode()).hexdigest()
            if user[2] == hashed_password:
                cherrypy.session['user_id'] = user[0]
                logging.info(f"User {username} logged in successfully")
                return f"Welcome, {username}!"
        logging.warning(f"Login failed for user {username}")
        return "Invalid username or password"

    @cherrypy.expose
    def add_data(self, content):
        if 'user_id' not in cherrypy.session:
            raise cherrypy.HTTPRedirect('/index')
        user_id = cherrypy.session['user_id']
        self.db_manager.add_data(user_id, content)
        logging.info(f"Data added for user {user_id}")
        return "Data added successfully"

    @cherrypy.expose
    def get_data(self):
        if 'user_id' not in cherrypy.session:
            raise cherrypy.HTTPRedirect('/index')
        user_id = cherrypy.session['user_id']
        data = self.db_manager.get_data(user_id)
        logging.info(f"Data retrieved for user {user_id}")
        return json.dumps(data)

    @cherrypy.expose
    def update_data(self, data_id, content):
        if 'user_id' not in cherrypy.session:
            raise cherrypy.HTTPRedirect('/index')
        self.db_manager.update_data(data_id, content)
        logging.info(f"Data updated: ID {data_id}")
        return "Data updated successfully"

    @cherrypy.expose
    def delete_data(self, data_id):
        if 'user_id' not in cherrypy.session:
            raise cherrypy.HTTPRedirect('/index')
        self.db_manager.delete_data(data_id)
        logging.info(f"Data deleted: ID {data_id}")
        return "Data deleted successfully"

    @cherrypy.expose
    def get_config(self, key):
        return self.config_manager.get_config(key)

def run_tests():
    service = SecureDataService()
    
    # Test user registration
    result = service.register("testuser", "testpass")
    assert "registered successfully" in result
    
    # Test login
    result = service.login("testuser", "testpass")
    assert "Welcome" in result
    
    # Test data operations
    service.add_data("Test content")
    data = json.loads(service.get_data())
    assert len(data) > 0
    assert "Test content" in data[0][0]
    
    logging.info("All tests passed successfully")

if __name__ == '__main__':
    cherrypy.config.update({
        'server.socket_host': '0.0.0.0',
        'server.socket_port': 8080,
        'tools.sessions.on': True,
        'tools.sessions.storage_type': "file",
        'tools.sessions.storage_path': "./sessions",
        'tools.sessions.timeout': 60
    })
    
    if not os.path.exists('config.json'):
        with open('config.json', 'w') as f:
            json.dump({"sample_key": "sample_value"}, f)
    
    run_tests()
    cherrypy.quickstart(SecureDataService())