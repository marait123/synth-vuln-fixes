# config.py
DASK_SCHEDULER = "tcp://127.0.0.1:8786"
REQUIRE_ENCRYPTION = True

# utils.py
import logging
from distributed import Client
from distributed.security import Security

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def init_dask_client():
    try:
        security = Security(require_encryption=REQUIRE_ENCRYPTION)
        client = Client(DASK_SCHEDULER, security=security)
        logger.info("Dask client initialized successfully")
        return client
    except Exception as e:
        logger.error(f"Failed to initialize Dask client: {str(e)}")
        return None

# tasks.py
import numpy as np

def complex_calculation(data):
    result = np.mean(data) * np.std(data)
    return result

# views.py
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json
from .utils import init_dask_client
from .tasks import complex_calculation

@csrf_exempt
def start_dask(request):
    if request.method != 'POST':
        return JsonResponse({"error": "Only POST requests are allowed"}, status=405)

    try:
        data = json.loads(request.body)
        input_data = data.get('data', [])

        if not isinstance(input_data, list) or len(input_data) == 0:
            return JsonResponse({"error": "Invalid input data"}, status=400)

        client = init_dask_client()
        if client is None:
            return JsonResponse({"error": "Failed to initialize Dask client"}, status=500)

        future = client.submit(complex_calculation, input_data)
        result = future.result()

        # Perform additional Dask operations
        squared_result = client.submit(lambda x: x**2, result)
        final_result = squared_result.result()

        client.close()
        return JsonResponse({"result": final_result})
    except json.JSONDecodeError:
        return JsonResponse({"error": "Invalid JSON in request body"}, status=400)
    except Exception as e:
        logger.error(f"Error in start_dask view: {str(e)}")
        return JsonResponse({"error": "Internal server error"}, status=500)