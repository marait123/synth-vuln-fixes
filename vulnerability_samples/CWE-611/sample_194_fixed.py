import defusedxml.ElementTree as ET
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
import logging

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///products.db'
db = SQLAlchemy(app)

class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    price = db.Column(db.Float, nullable=False)

    def __repr__(self):
        return f"Product('{self.name}', {self.price})"

logging.basicConfig(filename='app.log', level=logging.INFO)

@app.route('/upload', methods=['POST'])
def upload_product_info():
    try:
        file = request.files['file']
        tree = ET.parse(file)
        root = tree.getroot()
        products = []
        for product in root.findall('product'):
            name = product.find('name').text
            price = float(product.find('price').text)
            new_product = Product(name=name, price=price)
            db.session.add(new_product)
            products.append(f"Product: {name}, Price: {price}")
        db.session.commit()
        logging.info(f"Uploaded {len(products)} products")
        return '\n'.join(products)
    except Exception as e:
        logging.error(f"Error uploading products: {str(e)}")
        return jsonify({"error": "Failed to upload products"}), 400

@app.route('/products', methods=['GET'])
def get_products():
    try:
        products = Product.query.all()
        return jsonify([{"name": p.name, "price": p.price} for p in products])
    except Exception as e:
        logging.error(f"Error retrieving products: {str(e)}")
        return jsonify({"error": "Failed to retrieve products"}), 500

@app.route('/search', methods=['GET'])
def search_products():
    try:
        name = request.args.get('name', '')
        products = Product.query.filter(Product.name.like(f"%{name}%")).all()
        return jsonify([{"name": p.name, "price": p.price} for p in products])
    except Exception as e:
        logging.error(f"Error searching products: {str(e)}")
        return jsonify({"error": "Failed to search products"}), 500

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)