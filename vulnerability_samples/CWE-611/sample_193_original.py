import xml.etree.ElementTree as ET
import logging
import os
from typing import List, Dict
import argparse
import sys
import json
from xml.parsers.expat import ExpatError

class ConfigurationError(Exception):
    pass

class ConfigManager:
    def __init__(self):
        self.configs = {}

    def read_config_files(self, config_files: List[str]) -> None:
        for config_file in config_files:
            if not os.path.exists(config_file):
                logging.warning(f"Configuration file not found: {config_file}")
                continue
            try:
                tree = ET.parse(config_file)  # Vulnerable line
                root = tree.getroot()
                self.configs[config_file] = root
            except ExpatError as e:
                logging.error(f"Error parsing XML in {config_file}: {str(e)}")
            except Exception as e:
                logging.error(f"Unexpected error reading {config_file}: {str(e)}")

    def setup_logging_from_config(self, config: ET.Element) -> None:
        log_config = config.find('logging')
        if log_config is not None:
            log_level = getattr(logging, log_config.find('level').text.upper(), logging.INFO)
            log_file = log_config.find('file').text
            logging.basicConfig(filename=log_file, level=log_level, 
                                format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        else:
            logging.basicConfig(level=logging.INFO, 
                                format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    def apply_app_config(self, config: ET.Element) -> Dict[str, str]:
        app_config = {}
        app_settings = config.find('app_settings')
        if app_settings is not None:
            for setting in app_settings:
                app_config[setting.tag] = setting.text
        return app_config

    def process_configs(self) -> Dict[str, Dict[str, str]]:
        all_app_configs = {}
        for config_file, config in self.configs.items():
            logging.info(f"Processing configuration from {config_file}")
            self.setup_logging_from_config(config)
            app_config = self.apply_app_config(config)
            all_app_configs[config_file] = app_config
            logging.info(f"Application configuration for {config_file}: {app_config}")
        return all_app_configs

    def update_config(self, config_file: str, setting: str, value: str) -> None:
        if config_file not in self.configs:
            raise ConfigurationError(f"Configuration file not found: {config_file}")
        config = self.configs[config_file]
        app_settings = config.find('app_settings')
        if app_settings is None:
            app_settings = ET.SubElement(config, 'app_settings')
        setting_elem = app_settings.find(setting)
        if setting_elem is None:
            setting_elem = ET.SubElement(app_settings, setting)
        setting_elem.text = value
        tree = ET.ElementTree(config)
        tree.write(config_file)
        logging.info(f"Updated {setting} to {value} in {config_file}")

    def delete_config(self, config_file: str) -> None:
        if config_file not in self.configs:
            raise ConfigurationError(f"Configuration file not found: {config_file}")
        del self.configs[config_file]
        if os.path.exists(config_file):
            os.remove(config_file)
        logging.info(f"Deleted configuration file: {config_file}")

def create_sample_config(filename: str) -> None:
    root = ET.Element('config')
    logging = ET.SubElement(root, 'logging')
    ET.SubElement(logging, 'level').text = 'INFO'
    ET.SubElement(logging, 'file').text = 'app.log'
    app_settings = ET.SubElement(root, 'app_settings')
    ET.SubElement(app_settings, 'debug_mode').text = 'false'
    ET.SubElement(app_settings, 'max_connections').text = '100'
    tree = ET.ElementTree(root)
    tree.write(filename)

def main():
    parser = argparse.ArgumentParser(description="Configuration Manager")
    parser.add_argument('--config_files', nargs='+', default=['config1.xml', 'config2.xml', 'config3.xml'], help="List of configuration files")
    parser.add_argument('--create_sample', action='store_true', help="Create sample configuration files")
    parser.add_argument('--update', nargs=3, metavar=('FILE', 'SETTING', 'VALUE'), help="Update a configuration setting")
    parser.add_argument('--delete', metavar='FILE', help="Delete a configuration file")
    args = parser.parse_args()

    if args.create_sample:
        for file in args.config_files:
            create_sample_config(file)
        print("Sample configuration files created.")
        return

    config_manager = ConfigManager()

    try:
        config_manager.read_config_files(args.config_files)

        if args.update:
            config_manager.update_config(*args.update)
        elif args.delete:
            config_manager.delete_config(args.delete)
        else:
            all_app_configs = config_manager.process_configs()
            print(json.dumps(all_app_configs, indent=2))

    except ConfigurationError as e:
        logging.error(f"Configuration error: {str(e)}")
        sys.exit(1)
    except Exception as e:
        logging.error(f"An unexpected error occurred: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()