from pyramid.view import view_config
from pyramid.response import Response
from pyramid.config import Configurator
from wsgiref.simple_server import make_server
import xml.etree.ElementTree as ET
import json
from datetime import datetime
import logging
import uuid

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# In-memory storage for events
events_db = {}

class EventValidationError(Exception):
    pass

def validate_event(event_details):
    required_fields = ['name', 'date', 'location', 'organizer']
    for field in required_fields:
        if field not in event_details:
            raise EventValidationError(f"Missing required field: {field}")
    try:
        datetime.strptime(event_details['date'], '%Y-%m-%d')
    except ValueError:
        raise EventValidationError("Invalid date format. Use YYYY-MM-DD")
    return True

def store_event(event_id, event_details):
    events_db[event_id] = event_details
    logger.info(f"Event stored with ID: {event_id}")

def get_event(event_id):
    return events_db.get(event_id)

def update_event(event_id, event_details):
    if event_id not in events_db:
        raise KeyError("Event not found")
    events_db[event_id].update(event_details)
    logger.info(f"Event updated: {event_id}")

def delete_event(event_id):
    if event_id not in events_db:
        raise KeyError("Event not found")
    del events_db[event_id]
    logger.info(f"Event deleted: {event_id}")

@view_config(route_name='register_event', request_method='POST')
def register_event(request):
    try:
        xml_data = request.body
        event_details = ET.parse(xml_data).getroot()  # Vulnerable line
        event_dict = {child.tag: child.text for child in event_details}
        
        validate_event(event_dict)
        
        event_id = str(uuid.uuid4())
        store_event(event_id, event_dict)
        
        return Response(f'Event registered successfully. Event ID: {event_id}', status=201)
    except ET.ParseError:
        logger.error("Invalid XML data received")
        return Response('Invalid XML data', status=400)
    except EventValidationError as e:
        logger.error(f"Event validation failed: {str(e)}")
        return Response(f'Invalid event details: {str(e)}', status=400)
    except Exception as e:
        logger.exception("Unexpected error in register_event")
        return Response(f'Error: {str(e)}', status=500)

@view_config(route_name='get_event', request_method='GET')
def retrieve_event(request):
    event_id = request.matchdict.get('id')
    try:
        event = get_event(event_id)
        if event:
            return Response(json.dumps(event), content_type='application/json')
        else:
            return Response('Event not found', status=404)
    except Exception as e:
        logger.exception(f"Error retrieving event {event_id}")
        return Response(f'Error: {str(e)}', status=500)

@view_config(route_name='list_events', request_method='GET')
def list_events(request):
    try:
        return Response(json.dumps(list(events_db.keys())), content_type='application/json')
    except Exception as e:
        logger.exception("Error listing events")
        return Response(f'Error: {str(e)}', status=500)

@view_config(route_name='update_event', request_method='PUT')
def update_event_view(request):
    event_id = request.matchdict.get('id')
    try:
        xml_data = request.body
        event_details = ET.parse(xml_data).getroot()  # Vulnerable line
        event_dict = {child.tag: child.text for child in event_details}
        
        validate_event(event_dict)
        update_event(event_id, event_dict)
        
        return Response('Event updated successfully', status=200)
    except KeyError:
        return Response('Event not found', status=404)
    except ET.ParseError:
        logger.error("Invalid XML data received for update")
        return Response('Invalid XML data', status=400)
    except EventValidationError as e:
        logger.error(f"Event update validation failed: {str(e)}")
        return Response(f'Invalid event details: {str(e)}', status=400)
    except Exception as e:
        logger.exception(f"Error updating event {event_id}")
        return Response(f'Error: {str(e)}', status=500)

@view_config(route_name='delete_event', request_method='DELETE')
def delete_event_view(request):
    event_id = request.matchdict.get('id')
    try:
        delete_event(event_id)
        return Response('Event deleted successfully', status=200)
    except KeyError:
        return Response('Event not found', status=404)
    except Exception as e:
        logger.exception(f"Error deleting event {event_id}")
        return Response(f'Error: {str(e)}', status=500)

if __name__ == '__main__':
    with Configurator() as config:
        config.add_route('register_event', '/events')
        config.add_route('get_event', '/events/{id}')
        config.add_route('list_events', '/events')
        config.add_route('update_event', '/events/{id}')
        config.add_route('delete_event', '/events/{id}')
        config.scan()
        app = config.make_wsgi_app()
    
    server = make_server('0.0.0.0', 6543, app)
    print('Web server started on http://0.0.0.0:6543')
    server.serve_forever()