import falcon
from defusedxml.ElementTree import parse
from wsgiref import simple_server
import sqlite3
import logging
import io

logging.basicConfig(filename='app.log', level=logging.INFO)

class MessageResource:
    def __init__(self):
        self.conn = sqlite3.connect('messages.db')
        self.cursor = self.conn.cursor()
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS messages
                               (id INTEGER PRIMARY KEY, sender TEXT, content TEXT)''')
        self.conn.commit()

    def on_post(self, req, resp):
        logging.info(f"Received POST request from {req.remote_addr}")
        xml_data = req.bounded_stream.read()
        try:
            tree = parse(io.BytesIO(xml_data))  # Secure XML parsing
            root = tree.getroot()
            
            sender = root.find('sender').text
            content = root.find('content').text
            
            if not self.validate_sender(sender):
                resp.status = falcon.HTTP_400
                resp.body = "Invalid sender name"
                return
            
            self.cursor.execute("INSERT INTO messages (sender, content) VALUES (?, ?)", (sender, content))
            self.conn.commit()
            
            response_message = f"Secure message received from {sender}"
            resp.status = falcon.HTTP_200
            resp.body = response_message
        except Exception as e:
            logging.error(f"Error processing XML: {str(e)}")
            resp.status = falcon.HTTP_400
            resp.body = "Error processing XML"

    def on_get(self, req, resp):
        logging.info(f"Received GET request from {req.remote_addr}")
        self.cursor.execute("SELECT * FROM messages")
        messages = self.cursor.fetchall()
        
        response = []
        for message in messages:
            response.append(f"Sender: {message[1]}, Content: {message[2]}")
        
        resp.status = falcon.HTTP_200
        resp.body = "\n".join(response)

    def validate_sender(self, sender):
        return sender.isalnum() and len(sender) <= 50

app = falcon.App()
message_resource = MessageResource()
app.add_route('/message', message_resource)

if __name__ == '__main__':
    httpd = simple_server.make_server('127.0.0.1', 8000, app)
    httpd.serve_forever()