import xml.etree.ElementTree as ET
from flask import Flask, request, jsonify, render_template
from flask_sqlalchemy import SQLAlchemy
import logging
from werkzeug.utils import secure_filename
import os
import re

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///products.db'
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['ALLOWED_EXTENSIONS'] = {'xml'}
db = SQLAlchemy(app)

class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    price = db.Column(db.Float, nullable=False)
    description = db.Column(db.Text)
    stock = db.Column(db.Integer, default=0)

    def __repr__(self):
        return f"Product('{self.name}', {self.price}, stock: {self.stock})"

    def to_dict(self):
        return {
            "id": self.id,
            "name": self.name,
            "price": self.price,
            "description": self.description,
            "stock": self.stock
        }

logging.basicConfig(filename='app.log', level=logging.INFO,
                    format='%(asctime)s:%(levelname)s:%(message)s')

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload_product_info():
    if 'file' not in request.files:
        return jsonify({"error": "No file part"}), 400
    file = request.files['file']
    if file.filename == '':
        return jsonify({"error": "No selected file"}), 400
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(file_path)
        try:
            tree = ET.parse(file_path)
            root = tree.getroot()
            products = []
            for product in root.findall('product'):
                name = product.find('name').text
                price = float(product.find('price').text)
                description = product.find('description').text if product.find('description') is not None else ""
                stock = int(product.find('stock').text) if product.find('stock') is not None else 0
                new_product = Product(name=name, price=price, description=description, stock=stock)
                db.session.add(new_product)
                products.append(f"Product: {name}, Price: {price}, Stock: {stock}")
            db.session.commit()
            logging.info(f"Uploaded {len(products)} products")
            return '\n'.join(products)
        except Exception as e:
            logging.error(f"Error uploading products: {str(e)}")
            return jsonify({"error": "Failed to upload products"}), 400
        finally:
            os.remove(file_path)
    return jsonify({"error": "Invalid file type"}), 400

@app.route('/products', methods=['GET'])
def get_products():
    try:
        products = Product.query.all()
        return jsonify([p.to_dict() for p in products])
    except Exception as e:
        logging.error(f"Error retrieving products: {str(e)}")
        return jsonify({"error": "Failed to retrieve products"}), 500

@app.route('/search', methods=['GET'])
def search_products():
    try:
        name = request.args.get('name', '')
        products = Product.query.filter(Product.name.like(f"%{name}%")).all()
        return jsonify([p.to_dict() for p in products])
    except Exception as e:
        logging.error(f"Error searching products: {str(e)}")
        return jsonify({"error": "Failed to search products"}), 500

@app.route('/product/<int:product_id>', methods=['GET', 'PUT', 'DELETE'])
def manage_product(product_id):
    product = Product.query.get_or_404(product_id)
    if request.method == 'GET':
        return jsonify(product.to_dict())
    elif request.method == 'PUT':
        data = request.json
        product.name = data.get('name', product.name)
        product.price = data.get('price', product.price)
        product.description = data.get('description', product.description)
        product.stock = data.get('stock', product.stock)
        db.session.commit()
        return jsonify(product.to_dict())
    elif request.method == 'DELETE':
        db.session.delete(product)
        db.session.commit()
        return '', 204

@app.route('/product', methods=['POST'])
def create_product():
    data = request.json
    new_product = Product(
        name=data['name'],
        price=data['price'],
        description=data.get('description', ''),
        stock=data.get('stock', 0)
    )
    db.session.add(new_product)
    db.session.commit()
    return jsonify(new_product.to_dict()), 201

@app.errorhandler(404)
def not_found_error(error):
    return jsonify({"error": "Resource not found"}), 404

@app.errorhandler(500)
def internal_error(error):
    db.session.rollback()
    return jsonify({"error": "Internal server error"}), 500

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    if not os.path.exists(app.config['UPLOAD_FOLDER']):
        os.makedirs(app.config['UPLOAD_FOLDER'])
    app.run(debug=True)