from defusedxml.ElementTree import parse, fromstring
from bottle import route, run, request
import sqlite3
import logging

# Set up logging
logging.basicConfig(filename='app.log', level=logging.INFO)

# Database setup
def init_db():
    conn = sqlite3.connect('xml_data.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS xml_entries
                 (id INTEGER PRIMARY KEY, tag TEXT, content TEXT)''')
    conn.commit()
    conn.close()

init_db()

def validate_xml(xml_string):
    try:
        tree = fromstring(xml_string)
        return True
    except Exception:
        return False

def process_xml(xml_string):
    tree = fromstring(xml_string)
    return tree.tag, tree.tostring(tree, encoding='unicode')

def store_xml(tag, content):
    conn = sqlite3.connect('xml_data.db')
    c = conn.cursor()
    c.execute("INSERT INTO xml_entries (tag, content) VALUES (?, ?)", (tag, content))
    conn.commit()
    conn.close()

@route('/upload/xml', method='POST')
def upload_xml():
    try:
        xml_data = request.body.read().decode('utf-8')
        if not validate_xml(xml_data):
            return "Invalid XML data"
        
        tree = parse(xml_data)  # Fixed line
        root = tree.getroot()
        
        tag, content = process_xml(xml_data)
        store_xml(tag, content)
        
        logging.info(f"XML processed and stored: {tag}")
        return f"XML processed and stored: {tag}"
    except Exception as e:
        logging.error(f"Error processing XML: {str(e)}")
        return f"Error processing XML: {str(e)}"

@route('/get/xml/<id:int>', method='GET')
def get_xml(id):
    try:
        conn = sqlite3.connect('xml_data.db')
        c = conn.cursor()
        c.execute("SELECT tag, content FROM xml_entries WHERE id = ?", (id,))
        result = c.fetchone()
        conn.close()
        
        if result:
            tag, content = result
            return f"XML entry {id}: Tag: {tag}, Content: {content}"
        else:
            return f"No XML entry found with id {id}"
    except Exception as e:
        logging.error(f"Error retrieving XML: {str(e)}")
        return f"Error retrieving XML: {str(e)}"

run(host='localhost', port=8080, debug=True)