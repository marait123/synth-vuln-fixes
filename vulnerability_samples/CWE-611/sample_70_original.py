from starlette.applications import Starlette
from starlette.responses import JSONResponse
from starlette.routing import Route
import xml.etree.ElementTree as ET
import uvicorn
import logging
from typing import Dict, Any, List
import argparse
import json
import os
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class ConfigException(Exception):
    pass

class Config:
    def __init__(self, data: Dict[str, Any]):
        self.data = data

    def to_json(self) -> str:
        return json.dumps(self.data)

    def save_to_file(self, filename: str) -> None:
        with open(filename, 'w') as f:
            json.dump(self.data, f, indent=2)

    @classmethod
    def load_from_file(cls, filename: str) -> 'Config':
        with open(filename, 'r') as f:
            data = json.load(f)
        return cls(data)

def validate_xml_structure(root: ET.Element) -> bool:
    required_elements = ['name', 'version', 'description']
    return all(root.find(elem) is not None for elem in required_elements)

def process_xml_data(root: ET.Element) -> Dict[str, Any]:
    return {
        'name': root.find('name').text,
        'version': root.find('version').text,
        'description': root.find('description').text,
        'options': [option.text for option in root.findall('options/option')],
        'created_at': datetime.now().isoformat()
    }

def sanitize_input(input_string: str) -> str:
    return ''.join(char for char in input_string if char.isalnum() or char in ['_', '-', '.'])

async def config_handler(request):
    try:
        form = await request.form()
        xml_file = form['config_file']
        
        if not xml_file.filename.endswith('.xml'):
            raise ConfigException("Invalid file type. Only XML files are allowed.")

        tree = ET.parse(xml_file.file)  # Vulnerable line
        root = tree.getroot()

        if not validate_xml_structure(root):
            raise ConfigException("Invalid XML structure")

        config_data = process_xml_data(root)
        config = Config(config_data)

        sanitized_name = sanitize_input(config.data['name'])
        config.save_to_file(f"{sanitized_name}_config.json")

        logger.info(f"Config processed: {sanitized_name}")
        return JSONResponse({'status': 'Config processed successfully', 'data': config.data})
    except ConfigException as ce:
        logger.error(f"Config error: {str(ce)}")
        return JSONResponse({'status': 'Error', 'message': str(ce)}, status_code=400)
    except Exception as e:
        logger.error(f"Error processing config: {str(e)}")
        return JSONResponse({'status': 'Error', 'message': 'Internal server error'}, status_code=500)

async def list_configs(request):
    try:
        configs = [f for f in os.listdir('.') if f.endswith('_config.json')]
        return JSONResponse({'status': 'Success', 'configs': configs})
    except Exception as e:
        logger.error(f"Error listing configs: {str(e)}")
        return JSONResponse({'status': 'Error', 'message': 'Internal server error'}, status_code=500)

async def get_config(request):
    try:
        config_name = request.path_params['name']
        sanitized_name = sanitize_input(config_name)
        config = Config.load_from_file(f"{sanitized_name}_config.json")
        return JSONResponse({'status': 'Success', 'data': config.data})
    except FileNotFoundError:
        return JSONResponse({'status': 'Error', 'message': 'Config not found'}, status_code=404)
    except Exception as e:
        logger.error(f"Error retrieving config: {str(e)}")
        return JSONResponse({'status': 'Error', 'message': 'Internal server error'}, status_code=500)

app = Starlette(routes=[
    Route('/config', config_handler, methods=['POST']),
    Route('/configs', list_configs, methods=['GET']),
    Route('/config/{name}', get_config, methods=['GET'])
])

def run_tests():
    logger.info("Running tests...")
    # Mock XML data for testing
    xml_data = """
    <config>
        <name>TestConfig</name>
        <version>1.0</version>
        <description>Test configuration</description>
        <options>
            <option>Option1</option>
            <option>Option2</option>
        </options>
    </config>
    """
    root = ET.fromstring(xml_data)
    assert validate_xml_structure(root), "XML structure validation failed"
    processed_data = process_xml_data(root)
    assert processed_data['name'] == 'TestConfig', "Name mismatch"
    assert processed_data['version'] == '1.0', "Version mismatch"
    assert len(processed_data['options']) == 2, "Options count mismatch"
    logger.info("All tests passed!")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Config Processing Server")
    parser.add_argument('--test', action='store_true', help='Run tests')
    args = parser.parse_args()

    if args.test:
        run_tests()
    else:
        logger.info("Starting server...")
        uvicorn.run(app, host="0.0.0.0", port=8000)