import defusedxml.ElementTree as ET
from django.http import HttpResponse, HttpResponseBadRequest
from django.views import View
from django.contrib.auth.models import User
import logging

logger = logging.getLogger(__name__)

class UserProfile:
    def __init__(self, user):
        self.user = user

    def update_from_xml(self, xml_data):
        try:
            root = ET.fromstring(xml_data)
            self.user.first_name = root.find('first_name').text
            self.user.last_name = root.find('last_name').text
            self.user.email = root.find('email').text
            self.user.save()
            return True
        except ET.ParseError as e:
            logger.error(f"XML parsing error: {e}")
            return False
        except AttributeError as e:
            logger.error(f"Missing required field in XML: {e}")
            return False

def generate_test_xml(first_name, last_name, email):
    return f"""
    <profile>
        <first_name>{first_name}</first_name>
        <last_name>{last_name}</last_name>
        <email>{email}</email>
    </profile>
    """

class UpdateProfileView(View):
    def post(self, request):
        xml_data = request.body
        try:
            profile = ET.fromstring(xml_data)
            user = User.objects.get(id=request.user.id)
            user_profile = UserProfile(user)
            if user_profile.update_from_xml(xml_data):
                return HttpResponse("Profile updated successfully")
            else:
                return HttpResponseBadRequest("Failed to update profile")
        except ET.ParseError as e:
            logger.error(f"XML parsing error: {e}")
            return HttpResponseBadRequest("Invalid XML data")
        except User.DoesNotExist:
            logger.error(f"User not found: {request.user.id}")
            return HttpResponseBadRequest("User not found")
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            return HttpResponseBadRequest("An unexpected error occurred")

# Example usage
test_xml = generate_test_xml("John", "Doe", "john.doe@example.com")
view = UpdateProfileView()
response = view.post(request=type('Request', (), {'body': test_xml, 'user': type('User', (), {'id': 1})})())
print(response.content)