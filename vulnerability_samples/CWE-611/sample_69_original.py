import falcon
import xml.etree.ElementTree as ET
from wsgiref import simple_server
import sqlite3
import logging
import json
import os
import argparse
from datetime import datetime

logging.basicConfig(filename='app.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class CustomException(Exception):
    pass

class MessageResource:
    def __init__(self):
        self.db_path = 'messages.db'
        self.conn = sqlite3.connect(self.db_path)
        self.cursor = self.conn.cursor()
        self.create_table()

    def create_table(self):
        try:
            self.cursor.execute('''CREATE TABLE IF NOT EXISTS messages
                                   (id INTEGER PRIMARY KEY, sender TEXT, content TEXT, timestamp TEXT)''')
            self.conn.commit()
        except sqlite3.Error as e:
            logging.error(f"Database error: {e}")
            raise CustomException("Database initialization failed")

    def on_post(self, req, resp):
        try:
            logging.info(f"Received POST request from {req.remote_addr}")
            xml_data = req.bounded_stream.read()
            tree = ET.parse(xml_data)  # Vulnerable XML parsing
            root = tree.getroot()
            
            sender = root.find('sender').text
            content = root.find('content').text
            
            if not self.validate_sender(sender):
                resp.status = falcon.HTTP_400
                resp.body = json.dumps({"error": "Invalid sender name"})
                return
            
            timestamp = datetime.now().isoformat()
            self.cursor.execute("INSERT INTO messages (sender, content, timestamp) VALUES (?, ?, ?)", 
                                (sender, content, timestamp))
            self.conn.commit()
            
            response_message = f"Message received from {sender}"
            resp.status = falcon.HTTP_200
            resp.body = json.dumps({"message": response_message})
        except ET.ParseError:
            logging.error("XML parsing error")
            resp.status = falcon.HTTP_400
            resp.body = json.dumps({"error": "Invalid XML format"})
        except CustomException as ce:
            logging.error(f"Custom error: {ce}")
            resp.status = falcon.HTTP_500
            resp.body = json.dumps({"error": str(ce)})
        except Exception as e:
            logging.error(f"Unexpected error: {e}")
            resp.status = falcon.HTTP_500
            resp.body = json.dumps({"error": "Internal server error"})

    def on_get(self, req, resp):
        try:
            logging.info(f"Received GET request from {req.remote_addr}")
            limit = req.get_param_as_int('limit') or 10
            offset = req.get_param_as_int('offset') or 0
            
            self.cursor.execute("SELECT * FROM messages ORDER BY timestamp DESC LIMIT ? OFFSET ?", (limit, offset))
            messages = self.cursor.fetchall()
            
            response = []
            for message in messages:
                response.append({
                    "id": message[0],
                    "sender": message[1],
                    "content": message[2],
                    "timestamp": message[3]
                })
            
            resp.status = falcon.HTTP_200
            resp.body = json.dumps({"messages": response})
        except Exception as e:
            logging.error(f"Error in GET request: {e}")
            resp.status = falcon.HTTP_500
            resp.body = json.dumps({"error": "Internal server error"})

    def on_delete(self, req, resp):
        try:
            message_id = req.get_param_as_int('id')
            if not message_id:
                resp.status = falcon.HTTP_400
                resp.body = json.dumps({"error": "Missing message ID"})
                return
            
            self.cursor.execute("DELETE FROM messages WHERE id = ?", (message_id,))
            if self.cursor.rowcount == 0:
                resp.status = falcon.HTTP_404
                resp.body = json.dumps({"error": "Message not found"})
            else:
                self.conn.commit()
                resp.status = falcon.HTTP_200
                resp.body = json.dumps({"message": "Message deleted successfully"})
        except Exception as e:
            logging.error(f"Error in DELETE request: {e}")
            resp.status = falcon.HTTP_500
            resp.body = json.dumps({"error": "Internal server error"})

    def validate_sender(self, sender):
        return sender.isalnum() and len(sender) <= 50

    def __del__(self):
        self.conn.close()

class HealthCheckResource:
    def on_get(self, req, resp):
        resp.status = falcon.HTTP_200
        resp.body = json.dumps({"status": "healthy"})

app = falcon.App()
message_resource = MessageResource()
health_check_resource = HealthCheckResource()
app.add_route('/message', message_resource)
app.add_route('/health', health_check_resource)

def run_server(host, port):
    httpd = simple_server.make_server(host, port, app)
    print(f"Serving on {host}:{port}")
    httpd.serve_forever()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Message API Server")
    parser.add_argument('--host', default='127.0.0.1', help='Host to bind to')
    parser.add_argument('--port', type=int, default=8000, help='Port to bind to')
    args = parser.parse_args()

    run_server(args.host, args.port)