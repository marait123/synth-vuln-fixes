import xml.etree.ElementTree as ET
from bottle import route, run, request, response
import sqlite3
import logging
import os
import argparse
from datetime import datetime

# Set up logging
logging.basicConfig(filename='app.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Database setup
DB_NAME = 'xml_data.db'

def init_db():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS xml_entries
                 (id INTEGER PRIMARY KEY, tag TEXT, content TEXT, timestamp DATETIME)''')
    conn.commit()
    conn.close()

init_db()

class XMLProcessingError(Exception):
    pass

def validate_xml(xml_string):
    try:
        tree = ET.fromstring(xml_string)
        return True
    except ET.ParseError:
        return False

def process_xml(xml_string):
    tree = ET.fromstring(xml_string)
    return tree.tag, ET.tostring(tree, encoding='unicode')

def store_xml(tag, content):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    timestamp = datetime.now().isoformat()
    c.execute("INSERT INTO xml_entries (tag, content, timestamp) VALUES (?, ?, ?)", (tag, content, timestamp))
    conn.commit()
    conn.close()

def get_all_xml_entries():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT id, tag, timestamp FROM xml_entries")
    results = c.fetchall()
    conn.close()
    return results

def delete_xml_entry(id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("DELETE FROM xml_entries WHERE id = ?", (id,))
    deleted = c.rowcount > 0
    conn.commit()
    conn.close()
    return deleted

@route('/upload/xml', method='POST')
def upload_xml():
    try:
        xml_data = request.body.read().decode('utf-8')
        if not validate_xml(xml_data):
            response.status = 400
            return "Invalid XML data"
        
        tree = ET.parse(xml_data)  # Vulnerable line
        root = tree.getroot()
        
        tag, content = process_xml(xml_data)
        store_xml(tag, content)
        
        logging.info(f"XML processed and stored: {tag}")
        return f"XML processed and stored: {tag}"
    except Exception as e:
        logging.error(f"Error processing XML: {str(e)}")
        response.status = 500
        return f"Error processing XML: {str(e)}"

@route('/get/xml/<id:int>', method='GET')
def get_xml(id):
    try:
        conn = sqlite3.connect(DB_NAME)
        c = conn.cursor()
        c.execute("SELECT tag, content, timestamp FROM xml_entries WHERE id = ?", (id,))
        result = c.fetchone()
        conn.close()
        
        if result:
            tag, content, timestamp = result
            return f"XML entry {id}: Tag: {tag}, Content: {content}, Timestamp: {timestamp}"
        else:
            response.status = 404
            return f"No XML entry found with id {id}"
    except Exception as e:
        logging.error(f"Error retrieving XML: {str(e)}")
        response.status = 500
        return f"Error retrieving XML: {str(e)}"

@route('/list/xml', method='GET')
def list_xml():
    try:
        entries = get_all_xml_entries()
        return {'entries': [{'id': e[0], 'tag': e[1], 'timestamp': e[2]} for e in entries]}
    except Exception as e:
        logging.error(f"Error listing XML entries: {str(e)}")
        response.status = 500
        return f"Error listing XML entries: {str(e)}"

@route('/delete/xml/<id:int>', method='DELETE')
def delete_xml(id):
    try:
        if delete_xml_entry(id):
            logging.info(f"XML entry {id} deleted")
            return f"XML entry {id} deleted successfully"
        else:
            response.status = 404
            return f"No XML entry found with id {id}"
    except Exception as e:
        logging.error(f"Error deleting XML entry: {str(e)}")
        response.status = 500
        return f"Error deleting XML entry: {str(e)}"

def run_server(host, port):
    run(host=host, port=port, debug=True)

def main():
    parser = argparse.ArgumentParser(description="XML Processing Server")
    parser.add_argument('--host', default='localhost', help='Server host')
    parser.add_argument('--port', type=int, default=8080, help='Server port')
    args = parser.parse_args()

    logging.info(f"Starting server on {args.host}:{args.port}")
    run_server(args.host, args.port)

if __name__ == "__main__":
    main()

# Test cases
def test_xml_processing():
    valid_xml = "<root><child>Test</child></root>"
    invalid_xml = "<root><child>Test</child>"
    
    assert validate_xml(valid_xml) == True
    assert validate_xml(invalid_xml) == False
    
    tag, content = process_xml(valid_xml)
    assert tag == "root"
    assert "<child>Test</child>" in content
    
    try:
        process_xml(invalid_xml)
    except ET.ParseError:
        pass
    else:
        assert False, "Invalid XML should raise ParseError"

    print("All test cases passed!")

# Uncomment to run tests
# test_xml_processing()