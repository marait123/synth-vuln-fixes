from flask import Flask, request, jsonify, g
import xml.etree.ElementTree as ET
import sqlite3
import os
import logging
from werkzeug.exceptions import BadRequest, NotFound

app = Flask(__name__)
DATABASE = 'catalog.db'
logging.basicConfig(level=logging.INFO)

def get_db():
    if 'db' not in g:
        g.db = sqlite3.connect(DATABASE)
        g.db.row_factory = sqlite3.Row
    return g.db

@app.teardown_appcontext
def close_db(error):
    if hasattr(g, 'db'):
        g.db.close()

def init_db():
    with app.app_context():
        db = get_db()
        with app.open_resource('schema.sql', mode='r') as f:
            db.cursor().executescript(f.read())
        db.commit()

@app.route('/import_catalog', methods=['POST'])
def import_catalog():
    try:
        if 'file' not in request.files:
            raise BadRequest("No file part in the request")
        file = request.files['file']
        if file.filename == '':
            raise BadRequest("No file selected")
        
        xml_data = file.read()
        catalog = ET.parse(xml_data)
        root = catalog.getroot()

        db = get_db()
        cursor = db.cursor()

        for product in root.findall('product'):
            name = product.find('name').text
            price = float(product.find('price').text)
            description = product.find('description').text

            cursor.execute('''
                INSERT INTO products (name, price, description)
                VALUES (?, ?, ?)
            ''', (name, price, description))

        db.commit()
        logging.info("Catalog imported successfully")
        return jsonify({"message": "Catalog imported successfully"}), 201
    except ET.ParseError:
        logging.error("Invalid XML data")
        return jsonify({"error": "Invalid XML data"}), 400
    except Exception as e:
        logging.error(f"Error importing catalog: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500

@app.route('/products', methods=['GET'])
def get_products():
    try:
        db = get_db()
        cursor = db.cursor()
        cursor.execute('SELECT * FROM products')
        products = cursor.fetchall()
        return jsonify([dict(product) for product in products])
    except Exception as e:
        logging.error(f"Error fetching products: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500

@app.route('/product/<int:product_id>', methods=['GET'])
def get_product(product_id):
    try:
        db = get_db()
        cursor = db.cursor()
        cursor.execute('SELECT * FROM products WHERE id = ?', (product_id,))
        product = cursor.fetchone()
        if product:
            return jsonify(dict(product))
        else:
            raise NotFound("Product not found")
    except NotFound:
        return jsonify({"error": "Product not found"}), 404
    except Exception as e:
        logging.error(f"Error fetching product: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500

@app.route('/product', methods=['POST'])
def create_product():
    try:
        data = request.json
        if not all(key in data for key in ('name', 'price', 'description')):
            raise BadRequest("Missing required fields")

        db = get_db()
        cursor = db.cursor()
        cursor.execute('''
            INSERT INTO products (name, price, description)
            VALUES (?, ?, ?)
        ''', (data['name'], data['price'], data['description']))
        db.commit()
        
        new_id = cursor.lastrowid
        logging.info(f"Product created with ID: {new_id}")
        return jsonify({"id": new_id, "message": "Product created successfully"}), 201
    except BadRequest as e:
        return jsonify({"error": str(e)}), 400
    except Exception as e:
        logging.error(f"Error creating product: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500

@app.route('/product/<int:product_id>', methods=['PUT'])
def update_product(product_id):
    try:
        data = request.json
        if not any(key in data for key in ('name', 'price', 'description')):
            raise BadRequest("No fields to update")

        db = get_db()
        cursor = db.cursor()
        
        update_fields = []
        params = []
        for key in ('name', 'price', 'description'):
            if key in data:
                update_fields.append(f"{key} = ?")
                params.append(data[key])
        
        params.append(product_id)
        
        query = f"UPDATE products SET {', '.join(update_fields)} WHERE id = ?"
        cursor.execute(query, params)
        db.commit()
        
        if cursor.rowcount == 0:
            raise NotFound("Product not found")
        
        logging.info(f"Product updated: {product_id}")
        return jsonify({"message": "Product updated successfully"})
    except BadRequest as e:
        return jsonify({"error": str(e)}), 400
    except NotFound:
        return jsonify({"error": "Product not found"}), 404
    except Exception as e:
        logging.error(f"Error updating product: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500

@app.route('/product/<int:product_id>', methods=['DELETE'])
def delete_product(product_id):
    try:
        db = get_db()
        cursor = db.cursor()
        cursor.execute('DELETE FROM products WHERE id = ?', (product_id,))
        db.commit()
        
        if cursor.rowcount == 0:
            raise NotFound("Product not found")
        
        logging.info(f"Product deleted: {product_id}")
        return jsonify({"message": "Product deleted successfully"})
    except NotFound:
        return jsonify({"error": "Product not found"}), 404
    except Exception as e:
        logging.error(f"Error deleting product: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500

def test_api():
    with app.test_client() as client:
        # Test create product
        response = client.post('/product', json={"name": "Test Product", "price": 9.99, "description": "A test product"})
        assert response.status_code == 201
        product_id = response.json['id']

        # Test get product
        response = client.get(f'/product/{product_id}')
        assert response.status_code == 200
        assert response.json['name'] == "Test Product"

        # Test update product
        response = client.put(f'/product/{product_id}', json={"price": 19.99})
        assert response.status_code == 200

        # Test delete product
        response = client.delete(f'/product/{product_id}')
        assert response.status_code == 200

        print("All tests passed!")

if __name__ == '__main__':
    if not os.path.exists(DATABASE):
        init_db()
    test_api()
    app.run(debug=True)