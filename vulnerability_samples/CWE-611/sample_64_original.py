import xml.etree.ElementTree as ET
from django.http import HttpResponse, HttpResponseBadRequest
from django.views import View
from django.contrib.auth.models import User
from django.core.exceptions import ValidationError
from django.core.validators import validate_email
import logging
import json
import re

logger = logging.getLogger(__name__)

class UserProfile:
    def __init__(self, user):
        self.user = user

    def update_from_xml(self, xml_data):
        try:
            root = ET.fromstring(xml_data)
            self.user.first_name = self.sanitize_input(root.find('first_name').text)
            self.user.last_name = self.sanitize_input(root.find('last_name').text)
            email = root.find('email').text
            self.validate_email(email)
            self.user.email = email
            self.user.save()
            logger.info(f"Profile updated for user {self.user.id}")
            return True
        except ET.ParseError as e:
            logger.error(f"XML parsing error: {e}")
            return False
        except AttributeError as e:
            logger.error(f"Missing required field in XML: {e}")
            return False
        except ValidationError as e:
            logger.error(f"Invalid email: {e}")
            return False

    def sanitize_input(self, input_str):
        return re.sub(r'[<>&\'"]+', '', input_str)

    def validate_email(self, email):
        validate_email(email)

    def to_dict(self):
        return {
            'id': self.user.id,
            'first_name': self.user.first_name,
            'last_name': self.user.last_name,
            'email': self.user.email,
        }

def generate_test_xml(first_name, last_name, email):
    return f"""
    <profile>
        <first_name>{first_name}</first_name>
        <last_name>{last_name}</last_name>
        <email>{email}</email>
    </profile>
    """

class UpdateProfileView(View):
    def post(self, request):
        xml_data = request.body
        try:
            profile = ET.parse(xml_data)
            user = User.objects.get(id=request.user.id)
            user_profile = UserProfile(user)
            if user_profile.update_from_xml(xml_data):
                return HttpResponse("Profile updated successfully")
            else:
                return HttpResponseBadRequest("Failed to update profile")
        except ET.ParseError as e:
            logger.error(f"XML parsing error: {e}")
            return HttpResponseBadRequest("Invalid XML data")
        except User.DoesNotExist:
            logger.error(f"User not found: {request.user.id}")
            return HttpResponseBadRequest("User not found")
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            return HttpResponseBadRequest("An unexpected error occurred")

    def get(self, request):
        try:
            user = User.objects.get(id=request.user.id)
            user_profile = UserProfile(user)
            return HttpResponse(json.dumps(user_profile.to_dict()), content_type='application/json')
        except User.DoesNotExist:
            logger.error(f"User not found: {request.user.id}")
            return HttpResponseBadRequest("User not found")
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            return HttpResponseBadRequest("An unexpected error occurred")

class DeleteProfileView(View):
    def post(self, request):
        try:
            user = User.objects.get(id=request.user.id)
            user.delete()
            logger.info(f"User {request.user.id} deleted")
            return HttpResponse("Profile deleted successfully")
        except User.DoesNotExist:
            logger.error(f"User not found: {request.user.id}")
            return HttpResponseBadRequest("User not found")
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            return HttpResponseBadRequest("An unexpected error occurred")

def run_tests():
    # Test case 1: Valid XML
    test_xml = generate_test_xml("John", "Doe", "john.doe@example.com")
    view = UpdateProfileView()
    response = view.post(request=type('Request', (), {'body': test_xml, 'user': type('User', (), {'id': 1})})())
    print("Test case 1:", response.content)

    # Test case 2: Invalid XML
    invalid_xml = "<invalid>xml</invalid>"
    response = view.post(request=type('Request', (), {'body': invalid_xml, 'user': type('User', (), {'id': 1})})())
    print("Test case 2:", response.content)

    # Test case 3: Missing field
    incomplete_xml = "<profile><first_name>John</first_name></profile>"
    response = view.post(request=type('Request', (), {'body': incomplete_xml, 'user': type('User', (), {'id': 1})})())
    print("Test case 3:", response.content)

    # Test case 4: Invalid email
    invalid_email_xml = generate_test_xml("John", "Doe", "invalid-email")
    response = view.post(request=type('Request', (), {'body': invalid_email_xml, 'user': type('User', (), {'id': 1})})())
    print("Test case 4:", response.content)

if __name__ == "__main__":
    run_tests()