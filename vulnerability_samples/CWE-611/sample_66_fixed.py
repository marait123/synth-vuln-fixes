from pyramid.view import view_config
from pyramid.response import Response
import defusedxml.ElementTree as ET
import json
from datetime import datetime

# In-memory storage for events
events_db = {}

def validate_event(event_details):
    required_fields = ['name', 'date', 'location', 'organizer']
    for field in required_fields:
        if field not in event_details:
            return False
    try:
        datetime.strptime(event_details['date'], '%Y-%m-%d')
    except ValueError:
        return False
    return True

def store_event(event_id, event_details):
    events_db[event_id] = event_details

def get_event(event_id):
    return events_db.get(event_id)

@view_config(route_name='register_event', request_method='POST')
def register_event(request):
    try:
        xml_data = request.body
        event_details = ET.fromstring(xml_data)  # Fixed line
        event_dict = {child.tag: child.text for child in event_details}
        
        if not validate_event(event_dict):
            return Response('Invalid event details', status=400)
        
        event_id = str(len(events_db) + 1)
        store_event(event_id, event_dict)
        
        return Response(f'Event registered successfully. Event ID: {event_id}', status=201)
    except ET.ParseError:
        return Response('Invalid XML data', status=400)
    except Exception as e:
        return Response(f'Error: {str(e)}', status=500)

@view_config(route_name='get_event', request_method='GET')
def retrieve_event(request):
    event_id = request.matchdict.get('id')
    event = get_event(event_id)
    if event:
        return Response(json.dumps(event), content_type='application/json')
    else:
        return Response('Event not found', status=404)

@view_config(route_name='list_events', request_method='GET')
def list_events(request):
    return Response(json.dumps(list(events_db.keys())), content_type='application/json')