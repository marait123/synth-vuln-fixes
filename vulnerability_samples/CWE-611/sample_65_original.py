import cherrypy
import xml.etree.ElementTree as ET
import json
import logging
import os
from datetime import datetime

# Configure logging
logging.basicConfig(filename='inventory_manager.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

class CustomException(Exception):
    pass

class InventoryManager:
    def __init__(self):
        self.inventory = {}
        self.load_inventory()

    def load_inventory(self):
        try:
            with open('inventory.json', 'r') as f:
                self.inventory = json.load(f)
            logging.info("Inventory loaded successfully")
        except FileNotFoundError:
            logging.warning("Inventory file not found. Starting with empty inventory.")
        except json.JSONDecodeError:
            logging.error("Invalid JSON in inventory file. Starting with empty inventory.")

    def save_inventory(self):
        with open('inventory.json', 'w') as f:
            json.dump(self.inventory, f)
        logging.info("Inventory saved successfully")

    @cherrypy.expose
    def index(self):
        return """
        <html>
            <head><title>Inventory Manager</title></head>
            <body>
                <h1>Welcome to Inventory Manager</h1>
                <p>Use the following endpoints:</p>
                <ul>
                    <li>/update_inventory - POST XML data to update inventory</li>
                    <li>/add_item - POST to add a new item</li>
                    <li>/remove_item - POST to remove an item</li>
                    <li>/list_inventory - GET to list all items</li>
                    <li>/get_item - GET to retrieve a specific item</li>
                    <li>/update_quantity - POST to update item quantity</li>
                </ul>
            </body>
        </html>
        """

    @cherrypy.expose
    @cherrypy.tools.accept(media='application/xml')
    def update_inventory(self):
        try:
            xml_data = cherrypy.request.body.read()
            inventory = ET.fromstring(xml_data)  # Vulnerable line
            for item in inventory.findall('item'):
                item_id = item.get('id')
                name = item.find('name').text
                quantity = int(item.find('quantity').text)
                self.inventory[item_id] = {'name': name, 'quantity': quantity}
            self.save_inventory()
            logging.info(f"Inventory updated with XML data")
            return "Inventory updated successfully"
        except ET.ParseError as e:
            logging.error(f"XML parsing error: {str(e)}")
            raise cherrypy.HTTPError(400, f"Invalid XML data: {str(e)}")
        except Exception as e:
            logging.error(f"Error updating inventory: {str(e)}")
            raise cherrypy.HTTPError(500, f"Error updating inventory: {str(e)}")

    @cherrypy.expose
    @cherrypy.tools.json_in()
    def add_item(self):
        try:
            data = cherrypy.request.json
            item_id = data['item_id']
            name = data['name']
            quantity = int(data['quantity'])
            if item_id in self.inventory:
                raise CustomException("Item ID already exists")
            self.inventory[item_id] = {'name': name, 'quantity': quantity}
            self.save_inventory()
            logging.info(f"Item {item_id} added successfully")
            return f"Item {item_id} added successfully"
        except KeyError as e:
            logging.error(f"Missing required field: {str(e)}")
            raise cherrypy.HTTPError(400, f"Missing required field: {str(e)}")
        except ValueError:
            logging.error("Invalid quantity. Please enter a number.")
            raise cherrypy.HTTPError(400, "Invalid quantity. Please enter a number.")
        except CustomException as e:
            logging.error(str(e))
            raise cherrypy.HTTPError(409, str(e))

    @cherrypy.expose
    def remove_item(self, item_id):
        if item_id in self.inventory:
            del self.inventory[item_id]
            self.save_inventory()
            logging.info(f"Item {item_id} removed successfully")
            return f"Item {item_id} removed successfully"
        else:
            logging.warning(f"Item {item_id} not found in inventory")
            raise cherrypy.HTTPError(404, f"Item {item_id} not found in inventory")

    @cherrypy.expose
    @cherrypy.tools.json_out()
    def list_inventory(self):
        return self.inventory

    @cherrypy.expose
    @cherrypy.tools.json_out()
    def get_item(self, item_id):
        if item_id in self.inventory:
            return self.inventory[item_id]
        else:
            logging.warning(f"Item {item_id} not found in inventory")
            raise cherrypy.HTTPError(404, f"Item {item_id} not found in inventory")

    @cherrypy.expose
    @cherrypy.tools.json_in()
    def update_quantity(self):
        try:
            data = cherrypy.request.json
            item_id = data['item_id']
            quantity = int(data['quantity'])
            if item_id in self.inventory:
                self.inventory[item_id]['quantity'] = quantity
                self.save_inventory()
                logging.info(f"Quantity updated for item {item_id}")
                return f"Quantity updated for item {item_id}"
            else:
                logging.warning(f"Item {item_id} not found in inventory")
                raise cherrypy.HTTPError(404, f"Item {item_id} not found in inventory")
        except KeyError as e:
            logging.error(f"Missing required field: {str(e)}")
            raise cherrypy.HTTPError(400, f"Missing required field: {str(e)}")
        except ValueError:
            logging.error("Invalid quantity. Please enter a number.")
            raise cherrypy.HTTPError(400, "Invalid quantity. Please enter a number.")

def validate_config():
    if not os.path.exists('inventory.json'):
        with open('inventory.json', 'w') as f:
            json.dump({}, f)
        logging.info("Created empty inventory.json file")

if __name__ == '__main__':
    validate_config()
    cherrypy.config.update({'server.socket_host': '0.0.0.0', 'server.socket_port': 8080})
    cherrypy.quickstart(InventoryManager())