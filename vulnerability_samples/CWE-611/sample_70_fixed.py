from starlette.applications import Starlette
from starlette.responses import JSONResponse
from starlette.routing import Route
from defusedxml.ElementTree import parse
import uvicorn
import logging
import io
from typing import Dict, Any

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Config:
    def __init__(self, data: Dict[str, Any]):
        self.data = data

def validate_xml_structure(root: ET.Element) -> bool:
    required_elements = ['name', 'version', 'description']
    return all(root.find(elem) is not None for elem in required_elements)

def process_xml_data(root: ET.Element) -> Dict[str, Any]:
    return {
        'name': root.find('name').text,
        'version': root.find('version').text,
        'description': root.find('description').text,
        'options': [option.text for option in root.findall('options/option')]
    }

async def config_handler(request):
    try:
        form = await request.form()
        xml_file = form['config_file']
        tree = parse(io.BytesIO(xml_file.file.read()))  # Fixed line
        root = tree.getroot()

        if not validate_xml_structure(root):
            return JSONResponse({'status': 'Error: Invalid XML structure'}, status_code=400)

        config_data = process_xml_data(root)
        config = Config(config_data)

        logger.info(f"Config processed: {config.data['name']}")
        return JSONResponse({'status': 'Config processed successfully', 'data': config.data})
    except Exception as e:
        logger.error(f"Error processing config: {str(e)}")
        return JSONResponse({'status': 'Error processing config'}, status_code=500)

app = Starlette(routes=[Route('/config', config_handler, methods=['POST'])])

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)