import defusedxml.ElementTree as ET
import logging
import os
from typing import List, Dict

def read_config_files(config_files: List[str]) -> Dict[str, ET.Element]:
    configs = {}
    for config_file in config_files:
        if not os.path.exists(config_file):
            logging.warning(f"Configuration file not found: {config_file}")
            continue
        tree = ET.parse(config_file)  # Fixed line
        root = tree.getroot()
        configs[config_file] = root
    return configs

def setup_logging_from_config(config: ET.Element) -> None:
    log_config = config.find('logging')
    if log_config is not None:
        log_level = getattr(logging, log_config.find('level').text.upper(), logging.INFO)
        log_file = log_config.find('file').text
        logging.basicConfig(filename=log_file, level=log_level, 
                            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    else:
        logging.basicConfig(level=logging.INFO, 
                            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

def apply_app_config(config: ET.Element) -> Dict[str, str]:
    app_config = {}
    app_settings = config.find('app_settings')
    if app_settings is not None:
        for setting in app_settings:
            app_config[setting.tag] = setting.text
    return app_config

def process_configs(config_files: List[str]) -> None:
    configs = read_config_files(config_files)
    for config_file, config in configs.items():
        logging.info(f"Processing configuration from {config_file}")
        setup_logging_from_config(config)
        app_config = apply_app_config(config)
        logging.info(f"Application configuration: {app_config}")

def main():
    config_files = ['config1.xml', 'config2.xml', 'config3.xml']
    try:
        process_configs(config_files)
    except Exception as e:
        logging.error(f"An error occurred: {str(e)}")

if __name__ == "__main__":
    main()