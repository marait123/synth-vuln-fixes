import ast
from http.server import BaseHTTPRequestHandler, HTTPServer
import urllib.parse
import hashlib
import logging

logging.basicConfig(filename='server.log', level=logging.INFO)

users = {"admin": "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918"}  # password: admin

class RequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        parsed_path = urllib.parse.urlparse(self.path)
        params = urllib.parse.parse_qs(parsed_path.query)
        
        if parsed_path.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(self.render_html().encode())
        elif parsed_path.path == '/calculate':
            operation = params.get('operation', [''])[0]
            a = params.get('a', [''])[0]
            b = params.get('b', [''])[0]
            result = self.calculate(operation, a, b)
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(str(result).encode())
        elif parsed_path.path == '/execute':
            command = params.get('command', [''])[0]
            if self.authenticate(params):
                result = self.safe_execute(command)
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(result.encode())
            else:
                self.send_error(403, "Authentication failed")
        else:
            self.send_error(404, "Not Found")
        
        logging.info(f"Request: {self.path}")

    def calculate(self, operation, a, b):
        try:
            a, b = float(a), float(b)
            if operation == 'add':
                return a + b
            elif operation == 'subtract':
                return a - b
            elif operation == 'multiply':
                return a * b
            elif operation == 'divide':
                return a / b
            else:
                return "Invalid operation"
        except ValueError:
            return "Invalid input"
        except ZeroDivisionError:
            return "Cannot divide by zero"

    def authenticate(self, params):
        username = params.get('username', [''])[0]
        password = params.get('password', [''])[0]
        if username in users and users[username] == hashlib.sha256(password.encode()).hexdigest():
            return True
        return False

    def safe_execute(self, command):
        try:
            tree = ast.parse(command)
            for node in ast.walk(tree):
                if not isinstance(node, (ast.expr, ast.Expression)):
                    return "Error: Only expressions are allowed"
            result = eval(command, {"__builtins__": {}})
            return str(result)
        except Exception as e:
            return f"Error: {str(e)}"

    def render_html(self):
        return """
        <html>
        <body>
            <h1>Simple Calculator</h1>
            <form action="/calculate">
                <input type="number" name="a">
                <select name="operation">
                    <option value="add">+</option>
                    <option value="subtract">-</option>
                    <option value="multiply">*</option>
                    <option value="divide">/</option>
                </select>
                <input type="number" name="b">
                <input type="submit" value="Calculate">
            </form>
            <h2>Execute Expression (Admin only)</h2>
            <form action="/execute">
                <input type="text" name="username" placeholder="Username">
                <input type="password" name="password" placeholder="Password">
                <input type="text" name="command" placeholder="Python expression">
                <input type="submit" value="Execute">
            </form>
        </body>
        </html>
        """

def run(server_class=HTTPServer, handler_class=RequestHandler, port=8000):
    server_address = ('', port)
    httpd = server_class(server_address, handler_class)
    print(f"Server running on port {port}")
    httpd.serve_forever()

if __name__ == '__main__':
    run()