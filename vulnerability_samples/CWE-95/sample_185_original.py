import code
from http.server import BaseHTTPRequestHandler, HTTPServer
import urllib.parse
import hashlib
import logging
import json
import os
import sys
import threading
import time

logging.basicConfig(filename='server.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

users = {"admin": "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918"}  # password: admin

class CustomException(Exception):
    pass

class RequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        try:
            parsed_path = urllib.parse.urlparse(self.path)
            params = urllib.parse.parse_qs(parsed_path.query)
            
            if parsed_path.path == '/':
                self.send_response(200)
                self.send_header('Content-type', 'text/html')
                self.end_headers()
                self.wfile.write(self.render_html().encode())
            elif parsed_path.path == '/calculate':
                operation = params.get('operation', [''])[0]
                a = params.get('a', [''])[0]
                b = params.get('b', [''])[0]
                result = self.calculate(operation, a, b)
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(str(result).encode())
            elif parsed_path.path == '/execute':
                command = params.get('command', [''])[0]
                if self.authenticate(params):
                    result = self.execute_command(command)
                    self.send_response(200)
                    self.send_header('Content-type', 'text/plain')
                    self.end_headers()
                    self.wfile.write(result.encode())
                else:
                    self.send_error(403, "Authentication failed")
            elif parsed_path.path == '/users':
                if self.authenticate(params):
                    self.handle_users(params)
                else:
                    self.send_error(403, "Authentication failed")
            else:
                self.send_error(404, "Not Found")
            
            logging.info(f"Request: {self.path}")
        except CustomException as e:
            self.send_error(400, str(e))
        except Exception as e:
            logging.error(f"Unexpected error: {str(e)}")
            self.send_error(500, "Internal Server Error")

    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)
        params = urllib.parse.parse_qs(post_data.decode())
        
        if self.path == '/users':
            if self.authenticate(params):
                self.handle_users(params)
            else:
                self.send_error(403, "Authentication failed")
        else:
            self.send_error(404, "Not Found")

    def calculate(self, operation, a, b):
        try:
            a, b = float(a), float(b)
            if operation == 'add':
                return a + b
            elif operation == 'subtract':
                return a - b
            elif operation == 'multiply':
                return a * b
            elif operation == 'divide':
                if b == 0:
                    raise CustomException("Cannot divide by zero")
                return a / b
            else:
                raise CustomException("Invalid operation")
        except ValueError:
            raise CustomException("Invalid input")

    def authenticate(self, params):
        username = params.get('username', [''])[0]
        password = params.get('password', [''])[0]
        if username in users and users[username] == hashlib.sha256(password.encode()).hexdigest():
            return True
        return False

    def execute_command(self, command):
        console = code.InteractiveInterpreter()
        old_stdout = sys.stdout
        redirected_output = sys.stdout = StringIO()
        console.runsource(command)
        sys.stdout = old_stdout
        return redirected_output.getvalue()

    def handle_users(self, params):
        action = params.get('action', [''])[0]
        username = params.get('username', [''])[0]
        password = params.get('password', [''])[0]
        
        if action == 'create':
            if username in users:
                raise CustomException("User already exists")
            users[username] = hashlib.sha256(password.encode()).hexdigest()
            self.send_response(201)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"User created")
        elif action == 'read':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps(list(users.keys())).encode())
        elif action == 'update':
            if username not in users:
                raise CustomException("User not found")
            users[username] = hashlib.sha256(password.encode()).hexdigest()
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"User updated")
        elif action == 'delete':
            if username not in users:
                raise CustomException("User not found")
            del users[username]
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"User deleted")
        else:
            raise CustomException("Invalid action")

    def render_html(self):
        return """
        <html>
        <body>
            <h1>Simple Calculator</h1>
            <form action="/calculate">
                <input type="number" name="a">
                <select name="operation">
                    <option value="add">+</option>
                    <option value="subtract">-</option>
                    <option value="multiply">*</option>
                    <option value="divide">/</option>
                </select>
                <input type="number" name="b">
                <input type="submit" value="Calculate">
            </form>
            <h2>Execute Command (Admin only)</h2>
            <form action="/execute">
                <input type="text" name="username" placeholder="Username">
                <input type="password" name="password" placeholder="Password">
                <input type="text" name="command" placeholder="Python command">
                <input type="submit" value="Execute">
            </form>
            <h2>User Management (Admin only)</h2>
            <form action="/users" method="post">
                <input type="text" name="username" placeholder="Username">
                <input type="password" name="password" placeholder="Password">
                <select name="action">
                    <option value="create">Create</option>
                    <option value="read">Read</option>
                    <option value="update">Update</option>
                    <option value="delete">Delete</option>
                </select>
                <input type="submit" value="Manage Users">
            </form>
        </body>
        </html>
        """

def run(server_class=HTTPServer, handler_class=RequestHandler, port=8000):
    server_address = ('', port)
    httpd = server_class(server_address, handler_class)
    print(f"Server running on port {port}")
    httpd.serve_forever()

def periodic_task():
    while True:
        logging.info("Performing periodic task")
        time.sleep(60)

if __name__ == '__main__':
    task_thread = threading.Thread(target=periodic_task)
    task_thread.daemon = True
    task_thread.start()
    run()