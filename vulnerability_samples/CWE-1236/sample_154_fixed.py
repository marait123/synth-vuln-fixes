import defusedcsv
import io
import sqlite3
from flask import Flask, request, send_file, session, redirect, url_for, render_template_string
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
app.secret_key = 'your_secret_key_here'

def get_db():
    db = sqlite3.connect('reports.db')
    db.row_factory = sqlite3.Row
    return db

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        db = get_db()
        user = db.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()
        if user and check_password_hash(user['password'], password):
            session['user_id'] = user['id']
            return redirect(url_for('dashboard'))
    return render_template_string('''
        <form method="post">
            Username: <input type="text" name="username"><br>
            Password: <input type="password" name="password"><br>
            <input type="submit" value="Login">
        </form>
    ''')

@app.route('/dashboard')
def dashboard():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    db = get_db()
    reports = db.execute('SELECT * FROM reports WHERE user_id = ?', (session['user_id'],)).fetchall()
    return render_template_string('''
        <h1>Dashboard</h1>
        <a href="{{ url_for('create_report') }}">Create New Report</a><br>
        <h2>Your Reports:</h2>
        <ul>
        {% for report in reports %}
            <li><a href="{{ url_for('download_report', report_id=report['id']) }}">{{ report['title'] }}</a></li>
        {% endfor %}
        </ul>
    ''', reports=reports)

@app.route('/create_report', methods=['GET', 'POST'])
def create_report():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    if request.method == 'POST':
        title = request.form['title']
        data = request.form['data'].split('\n')
        db = get_db()
        db.execute('INSERT INTO reports (user_id, title) VALUES (?, ?)', (session['user_id'], title))
        db.commit()
        return redirect(url_for('dashboard'))
    return render_template_string('''
        <form method="post">
            Title: <input type="text" name="title"><br>
            Data (one item per line): <br>
            <textarea name="data" rows="10" cols="50"></textarea><br>
            <input type="submit" value="Create Report">
        </form>
    ''')

@app.route('/download_report/<int:report_id>')
def download_report(report_id):
    if 'user_id' not in session:
        return redirect(url_for('login'))
    db = get_db()
    report = db.execute('SELECT * FROM reports WHERE id = ? AND user_id = ?', (report_id, session['user_id'])).fetchone()
    if report:
        stream = io.StringIO()
        writer = defusedcsv.writer(stream)
        report_data = [['Item 1', 'Item 2', 'Item 3'], ['Data 1', 'Data 2', 'Data 3']]
        all_rows = [[report['title']] + [''] * (len(report_data[0]) - 1)] + report_data
        writer.writerows(all_rows)
        stream.seek(0)
        return send_file(
            stream,
            as_attachment=True,
            download_name=f"{report['title']}.csv",
            mimetype='text/csv'
        )
    return "Report not found", 404

if __name__ == '__main__':
    db = get_db()
    db.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, password TEXT)')
    db.execute('CREATE TABLE IF NOT EXISTS reports (id INTEGER PRIMARY KEY, user_id INTEGER, title TEXT)')
    db.commit()
    app.run(debug=True)