import csv
import flask
from flask import request, jsonify, session
import sqlite3
from werkzeug.security import generate_password_hash, check_password_hash
import logging
import os
from datetime import datetime

app = flask.Flask(__name__)
app.secret_key = 'your_secret_key'

# Configure logging
logging.basicConfig(filename='app.log', level=logging.INFO,
                    format='%(asctime)s:%(levelname)s:%(message)s')

def get_db_connection():
    try:
        conn = sqlite3.connect('database.db')
        conn.row_factory = sqlite3.Row
        return conn
    except sqlite3.Error as e:
        logging.error(f"Database connection error: {e}")
        raise

def init_db():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('''CREATE TABLE IF NOT EXISTS users
                   (id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username TEXT UNIQUE NOT NULL,
                    password TEXT NOT NULL,
                    email TEXT UNIQUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    conn.close()

@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    email = data.get('email')
    
    if not username or not password:
        return jsonify({"error": "Username and password are required"}), 400

    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("INSERT INTO users (username, password, email) VALUES (?, ?, ?)",
                    (username, generate_password_hash(password), email))
        conn.commit()
        logging.info(f"User registered: {username}")
        return jsonify({"message": "User registered successfully"}), 201
    except sqlite3.IntegrityError:
        return jsonify({"error": "Username or email already exists"}), 409
    except Exception as e:
        logging.error(f"Registration error: {e}")
        return jsonify({"error": "An error occurred during registration"}), 500
    finally:
        conn.close()

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    
    try:
        conn = get_db_connection()
        user = conn.execute("SELECT * FROM users WHERE username = ?", (username,)).fetchone()
        
        if user and check_password_hash(user['password'], password):
            session['user_id'] = user['id']
            logging.info(f"User logged in: {username}")
            return jsonify({"message": "Logged in successfully"}), 200
        else:
            return jsonify({"error": "Invalid username or password"}), 401
    except Exception as e:
        logging.error(f"Login error: {e}")
        return jsonify({"error": "An error occurred during login"}), 500
    finally:
        conn.close()

@app.route('/logout', methods=['POST'])
def logout():
    session.pop('user_id', None)
    return jsonify({"message": "Logged out successfully"}), 200

@app.route('/export_csv', methods=['POST'])
def export_csv():
    if 'user_id' not in session:
        return jsonify({"error": "Unauthorized"}), 401

    data = request.get_json()
    if not data:
        return jsonify({"error": "No data provided"}), 400

    try:
        filename = f"output_{datetime.now().strftime('%Y%m%d%H%M%S')}.csv"
        with open(filename, 'w', newline='') as file:
            writer = csv.writer(file)
            headers = data[0].keys()
            writer.writerow(headers)
            for item in data:
                writer.writerow(item.values())
        
        logging.info(f"CSV exported: {filename}")
        return jsonify({"message": "CSV exported successfully", "filename": filename})
    except Exception as e:
        logging.error(f"CSV export error: {e}")
        return jsonify({"error": "An error occurred during CSV export"}), 500

@app.route('/export_user_data', methods=['GET'])
def export_user_data():
    if 'user_id' not in session:
        return jsonify({"error": "Unauthorized"}), 401

    try:
        conn = get_db_connection()
        user_data = conn.execute("SELECT * FROM users WHERE id = ?", (session['user_id'],)).fetchone()
        
        if not user_data:
            return jsonify({"error": "User not found"}), 404

        filename = f"user_data_{session['user_id']}_{datetime.now().strftime('%Y%m%d%H%M%S')}.csv"
        with open(filename, 'w', newline='') as file:
            writer = csv.writer(file)
            headers = user_data.keys()
            writer.writerow(headers)
            writer.writerow(user_data)

        logging.info(f"User data exported: {filename}")
        return jsonify({"message": "User data exported successfully", "filename": filename})
    except Exception as e:
        logging.error(f"User data export error: {e}")
        return jsonify({"error": "An error occurred during user data export"}), 500
    finally:
        conn.close()

@app.route('/update_user', methods=['PUT'])
def update_user():
    if 'user_id' not in session:
        return jsonify({"error": "Unauthorized"}), 401

    data = request.get_json()
    new_email = data.get('email')
    new_password = data.get('password')

    try:
        conn = get_db_connection()
        cur = conn.cursor()
        if new_email:
            cur.execute("UPDATE users SET email = ? WHERE id = ?", (new_email, session['user_id']))
        if new_password:
            hashed_password = generate_password_hash(new_password)
            cur.execute("UPDATE users SET password = ? WHERE id = ?", (hashed_password, session['user_id']))
        conn.commit()
        logging.info(f"User updated: {session['user_id']}")
        return jsonify({"message": "User updated successfully"}), 200
    except Exception as e:
        logging.error(f"User update error: {e}")
        return jsonify({"error": "An error occurred during user update"}), 500
    finally:
        conn.close()

@app.route('/delete_user', methods=['DELETE'])
def delete_user():
    if 'user_id' not in session:
        return jsonify({"error": "Unauthorized"}), 401

    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("DELETE FROM users WHERE id = ?", (session['user_id'],))
        conn.commit()
        session.pop('user_id', None)
        logging.info(f"User deleted: {session['user_id']}")
        return jsonify({"message": "User deleted successfully"}), 200
    except Exception as e:
        logging.error(f"User deletion error: {e}")
        return jsonify({"error": "An error occurred during user deletion"}), 500
    finally:
        conn.close()

if __name__ == '__main__':
    init_db()
    app.run(debug=True)