import csv
import io
import sqlite3
import logging
from flask import Flask, request, send_file, session, redirect, url_for, render_template_string, jsonify
from werkzeug.security import generate_password_hash, check_password_hash
from functools import wraps

app = Flask(__name__)
app.secret_key = 'your_secret_key_here'
logging.basicConfig(level=logging.INFO)

class DatabaseError(Exception):
    pass

def get_db():
    try:
        db = sqlite3.connect('reports.db')
        db.row_factory = sqlite3.Row
        return db
    except sqlite3.Error as e:
        logging.error(f"Database connection error: {e}")
        raise DatabaseError("Unable to connect to the database")

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        try:
            db = get_db()
            user = db.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()
            if user and check_password_hash(user['password'], password):
                session['user_id'] = user['id']
                logging.info(f"User {username} logged in successfully")
                return redirect(url_for('dashboard'))
            logging.warning(f"Failed login attempt for user {username}")
        except DatabaseError as e:
            logging.error(f"Login error: {e}")
            return "Database error", 500
    return render_template_string('''
        <form method="post">
            Username: <input type="text" name="username"><br>
            Password: <input type="password" name="password"><br>
            <input type="submit" value="Login">
        </form>
    ''')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        try:
            db = get_db()
            existing_user = db.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()
            if existing_user:
                return "Username already exists", 400
            hashed_password = generate_password_hash(password)
            db.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, hashed_password))
            db.commit()
            logging.info(f"New user registered: {username}")
            return redirect(url_for('login'))
        except DatabaseError as e:
            logging.error(f"Registration error: {e}")
            return "Database error", 500
    return render_template_string('''
        <form method="post">
            Username: <input type="text" name="username"><br>
            Password: <input type="password" name="password"><br>
            <input type="submit" value="Register">
        </form>
    ''')

@app.route('/dashboard')
@login_required
def dashboard():
    try:
        db = get_db()
        reports = db.execute('SELECT * FROM reports WHERE user_id = ?', (session['user_id'],)).fetchall()
        return render_template_string('''
            <h1>Dashboard</h1>
            <a href="{{ url_for('create_report') }}">Create New Report</a><br>
            <h2>Your Reports:</h2>
            <ul>
            {% for report in reports %}
                <li><a href="{{ url_for('download_report', report_id=report['id']) }}">{{ report['title'] }}</a></li>
            {% endfor %}
            </ul>
            <a href="{{ url_for('logout') }}">Logout</a>
        ''', reports=reports)
    except DatabaseError as e:
        logging.error(f"Dashboard error: {e}")
        return "Database error", 500

@app.route('/create_report', methods=['GET', 'POST'])
@login_required
def create_report():
    if request.method == 'POST':
        title = request.form['title']
        data = request.form['data'].split('\n')
        try:
            db = get_db()
            db.execute('INSERT INTO reports (user_id, title) VALUES (?, ?)', (session['user_id'], title))
            db.commit()
            logging.info(f"New report created: {title}")
            return redirect(url_for('dashboard'))
        except DatabaseError as e:
            logging.error(f"Create report error: {e}")
            return "Database error", 500
    return render_template_string('''
        <form method="post">
            Title: <input type="text" name="title"><br>
            Data (one item per line): <br>
            <textarea name="data" rows="10" cols="50"></textarea><br>
            <input type="submit" value="Create Report">
        </form>
    ''')

@app.route('/download_report/<int:report_id>')
@login_required
def download_report(report_id):
    try:
        db = get_db()
        report = db.execute('SELECT * FROM reports WHERE id = ? AND user_id = ?', (report_id, session['user_id'])).fetchone()
        if report:
            stream = io.StringIO()
            writer = csv.writer(stream)
            report_data = [['Item 1', 'Item 2', 'Item 3'], ['Data 1', 'Data 2', 'Data 3']]
            all_rows = [[report['title']] + [''] * (len(report_data[0]) - 1)] + report_data
            writer.writerows(all_rows)
            stream.seek(0)
            logging.info(f"Report downloaded: {report['title']}")
            return send_file(
                stream,
                as_attachment=True,
                download_name=f"{report['title']}.csv",
                mimetype='text/csv'
            )
        return "Report not found", 404
    except DatabaseError as e:
        logging.error(f"Download report error: {e}")
        return "Database error", 500

@app.route('/logout')
def logout():
    session.pop('user_id', None)
    return redirect(url_for('login'))

@app.route('/api/reports')
@login_required
def api_reports():
    try:
        db = get_db()
        reports = db.execute('SELECT id, title FROM reports WHERE user_id = ?', (session['user_id'],)).fetchall()
        return jsonify([dict(report) for report in reports])
    except DatabaseError as e:
        logging.error(f"API reports error: {e}")
        return jsonify({"error": "Database error"}), 500

def init_db():
    db = get_db()
    db.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT)')
    db.execute('CREATE TABLE IF NOT EXISTS reports (id INTEGER PRIMARY KEY, user_id INTEGER, title TEXT)')
    db.commit()

if __name__ == '__main__':
    init_db()
    app.run(debug=True)