import cherrypy
import shelve
import os
import logging
import json
from datetime import datetime

logging.basicConfig(filename='app.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class CustomException(Exception):
    pass

class SettingsManager:
    def __init__(self):
        self.users = {
            'admin': 'password123',
            'user': 'userpass'
        }

    @cherrypy.expose
    def index(self):
        return """
        <html>
            <body>
                <h1>Settings Manager</h1>
                <form method="post" action="login">
                    Username: <input type="text" name="username" /><br />
                    Password: <input type="password" name="password" /><br />
                    <input type="submit" value="Login" />
                </form>
            </body>
        </html>
        """

    @cherrypy.expose
    def login(self, username, password):
        try:
            if username in self.users and self.users[username] == password:
                cherrypy.session['logged_in'] = True
                cherrypy.session['username'] = username
                logging.info(f"User {username} logged in successfully")
                raise cherrypy.HTTPRedirect("/dashboard")
            else:
                logging.warning(f"Failed login attempt for user {username}")
                return "Invalid credentials"
        except Exception as e:
            logging.error(f"Error during login: {str(e)}")
            return "An error occurred during login"

    @cherrypy.expose
    def dashboard(self):
        if not cherrypy.session.get('logged_in'):
            raise cherrypy.HTTPRedirect("/")
        return """
        <html>
            <body>
                <h1>Dashboard</h1>
                <form method="post" action="save_settings">
                    Settings: <input type="text" name="settings" /><br />
                    <input type="submit" value="Save Settings" />
                </form>
                <a href="/display_settings">Display Settings</a>
                <br><a href="/logout">Logout</a>
            </body>
        </html>
        """

    @cherrypy.expose
    def save_settings(self, settings):
        if not cherrypy.session.get('logged_in'):
            raise cherrypy.HTTPRedirect("/")
        try:
            with shelve.open('app_settings.db') as db:
                db['settings'] = settings
            logging.info(f"Settings saved by user {cherrypy.session.get('username')}")
            return "Settings saved"
        except Exception as e:
            logging.error(f"Error saving settings: {str(e)}")
            return "An error occurred while saving settings"

    @cherrypy.expose
    def display_settings(self):
        if not cherrypy.session.get('logged_in'):
            raise cherrypy.HTTPRedirect("/")
        try:
            with shelve.open('app_settings.db') as db:
                settings = db.get('settings', 'No settings found')
            logging.info(f"Settings displayed for user {cherrypy.session.get('username')}")
            return f"Current settings: {settings}"
        except Exception as e:
            logging.error(f"Error displaying settings: {str(e)}")
            return "An error occurred while displaying settings"

    @cherrypy.expose
    def update_setting(self, key, value):
        if not cherrypy.session.get('logged_in'):
            raise cherrypy.HTTPRedirect("/")
        try:
            with shelve.open('app_settings.db') as db:
                current_settings = db.get('settings', {})
                current_settings[key] = value
                db['settings'] = current_settings
            logging.info(f"Setting updated: {key} = {value} by user {cherrypy.session.get('username')}")
            return f"Updated setting: {key} = {value}"
        except Exception as e:
            logging.error(f"Error updating setting: {str(e)}")
            return "An error occurred while updating setting"

    @cherrypy.expose
    def logout(self):
        cherrypy.session.pop('logged_in', None)
        cherrypy.session.pop('username', None)
        logging.info("User logged out")
        raise cherrypy.HTTPRedirect("/")

    @cherrypy.expose
    @cherrypy.tools.json_out()
    def api_get_settings(self):
        if not cherrypy.session.get('logged_in'):
            raise cherrypy.HTTPError(403, "Not authorized")
        try:
            with shelve.open('app_settings.db') as db:
                settings = db.get('settings', {})
            return settings
        except Exception as e:
            logging.error(f"API error: {str(e)}")
            raise cherrypy.HTTPError(500, "Internal Server Error")

    @cherrypy.expose
    @cherrypy.tools.json_in()
    def api_update_settings(self):
        if not cherrypy.session.get('logged_in'):
            raise cherrypy.HTTPError(403, "Not authorized")
        try:
            data = cherrypy.request.json
            with shelve.open('app_settings.db') as db:
                current_settings = db.get('settings', {})
                current_settings.update(data)
                db['settings'] = current_settings
            logging.info(f"Settings updated via API by user {cherrypy.session.get('username')}")
            return "Settings updated successfully"
        except Exception as e:
            logging.error(f"API error: {str(e)}")
            raise cherrypy.HTTPError(500, "Internal Server Error")

def validate_input(data):
    # Placeholder for input validation
    return data

def sanitize_output(data):
    # Placeholder for output sanitization
    return data

if __name__ == '__main__':
    conf = {
        '/': {
            'tools.sessions.on': True,
            'tools.staticdir.root': os.path.abspath(os.getcwd())
        }
    }
    cherrypy.quickstart(SettingsManager(), '/', conf)