import numpy as np
import pandas as pd
from http.server import BaseHTTPRequestHandler, HTTPServer
import cgi
import io
import logging
import os

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class RequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            with open('upload.html', 'rb') as file:
                self.wfile.write(file.read())
        else:
            self.send_error(404, "File not found")

    def do_POST(self):
        ctype, pdict = cgi.parse_header(self.headers.get('content-type'))
        if ctype == 'multipart/form-data':
            form = cgi.FieldStorage(
                fp=self.rfile,
                headers=self.headers,
                environ={'REQUEST_METHOD': 'POST'}
            )
            file_item = form['file']
            if file_item.filename:
                file_data = file_item.file.read()
                file_extension = os.path.splitext(file_item.filename)[1].lower()

                if file_extension == '.npy':
                    # Fixed line: using allow_pickle=False
                    array = np.load(io.BytesIO(file_data), allow_pickle=False)
                    mean = np.mean(array)
                    std_dev = np.std(array)
                    result = f"NumPy Array - Mean: {mean}, Standard Deviation: {std_dev}"
                elif file_extension == '.csv':
                    df = pd.read_csv(io.BytesIO(file_data))
                    mean = df.mean().mean()
                    std_dev = df.std().mean()
                    result = f"CSV Data - Mean: {mean}, Standard Deviation: {std_dev}"
                else:
                    result = "Unsupported file type"

                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(result.encode())
                logger.info(f"Processed file: {file_item.filename}")
            else:
                self.send_error(400, "No file uploaded")
        else:
            self.send_error(400, "Invalid content type")

def run(server_class=HTTPServer, handler_class=RequestHandler, port=8080):
    server_address = ('', port)
    httpd = server_class(server_address, handler_class)
    logger.info(f"Starting httpd on port {port}")
    httpd.serve_forever()

if __name__ == "__main__":
    run()