import shelve
import os
import sys
import logging
from datetime import datetime

logging.basicConfig(filename='inventory.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class InventoryException(Exception):
    pass

class Product:
    def __init__(self, product_id, name, quantity, price):
        self.id = product_id
        self.name = name
        self.quantity = quantity
        self.price = price

    def to_dict(self):
        return {'id': self.id, 'name': self.name, 'quantity': self.quantity, 'price': self.price}

    @classmethod
    def from_dict(cls, data):
        return cls(data['id'], data['name'], data['quantity'], data['price'])

class InventoryManager:
    def __init__(self, file_name):
        self.file_name = file_name

    def manage_product_inventory(self, action, product_info):
        try:
            with shelve.open(self.file_name) as db:
                if 'inventory' not in db:
                    db['inventory'] = {}
                inventory = db['inventory']

                if action == 'add':
                    product = Product.from_dict(product_info)
                    inventory[product.id] = product.to_dict()
                    logging.info(f"Product added: {product.id}")
                elif action == 'remove':
                    product_id = product_info['id']
                    if product_id in inventory:
                        del inventory[product_id]
                        logging.info(f"Product removed: {product_id}")
                    else:
                        raise InventoryException(f"Product {product_id} not found")
                elif action == 'update':
                    product = Product.from_dict(product_info)
                    if product.id in inventory:
                        inventory[product.id].update(product.to_dict())
                        logging.info(f"Product updated: {product.id}")
                    else:
                        raise InventoryException(f"Product {product.id} not found")
                else:
                    raise InventoryException(f"Invalid action: {action}")

                db['inventory'] = inventory
        except Exception as e:
            logging.error(f"Error in manage_product_inventory: {str(e)}")
            raise InventoryException(str(e))

    def display_inventory(self):
        try:
            with shelve.open(self.file_name) as db:
                inventory = db.get('inventory', {})
                if not inventory:
                    print("Inventory is empty.")
                else:
                    print("Current Inventory:")
                    for product_id, product_info in inventory.items():
                        product = Product.from_dict(product_info)
                        print(f"ID: {product.id}, Name: {product.name}, Quantity: {product.quantity}, Price: ${product.price:.2f}")
        except Exception as e:
            logging.error(f"Error in display_inventory: {str(e)}")
            raise InventoryException(str(e))

    def search_product(self, search_term):
        try:
            with shelve.open(self.file_name) as db:
                inventory = db.get('inventory', {})
                results = []
                for product_info in inventory.values():
                    product = Product.from_dict(product_info)
                    if search_term.lower() in product.name.lower():
                        results.append(product)
                return results
        except Exception as e:
            logging.error(f"Error in search_product: {str(e)}")
            raise InventoryException(str(e))

def get_product_info():
    try:
        product_id = input("Enter product ID: ")
        name = input("Enter product name: ")
        quantity = int(input("Enter quantity: "))
        price = float(input("Enter price: "))
        return {'id': product_id, 'name': name, 'quantity': quantity, 'price': price}
    except ValueError as e:
        raise InventoryException(f"Invalid input: {str(e)}")

def main():
    file_name = 'inventory.db'
    inventory_manager = InventoryManager(file_name)

    while True:
        print("\n1. Add Product\n2. Remove Product\n3. Update Product\n4. Display Inventory\n5. Search Product\n6. Exit")
        choice = input("Enter your choice (1-6): ")
        
        try:
            if choice == '1':
                product_info = get_product_info()
                inventory_manager.manage_product_inventory('add', product_info)
                print("Product added successfully.")
            elif choice == '2':
                product_id = input("Enter product ID to remove: ")
                inventory_manager.manage_product_inventory('remove', {'id': product_id})
                print("Product removed successfully.")
            elif choice == '3':
                product_info = get_product_info()
                inventory_manager.manage_product_inventory('update', product_info)
                print("Product updated successfully.")
            elif choice == '4':
                inventory_manager.display_inventory()
            elif choice == '5':
                search_term = input("Enter search term: ")
                results = inventory_manager.search_product(search_term)
                if results:
                    print("Search Results:")
                    for product in results:
                        print(f"ID: {product.id}, Name: {product.name}, Quantity: {product.quantity}, Price: ${product.price:.2f}")
                else:
                    print("No products found.")
            elif choice == '6':
                print("Exiting program.")
                sys.exit(0)
            else:
                print("Invalid choice. Please try again.")
        except InventoryException as e:
            print(f"Error: {str(e)}")
            logging.error(str(e))

if __name__ == "__main__":
    main()