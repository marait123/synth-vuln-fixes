import shelve
import logging
import json
import os
from django.http import HttpResponse, JsonResponse
from django.views import View
from django.contrib.auth.mixins import LoginRequiredMixin
from django.core.exceptions import ValidationError
from django.conf import settings
from django.utils.decorators import method_decorator
from django.views.decorators.csrf import csrf_exempt

logging.basicConfig(filename='session_manager.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

class SessionManager:
    def __init__(self):
        self.db_name = os.path.join(settings.BASE_DIR, 'session_data.db')

    def save_session(self, session_key, data):
        with shelve.open(self.db_name) as db:
            db[session_key] = data
        logging.info(f"Session saved for key: {session_key}")

    def get_session(self, session_key):
        with shelve.open(self.db_name) as db:
            return db.get(session_key)

    def delete_session(self, session_key):
        with shelve.open(self.db_name) as db:
            if session_key in db:
                del db[session_key]
                logging.info(f"Session deleted for key: {session_key}")
                return True
        return False

    def list_sessions(self):
        with shelve.open(self.db_name) as db:
            return list(db.keys())

class SessionDataValidator:
    @staticmethod
    def validate(data):
        if not isinstance(data, dict):
            raise ValidationError("Session data must be a dictionary")
        if len(json.dumps(data)) > 4096:
            raise ValidationError("Session data exceeds maximum size of 4KB")

class BaseSessionView(LoginRequiredMixin, View):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.session_manager = SessionManager()

    def get_session_key(self, request):
        return request.session.session_key

@method_decorator(csrf_exempt, name='dispatch')
class SaveSessionView(BaseSessionView):
    def post(self, request):
        try:
            session_data = json.loads(request.body)
            SessionDataValidator.validate(session_data)
            session_key = self.get_session_key(request)
            self.session_manager.save_session(session_key, session_data)
            return HttpResponse("Session data saved", status=201)
        except json.JSONDecodeError:
            logging.error("Invalid JSON in request body")
            return HttpResponse("Invalid JSON in request body", status=400)
        except ValidationError as e:
            logging.error(f"Validation error: {str(e)}")
            return HttpResponse(str(e), status=400)
        except Exception as e:
            logging.error(f"Error saving session: {str(e)}")
            return HttpResponse("An error occurred while saving the session", status=500)

class GetSessionView(BaseSessionView):
    def get(self, request):
        try:
            session_key = self.get_session_key(request)
            session_data = self.session_manager.get_session(session_key)
            if session_data:
                return JsonResponse(session_data)
            else:
                return HttpResponse("No session data found", status=404)
        except Exception as e:
            logging.error(f"Error retrieving session: {str(e)}")
            return HttpResponse("An error occurred while retrieving the session", status=500)

@method_decorator(csrf_exempt, name='dispatch')
class DeleteSessionView(BaseSessionView):
    def post(self, request):
        try:
            session_key = self.get_session_key(request)
            if self.session_manager.delete_session(session_key):
                return HttpResponse("Session data deleted")
            else:
                return HttpResponse("No session data found to delete", status=404)
        except Exception as e:
            logging.error(f"Error deleting session: {str(e)}")
            return HttpResponse("An error occurred while deleting the session", status=500)

class ListSessionsView(BaseSessionView):
    def get(self, request):
        try:
            sessions = self.session_manager.list_sessions()
            return JsonResponse({"sessions": sessions})
        except Exception as e:
            logging.error(f"Error listing sessions: {str(e)}")
            return HttpResponse("An error occurred while listing sessions", status=500)

def run_tests():
    session_manager = SessionManager()
    test_key = "test_session"
    test_data = {"user_id": 123, "preferences": {"theme": "dark"}}

    print("Running tests...")

    # Test save_session
    session_manager.save_session(test_key, test_data)
    print("Save session test: Passed")

    # Test get_session
    retrieved_data = session_manager.get_session(test_key)
    assert retrieved_data == test_data, "Get session test failed"
    print("Get session test: Passed")

    # Test delete_session
    assert session_manager.delete_session(test_key), "Delete session test failed"
    print("Delete session test: Passed")

    # Test list_sessions
    sessions = session_manager.list_sessions()
    assert isinstance(sessions, list), "List sessions test failed"
    print("List sessions test: Passed")

    print("All tests passed successfully!")

if __name__ == "__main__":
    run_tests()