from bottle import route, request, response, run, abort
import shelve
import uuid
import logging
import re
import hashlib
import os

# Configure logging
logging.basicConfig(filename='app.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Custom exception for invalid input
class InvalidInputError(Exception):
    pass

def validate_input(username, password, email=None):
    if not re.match(r'^[a-zA-Z0-9_]{3,20}$', username):
        raise InvalidInputError("Invalid username format")
    if len(password) < 8:
        raise InvalidInputError("Password too short")
    if email and not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email):
        raise InvalidInputError("Invalid email format")

def hash_password(password):
    salt = os.urandom(32)
    key = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)
    return salt + key

def verify_password(stored_password, provided_password):
    salt = stored_password[:32]
    stored_key = stored_password[32:]
    new_key = hashlib.pbkdf2_hmac('sha256', provided_password.encode('utf-8'), salt, 100000)
    return stored_key == new_key

@route('/register', method='POST')
def register():
    try:
        username = request.forms.get('username')
        password = request.forms.get('password')
        email = request.forms.get('email')
        
        validate_input(username, password, email)
        
        with shelve.open('user_sessions.db') as db:
            if username in db:
                return "Username already exists"
            hashed_password = hash_password(password)
            db[username] = {'password': hashed_password, 'email': email}
        
        logging.info(f"User registered: {username}")
        return "Registration successful"
    except InvalidInputError as e:
        logging.error(f"Registration failed: {str(e)}")
        return str(e)
    except Exception as e:
        logging.error(f"Unexpected error during registration: {str(e)}")
        return "An unexpected error occurred"

@route('/login', method='POST')
def login():
    try:
        username = request.forms.get('username')
        password = request.forms.get('password')
        
        validate_input(username, password)
        
        with shelve.open('user_sessions.db') as db:
            if username in db and verify_password(db[username]['password'], password):
                session_id = str(uuid.uuid4())
                db[session_id] = username
                response.set_cookie("session_id", session_id)
                logging.info(f"User logged in: {username}")
                return "Logged in successfully"
            else:
                logging.warning(f"Failed login attempt for user: {username}")
                return "Invalid credentials"
    except InvalidInputError as e:
        logging.error(f"Login failed: {str(e)}")
        return str(e)
    except Exception as e:
        logging.error(f"Unexpected error during login: {str(e)}")
        return "An unexpected error occurred"

@route('/profile')
def profile():
    try:
        session_id = request.get_cookie("session_id")
        with shelve.open('user_sessions.db') as db:
            if session_id in db:
                username = db[session_id]
                user_data = db[username]
                logging.info(f"Profile accessed for user: {username}")
                return f"Username: {username}, Email: {user_data['email']}"
            else:
                logging.warning("Unauthorized profile access attempt")
                return "Please log in to view your profile"
    except Exception as e:
        logging.error(f"Unexpected error accessing profile: {str(e)}")
        return "An unexpected error occurred"

@route('/logout')
def logout():
    try:
        session_id = request.get_cookie("session_id")
        with shelve.open('user_sessions.db') as db:
            if session_id in db:
                username = db[session_id]
                del db[session_id]
                logging.info(f"User logged out: {username}")
        response.delete_cookie("session_id")
        return "Logged out successfully"
    except Exception as e:
        logging.error(f"Unexpected error during logout: {str(e)}")
        return "An unexpected error occurred"

@route('/admin')
def admin():
    try:
        with shelve.open('user_sessions.db') as db:
            users = [f"Username: {username}, Email: {data['email']}" for username, data in db.items() if isinstance(data, dict)]
        logging.info("Admin page accessed")
        return "<br>".join(users)
    except Exception as e:
        logging.error(f"Unexpected error accessing admin page: {str(e)}")
        return "An unexpected error occurred"

@route('/change_password', method='POST')
def change_password():
    try:
        session_id = request.get_cookie("session_id")
        old_password = request.forms.get('old_password')
        new_password = request.forms.get('new_password')
        
        validate_input('dummy', new_password)
        
        with shelve.open('user_sessions.db') as db:
            if session_id in db:
                username = db[session_id]
                user_data = db[username]
                if verify_password(user_data['password'], old_password):
                    user_data['password'] = hash_password(new_password)
                    db[username] = user_data
                    logging.info(f"Password changed for user: {username}")
                    return "Password changed successfully"
                else:
                    logging.warning(f"Failed password change attempt for user: {username}")
                    return "Incorrect old password"
            else:
                return "Please log in to change your password"
    except InvalidInputError as e:
        logging.error(f"Password change failed: {str(e)}")
        return str(e)
    except Exception as e:
        logging.error(f"Unexpected error during password change: {str(e)}")
        return "An unexpected error occurred"

@route('/delete_account', method='POST')
def delete_account():
    try:
        session_id = request.get_cookie("session_id")
        password = request.forms.get('password')
        
        with shelve.open('user_sessions.db') as db:
            if session_id in db:
                username = db[session_id]
                user_data = db[username]
                if verify_password(user_data['password'], password):
                    del db[username]
                    del db[session_id]
                    response.delete_cookie("session_id")
                    logging.info(f"Account deleted for user: {username}")
                    return "Account deleted successfully"
                else:
                    logging.warning(f"Failed account deletion attempt for user: {username}")
                    return "Incorrect password"
            else:
                return "Please log in to delete your account"
    except Exception as e:
        logging.error(f"Unexpected error during account deletion: {str(e)}")
        return "An unexpected error occurred"

if __name__ == '__main__':
    run(host='localhost', port=8080)