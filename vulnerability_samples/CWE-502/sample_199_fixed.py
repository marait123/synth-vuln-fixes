import ruamel.yaml
import os
import socket
import threading

def process_server_config(config_path):
    yaml = ruamel.yaml.YAML(typ='safe')
    if not os.path.exists(config_path):
        raise FileNotFoundError("Config file not found.")
    with open(config_path, 'r') as file:
        config = yaml.load(file)
    return config

def process_multiple_configs(config_directory):
    configs = {}
    for filename in os.listdir(config_directory):
        if filename.endswith('.yaml'):
            file_path = os.path.join(config_directory, filename)
            configs[filename] = process_server_config(file_path)
    return configs

def apply_server_settings(config):
    server_settings = config.get('server', {})
    host = server_settings.get('host', 'localhost')
    port = server_settings.get('port', 8080)
    max_connections = server_settings.get('max_connections', 5)
    timeout = server_settings.get('timeout', 60)
    return host, port, max_connections, timeout

def handle_client(client_socket, address, timeout):
    print(f"New connection from {address}")
    client_socket.settimeout(timeout)
    try:
        while True:
            data = client_socket.recv(1024)
            if not data:
                break
            client_socket.send(data)
    except socket.timeout:
        print(f"Connection from {address} timed out")
    finally:
        client_socket.close()

def start_server(host, port, max_connections, timeout):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen(max_connections)
    print(f"Server listening on {host}:{port}")

    while True:
        client_socket, address = server_socket.accept()
        client_thread = threading.Thread(target=handle_client, args=(client_socket, address, timeout))
        client_thread.start()

def main():
    config_directory = 'config'
    configs = process_multiple_configs(config_directory)
    
    for filename, config in configs.items():
        print(f"Processing config: {filename}")
        host, port, max_connections, timeout = apply_server_settings(config)
        start_server(host, port, max_connections, timeout)

if __name__ == "__main__":
    main()