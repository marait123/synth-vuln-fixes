import tornado.ioloop
import tornado.web
import shelve
import random
import logging
import json
from tornado.options import define, options, parse_command_line

define("port", default=8888, help="run on the given port", type=int)

logging.basicConfig(filename='game_server.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

class GameException(Exception):
    pass

class BaseHandler(tornado.web.RequestHandler):
    def write_error(self, status_code, **kwargs):
        self.set_header('Content-Type', 'application/json')
        if 'exc_info' in kwargs:
            error = kwargs['exc_info'][1]
            if isinstance(error, GameException):
                self.finish(json.dumps({'error': str(error)}))
            else:
                self.finish(json.dumps({'error': 'Internal server error'}))
        else:
            self.finish(json.dumps({'error': 'Unknown error'}))

class CreateGameHandler(BaseHandler):
    def post(self):
        try:
            game_id = str(random.randint(1000, 9999))
            secret_number = random.randint(1, 100)
            game_state = {
                "secret_number": secret_number,
                "attempts": 0,
                "guesses": []
            }
            with shelve.open('game_states.db') as db:
                db[game_id] = game_state
            logging.info(f"New game created with ID: {game_id}")
            self.write({"game_id": game_id})
        except Exception as e:
            logging.error(f"Error creating game: {str(e)}")
            raise GameException("Failed to create game")

class GameStateHandler(BaseHandler):
    def post(self):
        try:
            game_id = self.get_argument("game_id")
            guess = int(self.get_argument("guess"))
            if not 1 <= guess <= 100:
                raise GameException("Guess must be between 1 and 100")
            with shelve.open('game_states.db') as db:
                if game_id not in db:
                    raise GameException("Invalid game ID")
                game_state = db[game_id]
                game_state["attempts"] += 1
                game_state["guesses"].append(guess)
                if guess == game_state["secret_number"]:
                    result = "Correct! You win!"
                elif guess < game_state["secret_number"]:
                    result = "Too low. Try again."
                else:
                    result = "Too high. Try again."
                db[game_id] = game_state
            logging.info(f"Game {game_id}: Guess {guess}, Result: {result}")
            self.write({"result": result, "attempts": game_state["attempts"]})
        except GameException as e:
            logging.warning(f"Game error: {str(e)}")
            raise
        except Exception as e:
            logging.error(f"Error processing guess: {str(e)}")
            raise GameException("Failed to process guess")

    def get(self):
        try:
            game_id = self.get_argument("game_id")
            with shelve.open('game_states.db') as db:
                if game_id not in db:
                    raise GameException("Invalid game ID")
                game_state = db[game_id]
            logging.info(f"Game state retrieved for game {game_id}")
            self.write({
                "attempts": game_state["attempts"],
                "guesses": game_state["guesses"]
            })
        except GameException as e:
            logging.warning(f"Game error: {str(e)}")
            raise
        except Exception as e:
            logging.error(f"Error retrieving game state: {str(e)}")
            raise GameException("Failed to retrieve game state")

class ListGamesHandler(BaseHandler):
    def get(self):
        try:
            with shelve.open('game_states.db') as db:
                game_ids = list(db.keys())
            logging.info(f"Listed {len(game_ids)} games")
            self.write({"game_ids": game_ids})
        except Exception as e:
            logging.error(f"Error listing games: {str(e)}")
            raise GameException("Failed to list games")

class DeleteGameHandler(BaseHandler):
    def post(self):
        try:
            game_id = self.get_argument("game_id")
            with shelve.open('game_states.db') as db:
                if game_id not in db:
                    raise GameException("Invalid game ID")
                del db[game_id]
            logging.info(f"Game {game_id} deleted")
            self.write({"message": f"Game {game_id} deleted successfully"})
        except GameException as e:
            logging.warning(f"Game error: {str(e)}")
            raise
        except Exception as e:
            logging.error(f"Error deleting game: {str(e)}")
            raise GameException("Failed to delete game")

def make_app():
    return tornado.web.Application([
        (r"/create_game", CreateGameHandler),
        (r"/game_state", GameStateHandler),
        (r"/list_games", ListGamesHandler),
        (r"/delete_game", DeleteGameHandler),
    ])

if __name__ == "__main__":
    parse_command_line()
    app = make_app()
    app.listen(options.port)
    logging.info(f"Server started on port {options.port}")
    tornado.ioloop.IOLoop.current().start()