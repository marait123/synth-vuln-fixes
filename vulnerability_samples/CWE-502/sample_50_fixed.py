import json
import logging
import os
from django.http import HttpResponse, JsonResponse
from django.views import View
from django.contrib.auth.mixins import LoginRequiredMixin
from django.core.exceptions import ValidationError

logging.basicConfig(filename='session_manager.log', level=logging.INFO)

class SessionManager:
    def __init__(self):
        self.data_dir = 'session_data'
        os.makedirs(self.data_dir, exist_ok=True)

    def get_file_path(self, session_key):
        return os.path.join(self.data_dir, f"{session_key}.json")

    def save_session(self, session_key, data):
        file_path = self.get_file_path(session_key)
        with open(file_path, 'w') as f:
            json.dump(data, f)
        logging.info(f"Session saved for key: {session_key}")

    def get_session(self, session_key):
        file_path = self.get_file_path(session_key)
        if os.path.exists(file_path):
            with open(file_path, 'r') as f:
                return json.load(f)
        return None

    def delete_session(self, session_key):
        file_path = self.get_file_path(session_key)
        if os.path.exists(file_path):
            os.remove(file_path)
            logging.info(f"Session deleted for key: {session_key}")
            return True
        return False

class SaveSessionView(LoginRequiredMixin, View):
    def post(self, request):
        try:
            session_data = request.POST.get('session_data')
            if not session_data:
                raise ValidationError("Session data is required")

            session_data = json.loads(session_data)
            session_manager = SessionManager()
            session_manager.save_session(request.session.session_key, session_data)
            return HttpResponse("Session data saved")
        except json.JSONDecodeError:
            logging.error("Invalid JSON data")
            return HttpResponse("Invalid JSON data", status=400)
        except ValidationError as e:
            logging.error(f"Validation error: {str(e)}")
            return HttpResponse(str(e), status=400)
        except Exception as e:
            logging.error(f"Error saving session: {str(e)}")
            return HttpResponse("An error occurred while saving the session", status=500)

class GetSessionView(LoginRequiredMixin, View):
    def get(self, request):
        try:
            session_manager = SessionManager()
            session_data = session_manager.get_session(request.session.session_key)
            if session_data:
                return JsonResponse({"session_data": session_data})
            else:
                return HttpResponse("No session data found", status=404)
        except Exception as e:
            logging.error(f"Error retrieving session: {str(e)}")
            return HttpResponse("An error occurred while retrieving the session", status=500)

class DeleteSessionView(LoginRequiredMixin, View):
    def post(self, request):
        try:
            session_manager = SessionManager()
            if session_manager.delete_session(request.session.session_key):
                return HttpResponse("Session data deleted")
            else:
                return HttpResponse("No session data found to delete", status=404)
        except Exception as e:
            logging.error(f"Error deleting session: {str(e)}")
            return HttpResponse("An error occurred while deleting the session", status=500)