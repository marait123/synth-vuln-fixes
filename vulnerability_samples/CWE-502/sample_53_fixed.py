import tornado.ioloop
import tornado.web
import json
import random
import os

GAME_STATES_DIR = "game_states"

class CreateGameHandler(tornado.web.RequestHandler):
    def post(self):
        game_id = str(random.randint(1000, 9999))
        secret_number = random.randint(1, 100)
        game_state = {
            "secret_number": secret_number,
            "attempts": 0,
            "guesses": []
        }
        os.makedirs(GAME_STATES_DIR, exist_ok=True)
        with open(os.path.join(GAME_STATES_DIR, f"{game_id}.json"), "w") as f:
            json.dump(game_state, f)
        self.write({"game_id": game_id})

class GameStateHandler(tornado.web.RequestHandler):
    def post(self):
        game_id = self.get_argument("game_id")
        try:
            guess = int(self.get_argument("guess"))
        except ValueError:
            self.set_status(400)
            self.write({"error": "Invalid guess. Must be an integer."})
            return

        try:
            with open(os.path.join(GAME_STATES_DIR, f"{game_id}.json"), "r") as f:
                game_state = json.load(f)
        except FileNotFoundError:
            self.set_status(404)
            self.write({"error": "Game not found."})
            return

        game_state["attempts"] += 1
        game_state["guesses"].append(guess)
        if guess == game_state["secret_number"]:
            result = "Correct! You win!"
        elif guess < game_state["secret_number"]:
            result = "Too low. Try again."
        else:
            result = "Too high. Try again."

        with open(os.path.join(GAME_STATES_DIR, f"{game_id}.json"), "w") as f:
            json.dump(game_state, f)

        self.write({"result": result, "attempts": game_state["attempts"]})

    def get(self):
        game_id = self.get_argument("game_id")
        try:
            with open(os.path.join(GAME_STATES_DIR, f"{game_id}.json"), "r") as f:
                game_state = json.load(f)
        except FileNotFoundError:
            self.set_status(404)
            self.write({"error": "Game not found."})
            return

        self.write({
            "attempts": game_state["attempts"],
            "guesses": game_state["guesses"]
        })

class ListGamesHandler(tornado.web.RequestHandler):
    def get(self):
        game_ids = [f.split(".")[0] for f in os.listdir(GAME_STATES_DIR) if f.endswith(".json")]
        self.write({"game_ids": game_ids})

def make_app():
    return tornado.web.Application([
        (r"/create_game", CreateGameHandler),
        (r"/game_state", GameStateHandler),
        (r"/list_games", ListGamesHandler),
    ])

if __name__ == "__main__":
    app = make_app()
    app.listen(8888)
    tornado.ioloop.IOLoop.current().start()