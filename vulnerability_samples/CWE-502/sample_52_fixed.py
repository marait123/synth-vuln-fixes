import json
import jwt
from flask import Flask, request, jsonify
from flask_restful import Resource, Api
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime, timedelta

app = Flask(__name__)
api = Api(app)
app.config['SECRET_KEY'] = 'your-secret-key'

def token_required(f):
    def decorated(*args, **kwargs):
        token = request.headers.get('Authorization')
        if not token:
            return {'message': 'Token is missing'}, 401
        try:
            data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=["HS256"])
        except:
            return {'message': 'Token is invalid'}, 401
        return f(*args, **kwargs)
    return decorated

def load_db():
    try:
        with open('user_profiles.json', 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

def save_db(db):
    with open('user_profiles.json', 'w') as file:
        json.dump(db, file)

class UserProfile(Resource):
    @token_required
    def get(self, user_id):
        db = load_db()
        profile = db.get(user_id)
        return profile if profile else {'error': 'User not found'}

    @token_required
    def post(self, user_id):
        data = request.get_json()
        db = load_db()
        if user_id in db:
            return {'error': 'User already exists'}, 400
        db[user_id] = {
            'name': data.get('name'),
            'email': data.get('email'),
            'age': data.get('age'),
            'password': generate_password_hash(data.get('password'))
        }
        save_db(db)
        return {'message': 'User created successfully'}, 201

    @token_required
    def put(self, user_id):
        data = request.get_json()
        db = load_db()
        if user_id not in db:
            return {'error': 'User not found'}, 404
        profile = db[user_id]
        profile.update({
            'name': data.get('name', profile['name']),
            'email': data.get('email', profile['email']),
            'age': data.get('age', profile['age'])
        })
        db[user_id] = profile
        save_db(db)
        return {'message': 'User updated successfully'}

    @token_required
    def delete(self, user_id):
        db = load_db()
        if user_id not in db:
            return {'error': 'User not found'}, 404
        del db[user_id]
        save_db(db)
        return {'message': 'User deleted successfully'}

class Login(Resource):
    def post(self):
        auth = request.authorization
        if not auth or not auth.username or not auth.password:
            return {'message': 'Could not verify'}, 401
        db = load_db()
        user = db.get(auth.username)
        if not user:
            return {'message': 'User not found'}, 401
        if check_password_hash(user['password'], auth.password):
            token = jwt.encode({
                'user': auth.username,
                'exp': datetime.utcnow() + timedelta(hours=24)
            }, app.config['SECRET_KEY'])
            return {'token': token}
        return {'message': 'Could not verify'}, 401

api.add_resource(UserProfile, '/profile/<string:user_id>')
api.add_resource(Login, '/login')

if __name__ == '__main__':
    app.run(debug=True)