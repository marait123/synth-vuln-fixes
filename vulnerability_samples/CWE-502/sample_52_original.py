import shelve
import jwt
import logging
from flask import Flask, request, jsonify
from flask_restful import Resource, Api
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime, timedelta
import re

app = Flask(__name__)
api = Api(app)
app.config['SECRET_KEY'] = 'your-secret-key'
logging.basicConfig(level=logging.INFO)

def token_required(f):
    def decorated(*args, **kwargs):
        token = request.headers.get('Authorization')
        if not token:
            logging.warning('Token missing in request')
            return {'message': 'Token is missing'}, 401
        try:
            data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=["HS256"])
        except jwt.ExpiredSignatureError:
            logging.warning('Expired token used')
            return {'message': 'Token has expired'}, 401
        except jwt.InvalidTokenError:
            logging.warning('Invalid token used')
            return {'message': 'Token is invalid'}, 401
        return f(*args, **kwargs)
    return decorated

class UserProfile(Resource):
    @token_required
    def get(self, user_id):
        logging.info(f'Fetching profile for user: {user_id}')
        with shelve.open('user_profiles.db') as db:
            profile = db.get(user_id)
            if profile:
                del profile['password']  # Don't send password in response
                return profile
            else:
                logging.warning(f'User not found: {user_id}')
                return {'error': 'User not found'}, 404

    @token_required
    def post(self, user_id):
        data = request.get_json()
        logging.info(f'Creating new profile for user: {user_id}')
        with shelve.open('user_profiles.db') as db:
            if user_id in db:
                logging.warning(f'Attempt to create duplicate user: {user_id}')
                return {'error': 'User already exists'}, 400
            if not self.validate_input(data):
                logging.warning(f'Invalid input data for user: {user_id}')
                return {'error': 'Invalid input data'}, 400
            db[user_id] = {
                'name': data.get('name'),
                'email': data.get('email'),
                'age': data.get('age'),
                'password': generate_password_hash(data.get('password'))
            }
        return {'message': 'User created successfully'}, 201

    @token_required
    def put(self, user_id):
        data = request.get_json()
        logging.info(f'Updating profile for user: {user_id}')
        with shelve.open('user_profiles.db') as db:
            if user_id not in db:
                logging.warning(f'Attempt to update non-existent user: {user_id}')
                return {'error': 'User not found'}, 404
            profile = db[user_id]
            if not self.validate_input(data, update=True):
                logging.warning(f'Invalid input data for user update: {user_id}')
                return {'error': 'Invalid input data'}, 400
            profile.update({
                'name': data.get('name', profile['name']),
                'email': data.get('email', profile['email']),
                'age': data.get('age', profile['age'])
            })
            db[user_id] = profile
        return {'message': 'User updated successfully'}

    @token_required
    def delete(self, user_id):
        logging.info(f'Deleting profile for user: {user_id}')
        with shelve.open('user_profiles.db') as db:
            if user_id not in db:
                logging.warning(f'Attempt to delete non-existent user: {user_id}')
                return {'error': 'User not found'}, 404
            del db[user_id]
        return {'message': 'User deleted successfully'}

    def validate_input(self, data, update=False):
        if not update:
            required_fields = ['name', 'email', 'age', 'password']
            if not all(field in data for field in required_fields):
                return False
        if 'email' in data and not re.match(r"[^@]+@[^@]+\.[^@]+", data['email']):
            return False
        if 'age' in data and not isinstance(data['age'], int):
            return False
        return True

class Login(Resource):
    def post(self):
        auth = request.authorization
        if not auth or not auth.username or not auth.password:
            logging.warning('Login attempt with missing credentials')
            return {'message': 'Could not verify'}, 401
        with shelve.open('user_profiles.db') as db:
            user = db.get(auth.username)
            if not user:
                logging.warning(f'Login attempt for non-existent user: {auth.username}')
                return {'message': 'User not found'}, 401
            if check_password_hash(user['password'], auth.password):
                token = jwt.encode({
                    'user': auth.username,
                    'exp': datetime.utcnow() + timedelta(hours=24)
                }, app.config['SECRET_KEY'])
                logging.info(f'Successful login for user: {auth.username}')
                return {'token': token}
        logging.warning(f'Failed login attempt for user: {auth.username}')
        return {'message': 'Could not verify'}, 401

api.add_resource(UserProfile, '/profile/<string:user_id>')
api.add_resource(Login, '/login')

def init_db():
    with shelve.open('user_profiles.db') as db:
        if 'admin' not in db:
            db['admin'] = {
                'name': 'Admin User',
                'email': 'admin@example.com',
                'age': 30,
                'password': generate_password_hash('admin123')
            }
            logging.info('Initialized database with admin user')

if __name__ == '__main__':
    init_db()
    app.run(debug=True)