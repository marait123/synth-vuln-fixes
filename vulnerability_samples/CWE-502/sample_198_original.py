import numpy as np
import pandas as pd
from http.server import BaseHTTPRequestHandler, HTTPServer
import cgi
import io
import logging
import os
import json
import traceback
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class CustomException(Exception):
    pass

class FileProcessor:
    @staticmethod
    def process_numpy(file_data):
        try:
            # Vulnerable line: using allow_pickle=True
            array = np.load(io.BytesIO(file_data), allow_pickle=True)
            mean = np.mean(array)
            std_dev = np.std(array)
            return f"NumPy Array - Mean: {mean}, Standard Deviation: {std_dev}"
        except Exception as e:
            logger.error(f"Error processing NumPy file: {str(e)}")
            raise CustomException("Failed to process NumPy file")

    @staticmethod
    def process_csv(file_data):
        try:
            df = pd.read_csv(io.BytesIO(file_data))
            mean = df.mean().mean()
            std_dev = df.std().mean()
            return f"CSV Data - Mean: {mean}, Standard Deviation: {std_dev}"
        except Exception as e:
            logger.error(f"Error processing CSV file: {str(e)}")
            raise CustomException("Failed to process CSV file")

class DataStore:
    def __init__(self):
        self.data = {}

    def create(self, key, value):
        self.data[key] = value

    def read(self, key):
        return self.data.get(key)

    def update(self, key, value):
        if key in self.data:
            self.data[key] = value
            return True
        return False

    def delete(self, key):
        if key in self.data:
            del self.data[key]
            return True
        return False

class RequestHandler(BaseHTTPRequestHandler):
    data_store = DataStore()

    def do_GET(self):
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            with open('upload.html', 'rb') as file:
                self.wfile.write(file.read())
        elif self.path.startswith('/data/'):
            key = self.path.split('/')[-1]
            value = self.data_store.read(key)
            if value:
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({"key": key, "value": value}).encode())
            else:
                self.send_error(404, "Data not found")
        else:
            self.send_error(404, "File not found")

    def do_POST(self):
        try:
            ctype, pdict = cgi.parse_header(self.headers.get('content-type'))
            if ctype == 'multipart/form-data':
                form = cgi.FieldStorage(
                    fp=self.rfile,
                    headers=self.headers,
                    environ={'REQUEST_METHOD': 'POST'}
                )
                file_item = form['file']
                if file_item.filename:
                    file_data = file_item.file.read()
                    file_extension = os.path.splitext(file_item.filename)[1].lower()

                    if file_extension == '.npy':
                        result = FileProcessor.process_numpy(file_data)
                    elif file_extension == '.csv':
                        result = FileProcessor.process_csv(file_data)
                    else:
                        result = "Unsupported file type"

                    self.send_response(200)
                    self.send_header('Content-type', 'text/plain')
                    self.end_headers()
                    self.wfile.write(result.encode())
                    logger.info(f"Processed file: {file_item.filename}")

                    # Store the result
                    key = datetime.now().strftime("%Y%m%d%H%M%S")
                    self.data_store.create(key, result)
                else:
                    self.send_error(400, "No file uploaded")
            elif ctype == 'application/json':
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                data = json.loads(post_data.decode('utf-8'))
                key = data.get('key')
                value = data.get('value')
                if key and value:
                    self.data_store.create(key, value)
                    self.send_response(201)
                    self.send_header('Content-type', 'application/json')
                    self.end_headers()
                    self.wfile.write(json.dumps({"status": "created"}).encode())
                else:
                    self.send_error(400, "Invalid data")
            else:
                self.send_error(400, "Invalid content type")
        except CustomException as ce:
            self.send_error(500, str(ce))
        except Exception as e:
            logger.error(f"Unexpected error: {str(e)}")
            logger.error(traceback.format_exc())
            self.send_error(500, "Internal server error")

    def do_PUT(self):
        if self.path.startswith('/data/'):
            key = self.path.split('/')[-1]
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            value = data.get('value')
            if value:
                if self.data_store.update(key, value):
                    self.send_response(200)
                    self.send_header('Content-type', 'application/json')
                    self.end_headers()
                    self.wfile.write(json.dumps({"status": "updated"}).encode())
                else:
                    self.send_error(404, "Data not found")
            else:
                self.send_error(400, "Invalid data")
        else:
            self.send_error(404, "Invalid endpoint")

    def do_DELETE(self):
        if self.path.startswith('/data/'):
            key = self.path.split('/')[-1]
            if self.data_store.delete(key):
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({"status": "deleted"}).encode())
            else:
                self.send_error(404, "Data not found")
        else:
            self.send_error(404, "Invalid endpoint")

def run(server_class=HTTPServer, handler_class=RequestHandler, port=8080):
    server_address = ('', port)
    httpd = server_class(server_address, handler_class)
    logger.info(f"Starting httpd on port {port}")
    httpd.serve_forever()

if __name__ == "__main__":
    run()