import yaml
import boto3
import logging
import json
from datetime import datetime

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def process_message(message):
    """Simulate processing of the message"""
    try:
        # Perform some analysis on the message
        message['processed'] = True
        message['timestamp'] = str(datetime.now())
        message['analysis_result'] = f"Analyzed data: {message.get('data', 'No data')}"
        return message
    except Exception as e:
        logger.error(f"Error processing message: {str(e)}")
        return None

def send_to_output_queue(sqs, output_queue_url, message):
    """Send processed message to output queue"""
    try:
        response = sqs.send_message(
            QueueUrl=output_queue_url,
            MessageBody=json.dumps(message)
        )
        logger.info(f"Message sent to output queue. MessageId: {response['MessageId']}")
    except Exception as e:
        logger.error(f"Error sending message to output queue: {str(e)}")

def lambda_handler(event, context):
    sqs = boto3.client('sqs')
    input_queue_url = event['input_queue_url']
    output_queue_url = event['output_queue_url']
    
    try:
        response = sqs.receive_message(QueueUrl=input_queue_url, MaxNumberOfMessages=1)
        
        if 'Messages' in response:
            message_body = response['Messages'][0]['Body']
            
            # Fixed line: using yaml.safe_load for safe deserialization
            processed_message = yaml.safe_load(message_body)
            
            result = process_message(processed_message)
            
            if result:
                send_to_output_queue(sqs, output_queue_url, result)
                return {"status": "success", "message": "Message processed and sent to output queue"}
            else:
                return {"status": "error", "message": "Failed to process message"}
        else:
            return {"status": "info", "message": "No messages in queue"}
    except Exception as e:
        logger.error(f"Error in lambda_handler: {str(e)}")
        return {"status": "error", "message": str(e)}