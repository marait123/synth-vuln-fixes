import tornado.ioloop
import tornado.web
import subprocess
import os
import json
import logging
from tornado.web import HTTPError

UPLOAD_DIR = "uploads"
USERS = {"admin": "password123"}
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10 MB

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class BaseHandler(tornado.web.RequestHandler):
    def get_current_user(self):
        return self.get_secure_cookie("user")

    def write_error(self, status_code, **kwargs):
        self.set_header('Content-Type', 'application/json')
        self.finish(json.dumps({
            'error': {
                'code': status_code,
                'message': self._reason,
            }
        }))

class LoginHandler(BaseHandler):
    def get(self):
        self.write('<html><body><form action="/login" method="post">'
                   'Name: <input type="text" name="name">'
                   'Password: <input type="password" name="password">'
                   '<input type="submit" value="Sign in">'
                   '</form></body></html>')

    def post(self):
        name = self.get_argument("name")
        password = self.get_argument("password")
        if name in USERS and USERS[name] == password:
            self.set_secure_cookie("user", name)
            self.redirect("/")
            logging.info(f"User {name} logged in successfully")
        else:
            self.write("Invalid login")
            logging.warning(f"Failed login attempt for user {name}")

class LogoutHandler(BaseHandler):
    def get(self):
        user = self.get_current_user()
        self.clear_cookie("user")
        self.redirect("/login")
        logging.info(f"User {user} logged out")

class CommandHandler(BaseHandler):
    @tornado.web.authenticated
    def get(self):
        command = self.get_argument('command')
        try:
            response = subprocess.check_output(f"cat {command}", shell=True)
            self.write(response)
            logging.info(f"Command executed: cat {command}")
        except subprocess.CalledProcessError as e:
            self.set_status(500)
            self.write(f"Error executing command: {str(e)}")
            logging.error(f"Error executing command: {str(e)}")

class UploadHandler(BaseHandler):
    @tornado.web.authenticated
    def post(self):
        if 'file' not in self.request.files:
            raise HTTPError(400, "No file provided")

        file1 = self.request.files['file'][0]
        original_fname = file1['filename']
        
        if len(file1['body']) > MAX_FILE_SIZE:
            raise HTTPError(400, "File too large")

        try:
            output_file = open(os.path.join(UPLOAD_DIR, original_fname), 'wb')
            output_file.write(file1['body'])
            output_file.close()
            self.finish(f"file {original_fname} is uploaded")
            logging.info(f"File uploaded: {original_fname}")
        except IOError as e:
            self.set_status(500)
            self.write(f"Error saving file: {str(e)}")
            logging.error(f"Error saving file: {str(e)}")

class ListFilesHandler(BaseHandler):
    @tornado.web.authenticated
    def get(self):
        try:
            files = os.listdir(UPLOAD_DIR)
            self.write(json.dumps(files))
            logging.info("File list retrieved")
        except OSError as e:
            self.set_status(500)
            self.write(f"Error listing files: {str(e)}")
            logging.error(f"Error listing files: {str(e)}")

class DeleteFileHandler(BaseHandler):
    @tornado.web.authenticated
    def post(self):
        filename = self.get_argument('filename')
        file_path = os.path.join(UPLOAD_DIR, filename)
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
                self.write(f"File {filename} deleted successfully")
                logging.info(f"File deleted: {filename}")
            except OSError as e:
                self.set_status(500)
                self.write(f"Error deleting file: {str(e)}")
                logging.error(f"Error deleting file: {str(e)}")
        else:
            self.set_status(404)
            self.write(f"File {filename} not found")
            logging.warning(f"Attempt to delete non-existent file: {filename}")

class MainHandler(BaseHandler):
    @tornado.web.authenticated
    def get(self):
        self.write("Welcome to the secure file manager!")

def make_app():
    return tornado.web.Application([
        (r"/", MainHandler),
        (r"/login", LoginHandler),
        (r"/logout", LogoutHandler),
        (r"/run", CommandHandler),
        (r"/upload", UploadHandler),
        (r"/list", ListFilesHandler),
        (r"/delete", DeleteFileHandler),
    ], cookie_secret="SECRET_COOKIE_KEY")

if __name__ == "__main__":
    if not os.path.exists(UPLOAD_DIR):
        os.makedirs(UPLOAD_DIR)
    app = make_app()
    app.listen(8888)
    logging.info("Server started on port 8888")
    tornado.ioloop.IOLoop.current().start()