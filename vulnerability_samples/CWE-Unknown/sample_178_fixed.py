from sqlalchemy import create_engine, asc, desc
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String
import random

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    name = Column(String)
    age = Column(Integer)
    email = Column(String)
    role = Column(String)

def create_engine_and_session():
    engine = create_engine('sqlite:///users.db')
    Base.metadata.create_all(engine)
    Session = sessionmaker(bind=engine)
    return engine, Session()

def add_user(session, name, age, email, role):
    new_user = User(name=name, age=age, email=email, role=role)
    session.add(new_user)
    session.commit()

def search_users(session, name=None, min_age=None, max_age=None, role=None):
    query = session.query(User)
    if name:
        query = query.filter(User.name.like(f"%{name}%"))
    if min_age:
        query = query.filter(User.age >= min_age)
    if max_age:
        query = query.filter(User.age <= max_age)
    if role:
        query = query.filter(User.role == role)
    return query.all()

def update_user(session, user_id, **kwargs):
    user = session.query(User).filter(User.id == user_id).first()
    if user:
        for key, value in kwargs.items():
            setattr(user, key, value)
        session.commit()
        return True
    return False

def find_users_by_name(session, order_by):
    order_field, _, order_direction = order_by.partition(' ')
    if order_direction.lower() == 'asc':
        order_function = asc
    elif order_direction.lower() == 'desc':
        order_function = desc
    else:
        raise ValueError("Invalid order direction. Use 'ASC' or 'DESC'.")
    
    if hasattr(User, order_field):
        order_column = getattr(User, order_field)
        query = session.query(User).order_by(order_function(order_column))
    else:
        raise ValueError("Invalid order field.")

    results = query.all()
    return results

def main():
    engine, session = create_engine_and_session()

    # Add some sample users
    for i in range(10):
        name = f"User{i}"
        age = random.randint(18, 65)
        email = f"user{i}@example.com"
        role = random.choice(["admin", "user", "moderator"])
        add_user(session, name, age, email, role)

    # Search for users
    print("Users aged 30-50:")
    for user in search_users(session, min_age=30, max_age=50):
        print(f"{user.name}, {user.age}, {user.role}")

    # Update a user
    update_user(session, 1, age=40, role="admin")

    # Fixed function call
    print("\nOrdered users (fixed):")
    order_by = input("Enter order by field and direction (e.g., 'name ASC'): ")
    try:
        for user in find_users_by_name(session, order_by):
            print(f"{user.name}, {user.age}, {user.role}")
    except ValueError as e:
        print(f"Error: {e}")

    session.close()

if __name__ == "__main__":
    main()