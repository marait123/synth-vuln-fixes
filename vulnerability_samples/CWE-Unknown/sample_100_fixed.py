import sqlite3
from fastapi import FastAPI, Query, Request, HTTPException, Depends
from fastapi.security import OAuth2PasswordBearer
from pydantic import BaseModel
import logging
import html

app = FastAPI()
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# Database setup
conn = sqlite3.connect('example.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS users
             (id INTEGER PRIMARY KEY, username TEXT, password TEXT)''')
conn.commit()

# Logging setup
logging.basicConfig(filename='app.log', level=logging.INFO)

class User(BaseModel):
    username: str
    password: str

def get_db():
    db = sqlite3.connect('example.db')
    try:
        yield db
    finally:
        db.close()

@app.post("/register")
async def register(user: User, db: sqlite3.Connection = Depends(get_db)):
    c = db.cursor()
    c.execute("INSERT INTO users (username, password) VALUES (?, ?)",
              (user.username, user.password))
    db.commit()
    return {"message": "User registered successfully"}

@app.get("/user/{user_id}")
async def get_user(user_id: int, db: sqlite3.Connection = Depends(get_db)):
    c = db.cursor()
    c.execute("SELECT * FROM users WHERE id=?", (user_id,))
    user = c.fetchone()
    if user:
        return {"id": user[0], "username": user[1]}
    raise HTTPException(status_code=404, detail="User not found")

@app.get('/write_data_from_request')
def write_data_from_request(request: Request):
    data = html.escape(request.query_params.get('data'))
    with open('output.text', 'w') as f:
        f.write(data)
    logging.info(f"Data written to file: {data}")
    return {"message": "Data written successfully"}

@app.get("/protected")
async def protected_route(token: str = Depends(oauth2_scheme)):
    return {"message": "This is a protected route", "token": token}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)