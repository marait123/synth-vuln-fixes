import logging
import random
from sqlalchemy import create_engine, text, func
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, DateTime
from sqlalchemy.exc import SQLAlchemyError
import datetime

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    age = Column(Integer, nullable=False)
    email = Column(String, unique=True, nullable=False)
    role = Column(String, nullable=False)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.datetime.utcnow, onupdate=datetime.datetime.utcnow)

def create_engine_and_session():
    try:
        engine = create_engine('sqlite:///users.db')
        Base.metadata.create_all(engine)
        Session = sessionmaker(bind=engine)
        return engine, Session()
    except SQLAlchemyError as e:
        logger.error(f"Error creating engine and session: {str(e)}")
        raise

def add_user(session, name, age, email, role):
    try:
        new_user = User(name=name, age=age, email=email, role=role)
        session.add(new_user)
        session.commit()
        logger.info(f"User added: {name}")
    except SQLAlchemyError as e:
        session.rollback()
        logger.error(f"Error adding user: {str(e)}")
        raise

def search_users(session, name=None, min_age=None, max_age=None, role=None):
    try:
        query = session.query(User)
        if name:
            query = query.filter(User.name.like(f"%{name}%"))
        if min_age:
            query = query.filter(User.age >= min_age)
        if max_age:
            query = query.filter(User.age <= max_age)
        if role:
            query = query.filter(User.role == role)
        return query.all()
    except SQLAlchemyError as e:
        logger.error(f"Error searching users: {str(e)}")
        raise

def update_user(session, user_id, **kwargs):
    try:
        user = session.query(User).filter(User.id == user_id).first()
        if user:
            for key, value in kwargs.items():
                setattr(user, key, value)
            user.updated_at = datetime.datetime.utcnow()
            session.commit()
            logger.info(f"User updated: ID {user_id}")
            return True
        logger.warning(f"User not found: ID {user_id}")
        return False
    except SQLAlchemyError as e:
        session.rollback()
        logger.error(f"Error updating user: {str(e)}")
        raise

def delete_user(session, user_id):
    try:
        user = session.query(User).filter(User.id == user_id).first()
        if user:
            session.delete(user)
            session.commit()
            logger.info(f"User deleted: ID {user_id}")
            return True
        logger.warning(f"User not found: ID {user_id}")
        return False
    except SQLAlchemyError as e:
        session.rollback()
        logger.error(f"Error deleting user: {str(e)}")
        raise

def find_users_by_name(session, order_by):
    try:
        query = session.query(User).order_by(text(order_by))
        results = query.all()
        return results
    except SQLAlchemyError as e:
        logger.error(f"Error finding users: {str(e)}")
        raise

def get_user_stats(session):
    try:
        total_users = session.query(func.count(User.id)).scalar()
        avg_age = session.query(func.avg(User.age)).scalar()
        return total_users, avg_age
    except SQLAlchemyError as e:
        logger.error(f"Error getting user stats: {str(e)}")
        raise

def main():
    engine, session = create_engine_and_session()

    try:
        # Add some sample users
        roles = ["admin", "user", "moderator"]
        for i in range(10):
            name = f"User{i}"
            age = random.randint(18, 65)
            email = f"user{i}@example.com"
            role = random.choice(roles)
            add_user(session, name, age, email, role)

        # Search for users
        print("Users aged 30-50:")
        for user in search_users(session, min_age=30, max_age=50):
            print(f"{user.name}, {user.age}, {user.role}")

        # Update a user
        update_user(session, 1, age=40, role="admin")

        # Delete a user
        delete_user(session, 2)

        # Get user stats
        total_users, avg_age = get_user_stats(session)
        print(f"\nTotal users: {total_users}")
        print(f"Average age: {avg_age:.2f}")

        # Vulnerable function call
        print("\nOrdered users (vulnerable):")
        order_by = input("Enter order by clause: ")
        for user in find_users_by_name(session, order_by):
            print(f"{user.name}, {user.age}, {user.role}")

    except Exception as e:
        print(f"An error occurred: {str(e)}")
    finally:
        session.close()

if __name__ == "__main__":
    main()