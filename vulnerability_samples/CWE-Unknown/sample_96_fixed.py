from sanic import Sanic, response
import sqlite3
import asyncio
import hashlib

app = Sanic("UserApp")

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

@app.route('/register', methods=['POST'])
async def register(request):
    username = request.json.get('username')
    password = request.json.get('password')
    email = request.json.get('email')
    
    if not all([username, password, email]):
        return response.json({"error": "Missing required fields"}, status=400)
    
    hashed_password = hash_password(password)
    
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = "INSERT INTO users (username, password, email) VALUES (?, ?, ?)"
    try:
        cursor.execute(query, (username, hashed_password, email))
        conn.commit()
        return response.json({"message": "User registered successfully"})
    except sqlite3.IntegrityError:
        return response.json({"error": "Username or email already exists"}, status=400)
    finally:
        conn.close()

@app.route('/login', methods=['POST'])
async def login(request):
    username = request.json.get('username')
    password = request.json.get('password')
    
    if not all([username, password]):
        return response.json({"error": "Missing required fields"}, status=400)
    
    hashed_password = hash_password(password)
    
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = "SELECT id FROM users WHERE username = ? AND password = ?"
    cursor.execute(query, (username, hashed_password))
    user = cursor.fetchone()
    conn.close()
    
    if user:
        return response.json({"message": "Login successful", "user_id": user[0]})
    else:
        return response.json({"error": "Invalid credentials"}, status=401)

@app.route('/get_user')
async def get_user(request):
    user_id = request.args.get('user_id')[0]  
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = "SELECT * FROM users WHERE id = ?"
    cursor.execute(query, (user_id,))
    user_data = cursor.fetchone()
    conn.close()
    if user_data:
        return response.json({
            "id": user_data[0],
            "username": user_data[1],
            "email": user_data[3]
        })
    else:
        return response.json({"error": "User not found"}, status=404)

@app.route('/update_email', methods=['PUT'])
async def update_email(request):
    user_id = request.json.get('user_id')
    new_email = request.json.get('new_email')
    
    if not all([user_id, new_email]):
        return response.json({"error": "Missing required fields"}, status=400)
    
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    query = "UPDATE users SET email = ? WHERE id = ?"
    cursor.execute(query, (new_email, user_id))
    conn.commit()
    conn.close()
    
    return response.json({"message": "Email updated successfully"})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)