from flask import Flask, request, render_template_string, redirect, url_for, session
import jinja2
import sqlite3
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
app.secret_key = 'your_secret_key'

def get_db():
    db = sqlite3.connect('blog.db')
    db.row_factory = sqlite3.Row
    return db

def init_db():
    db = get_db()
    db.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT)')
    db.execute('CREATE TABLE IF NOT EXISTS posts (id INTEGER PRIMARY KEY, user_id INTEGER, title TEXT, content TEXT)')
    db.execute('CREATE TABLE IF NOT EXISTS comments (id INTEGER PRIMARY KEY, post_id INTEGER, user_id INTEGER, content TEXT)')
    db.commit()

init_db()

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        db = get_db()
        db.execute('INSERT INTO users (username, password) VALUES (?, ?)',
                   (username, generate_password_hash(password)))
        db.commit()
        return redirect(url_for('login'))
    return render_template_string('''
        <form method="post">
            <input type="text" name="username" required>
            <input type="password" name="password" required>
            <input type="submit" value="Register">
        </form>
    ''')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        db = get_db()
        user = db.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()
        if user and check_password_hash(user['password'], password):
            session['user_id'] = user['id']
            return redirect(url_for('index'))
    return render_template_string('''
        <form method="post">
            <input type="text" name="username" required>
            <input type="password" name="password" required>
            <input type="submit" value="Login">
        </form>
    ''')

@app.route('/')
def index():
    db = get_db()
    posts = db.execute('SELECT posts.*, users.username FROM posts JOIN users ON posts.user_id = users.id').fetchall()
    return render_template_string('''
        <h1>Blog Posts</h1>
        {% for post in posts %}
            <h2>{{ post['title'] }}</h2>
            <p>By {{ post['username'] }}</p>
            <a href="{{ url_for('view_post', post_id=post['id']) }}">Read more</a>
        {% endfor %}
        <a href="{{ url_for('create_post') }}">Create new post</a>
    ''', posts=posts)

@app.route('/post/<int:post_id>')
def view_post(post_id):
    db = get_db()
    post = db.execute('SELECT posts.*, users.username FROM posts JOIN users ON posts.user_id = users.id WHERE posts.id = ?', (post_id,)).fetchone()
    comments = db.execute('SELECT comments.*, users.username FROM comments JOIN users ON comments.user_id = users.id WHERE comments.post_id = ?', (post_id,)).fetchall()
    env = jinja2.Environment(autoescape=True)
    template = env.from_string('''
        <h1>{{ post['title'] }}</h1>
        <p>By {{ post['username'] }}</p>
        <div>{{ post['content'] }}</div>
        <h2>Comments</h2>
        {% for comment in comments %}
            <p>{{ comment['username'] }}: {{ comment['content'] }}</p>
        {% endfor %}
        <form method="post" action="{{ url_for('add_comment', post_id=post['id']) }}">
            <textarea name="content" required></textarea>
            <input type="submit" value="Add Comment">
        </form>
    ''')
    return template.render(post=post, comments=comments)

@app.route('/create_post', methods=['GET', 'POST'])
def create_post():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    if request.method == 'POST':
        title = request.form['title']
        content = request.form['content']
        db = get_db()
        db.execute('INSERT INTO posts (user_id, title, content) VALUES (?, ?, ?)',
                   (session['user_id'], title, content))
        db.commit()
        return redirect(url_for('index'))
    return render_template_string('''
        <form method="post">
            <input type="text" name="title" required>
            <textarea name="content" required></textarea>
            <input type="submit" value="Create Post">
        </form>
    ''')

@app.route('/post/<int:post_id>/comment', methods=['POST'])
def add_comment(post_id):
    if 'user_id' not in session:
        return redirect(url_for('login'))
    content = request.form['content']
    db = get_db()
    db.execute('INSERT INTO comments (post_id, user_id, content) VALUES (?, ?, ?)',
               (post_id, session['user_id'], content))
    db.commit()
    return redirect(url_for('view_post', post_id=post_id))

if __name__ == '__main__':
    app.run(debug=True)