import tornado.ioloop
import tornado.web
import socket
import sqlite3
import logging
import json
import os
import hashlib
import time
from tornado.options import define, options, parse_command_line

# Configuration
CONFIG = {
    "db_path": "messages.db",
    "log_file": "app.log",
    "secret_key": "super_secret_key",
    "socket_port": 1337,
    "web_port": 8888
}

# Set up logging
logging.basicConfig(filename=CONFIG["log_file"], level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Database setup
def init_db():
    conn = sqlite3.connect(CONFIG["db_path"])
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS messages
                 (id INTEGER PRIMARY KEY, content TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT)''')
    conn.commit()
    conn.close()

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# Database operations
def add_user(username, password):
    conn = sqlite3.connect(CONFIG["db_path"])
    c = conn.cursor()
    try:
        c.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, hash_password(password)))
        conn.commit()
        logging.info(f"User {username} added successfully")
    except sqlite3.IntegrityError:
        logging.warning(f"User {username} already exists")
    finally:
        conn.close()

def verify_user(username, password):
    conn = sqlite3.connect(CONFIG["db_path"])
    c = conn.cursor()
    c.execute("SELECT password FROM users WHERE username = ?", (username,))
    result = c.fetchone()
    conn.close()
    if result and result[0] == hash_password(password):
        return True
    return False

# Handlers
class MainHandler(tornado.web.RequestHandler):
    def get(self):
        self.write("Hello, Tornado World!")

class MessageHandler(tornado.web.RequestHandler):
    def get(self):
        conn = sqlite3.connect(CONFIG["db_path"])
        c = conn.cursor()
        c.execute("SELECT * FROM messages ORDER BY timestamp DESC")
        messages = c.fetchall()
        conn.close()
        self.write(json.dumps(messages))

    def post(self):
        content = self.get_argument("content", "")
        if not content:
            self.set_status(400)
            self.write({"status": "error", "message": "Content cannot be empty"})
            return
        conn = sqlite3.connect(CONFIG["db_path"])
        c = conn.cursor()
        c.execute("INSERT INTO messages (content) VALUES (?)", (content,))
        conn.commit()
        conn.close()
        logging.info(f"New message added: {content[:50]}...")
        self.write({"status": "success"})

class AuthHandler(tornado.web.RequestHandler):
    def post(self):
        username = self.get_argument("username", "")
        password = self.get_argument("password", "")
        if verify_user(username, password):
            self.set_secure_cookie("user", username)
            logging.info(f"User {username} logged in")
            self.write({"status": "logged in"})
        else:
            logging.warning(f"Failed login attempt for user {username}")
            self.write({"status": "login failed"})

class RegisterHandler(tornado.web.RequestHandler):
    def post(self):
        username = self.get_argument("username", "")
        password = self.get_argument("password", "")
        if not username or not password:
            self.set_status(400)
            self.write({"status": "error", "message": "Username and password are required"})
            return
        add_user(username, password)
        self.write({"status": "user registered"})

def start_socket():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(('0.0.0.0', CONFIG["socket_port"]))  # Vulnerable line
    s.listen(1)
    logging.info(f"Socket started on 0.0.0.0:{CONFIG['socket_port']}")
    while True:
        conn, addr = s.accept()
        logging.info(f"Connection from {addr}")
        conn.send(b"Welcome to the vulnerable socket server!")
        conn.close()

def make_app():
    return tornado.web.Application([
        (r"/", MainHandler),
        (r"/messages", MessageHandler),
        (r"/auth", AuthHandler),
        (r"/register", RegisterHandler)
    ], cookie_secret=CONFIG["secret_key"])

def main():
    define("port", default=CONFIG["web_port"], help="run on the given port", type=int)
    parse_command_line()
    init_db()
    app = make_app()
    app.listen(options.port)
    logging.info(f"Tornado app started on port {options.port}")
    tornado.ioloop.IOLoop.current().start()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logging.info("Application stopped by user")
    except Exception as e:
        logging.error(f"Unexpected error: {str(e)}")
    finally:
        logging.info("Application shutdown")