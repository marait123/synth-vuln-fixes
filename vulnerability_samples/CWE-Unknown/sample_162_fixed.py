import sqlite3
from flask import Flask, request, jsonify
from werkzeug.security import generate_password_hash, check_password_hash
import jwt
import datetime
import logging

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your-secret-key'

logging.basicConfig(filename='library.log', level=logging.INFO)

def init_db():
    conn = sqlite3.connect('library.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS books
                      (id INTEGER PRIMARY KEY, title TEXT, author TEXT, year INTEGER)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                      (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT)''')
    conn.commit()
    conn.close()

def token_required(f):
    def decorated(*args, **kwargs):
        token = request.headers.get('Authorization')
        if not token:
            return jsonify({'message': 'Token is missing!'}), 401
        try:
            data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=["HS256"])
        except:
            return jsonify({'message': 'Token is invalid!'}), 401
        return f(*args, **kwargs)
    return decorated

@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    hashed_password = generate_password_hash(data['password'], method='sha256')
    conn = sqlite3.connect('library.db')
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (data['username'], hashed_password))
        conn.commit()
        return jsonify({'message': 'Registered successfully'}), 201
    except sqlite3.IntegrityError:
        return jsonify({'message': 'Username already exists'}), 400
    finally:
        conn.close()

@app.route('/login', methods=['POST'])
def login():
    auth = request.authorization
    if not auth or not auth.username or not auth.password:
        return jsonify({'message': 'Could not verify'}), 401
    conn = sqlite3.connect('library.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE username=?", (auth.username,))
    user = cursor.fetchone()
    conn.close()
    if user and check_password_hash(user[2], auth.password):
        token = jwt.encode({'user': auth.username, 'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=24)},
                           app.config['SECRET_KEY'], algorithm="HS256")
        return jsonify({'token': token})
    return jsonify({'message': 'Could not verify'}), 401

@app.route('/get_books', methods=['GET'])
@token_required
def get_books():
    author = request.args.get('author')
    year = request.args.get('year')
    conn = sqlite3.connect('library.db')
    cursor = conn.cursor()
    query = "SELECT * FROM books WHERE author = ? AND year = ?"
    cursor.execute(query, (author, year))
    books = cursor.fetchall()
    conn.close()
    return jsonify(books)

@app.route('/add_book', methods=['POST'])
@token_required
def add_book():
    data = request.get_json()
    conn = sqlite3.connect('library.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO books (title, author, year) VALUES (?, ?, ?)",
                   (data['title'], data['author'], data['year']))
    conn.commit()
    conn.close()
    logging.info(f"Book added: {data['title']} by {data['author']}")
    return jsonify({'message': 'Book added successfully'}), 201

@app.route('/book/<int:book_id>', methods=['GET'])
@token_required
def get_book(book_id):
    conn = sqlite3.connect('library.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM books WHERE id = ?", (book_id,))
    book = cursor.fetchone()
    conn.close()
    if book:
        return jsonify({'id': book[0], 'title': book[1], 'author': book[2], 'year': book[3]})
    return jsonify({'message': 'Book not found'}), 404

if __name__ == '__main__':
    init_db()
    app.run(debug=True)