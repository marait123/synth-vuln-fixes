from fastapi import FastAPI, UploadFile, File, HTTPException
import defusedxml.ElementTree as ET
from typing import List, Dict
import json

app = FastAPI()

# Simulated database of flights
flights_db: List[Dict] = [
    {"id": 1, "from": "New York", "to": "London", "date": "2023-07-01", "seats": 100},
    {"id": 2, "from": "London", "to": "Paris", "date": "2023-07-02", "seats": 150},
    {"id": 3, "from": "Tokyo", "to": "Sydney", "date": "2023-07-03", "seats": 200},
]

@app.get("/search_flights")
async def search_flights(from_city: str, to_city: str, date: str):
    matching_flights = [
        flight for flight in flights_db
        if flight["from"] == from_city and flight["to"] == to_city and flight["date"] == date
    ]
    return {"flights": matching_flights}

@app.post("/book_flight")
async def book_flight(file: UploadFile = File(...)):
    xml_data = await file.read()
    try:
        booking_details = ET.fromstring(xml_data)
        flight_id = int(booking_details.find("flight_id").text)
        passenger_name = booking_details.find("passenger_name").text
        passport_number = booking_details.find("passport_number").text
    except (ET.ParseError, AttributeError, ValueError) as e:
        raise HTTPException(status_code=400, detail="Invalid XML data")

    # Find the flight and update seats
    for flight in flights_db:
        if flight["id"] == flight_id:
            if flight["seats"] > 0:
                flight["seats"] -= 1
                return {
                    "message": "Flight booked successfully",
                    "booking_details": {
                        "flight_id": flight_id,
                        "passenger_name": passenger_name,
                        "passport_number": passport_number,
                    }
                }
            else:
                raise HTTPException(status_code=400, detail="No seats available")
    
    raise HTTPException(status_code=404, detail="Flight not found")

@app.get("/flight/{flight_id}")
async def get_flight(flight_id: int):
    for flight in flights_db:
        if flight["id"] == flight_id:
            return flight
    raise HTTPException(status_code=404, detail="Flight not found")

@app.put("/update_flight/{flight_id}")
async def update_flight(flight_id: int, updated_flight: dict):
    for i, flight in enumerate(flights_db):
        if flight["id"] == flight_id:
            flights_db[i].update(updated_flight)
            return {"message": "Flight updated successfully"}
    raise HTTPException(status_code=404, detail="Flight not found")