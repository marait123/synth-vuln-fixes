import logging
from django.core.mail import EmailMessage
from django.template.loader import render_to_string
from django.http import HttpRequest, JsonResponse
from django.contrib.auth.models import User
from django.db import models
from django.views.decorators.http import require_http_methods
from django.views.decorators.csrf import csrf_exempt
import json
import re

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class EmailTemplate(models.Model):
    name = models.CharField(max_length=100, unique=True)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name

class EmailLog(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    template = models.ForeignKey(EmailTemplate, on_delete=models.SET_NULL, null=True)
    subject = models.CharField(max_length=200)
    status = models.CharField(max_length=20)
    message = models.TextField()
    sent_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user.username} - {self.subject} - {self.status}"

def get_email_template(template_name):
    try:
        return EmailTemplate.objects.get(name=template_name).content
    except EmailTemplate.DoesNotExist:
        return None

def validate_input(data):
    required_keys = ['subject', 'template', 'user_id', 'message']
    if not all(key in data for key in required_keys):
        return False
    if not re.match(r'^[\w\s]+$', data['subject']):
        return False
    if not isinstance(data['user_id'], int):
        return False
    return True

def sanitize_input(data):
    return {k: v.strip() if isinstance(v, str) else v for k, v in data.items()}

def log_email_attempt(user_id, status, message, template_name=None, subject=None):
    user = User.objects.get(pk=user_id)
    template = EmailTemplate.objects.filter(name=template_name).first()
    EmailLog.objects.create(
        user=user,
        template=template,
        subject=subject,
        status=status,
        message=message
    )
    logging.info(f"Email attempt - User ID: {user_id}, Status: {status}, Message: {message}")

@csrf_exempt
@require_http_methods(["POST"])
def send_notification_email(request: HttpRequest):
    try:
        data = json.loads(request.body)
        if not validate_input(data):
            return JsonResponse({'status': 'error', 'message': 'Invalid input data'}, status=400)

        data = sanitize_input(data)
        subject = data['subject']
        template_name = data['template']
        user_id = data['user_id']
        message = data['message']

        try:
            user = User.objects.get(pk=user_id)
        except User.DoesNotExist:
            log_email_attempt(user_id, 'error', 'User not found')
            return JsonResponse({'status': 'error', 'message': 'User not found'}, status=404)

        template_content = get_email_template(template_name)
        if template_content is None:
            log_email_attempt(user_id, 'error', 'Template not found', template_name, subject)
            return JsonResponse({'status': 'error', 'message': 'Email template not found'}, status=404)

        try:
            email_body = render_to_string('email_template.html', {
                'username': user.username,
                'content': message,
                'custom_template': template_content
            })
        except Exception as e:
            log_email_attempt(user_id, 'error', f'Template rendering failed: {str(e)}', template_name, subject)
            return JsonResponse({'status': 'error', 'message': 'Failed to render email template'}, status=500)

        try:
            email = EmailMessage(subject, email_body, to=[user.email])
            email.content_subtype = "html"
            email.send()
        except Exception as e:
            log_email_attempt(user_id, 'error', f'Email sending failed: {str(e)}', template_name, subject)
            return JsonResponse({'status': 'error', 'message': 'Failed to send email'}, status=500)

        log_email_attempt(user_id, 'success', 'Email sent', template_name, subject)
        return JsonResponse({'status': 'success', 'message': 'Email sent to user'})

    except json.JSONDecodeError:
        return JsonResponse({'status': 'error', 'message': 'Invalid JSON in request body'}, status=400)
    except Exception as e:
        logging.error(f"Unexpected error in send_notification_email: {str(e)}")
        return JsonResponse({'status': 'error', 'message': 'An unexpected error occurred'}, status=500)

def create_email_template(name, content):
    try:
        template = EmailTemplate.objects.create(name=name, content=content)
        return {'status': 'success', 'message': 'Email template created', 'id': template.id}
    except Exception as e:
        logging.error(f"Failed to create email template: {str(e)}")
        return {'status': 'error', 'message': 'Failed to create email template'}

def update_email_template(template_id, name=None, content=None):
    try:
        template = EmailTemplate.objects.get(pk=template_id)
        if name:
            template.name = name
        if content:
            template.content = content
        template.save()
        return {'status': 'success', 'message': 'Email template updated'}
    except EmailTemplate.DoesNotExist:
        return {'status': 'error', 'message': 'Email template not found'}
    except Exception as e:
        logging.error(f"Failed to update email template: {str(e)}")
        return {'status': 'error', 'message': 'Failed to update email template'}

def delete_email_template(template_id):
    try:
        template = EmailTemplate.objects.get(pk=template_id)
        template.delete()
        return {'status': 'success', 'message': 'Email template deleted'}
    except EmailTemplate.DoesNotExist:
        return {'status': 'error', 'message': 'Email template not found'}
    except Exception as e:
        logging.error(f"Failed to delete email template: {str(e)}")
        return {'status': 'error', 'message': 'Failed to delete email template'}

if __name__ == "__main__":
    # Test the functionality
    test_template = create_email_template("Test Template", "<p>Hello, {{username}}! {{content}}</p>")
    print(test_template)

    test_update = update_email_template(1, content="<p>Updated: Hello, {{username}}! {{content}}</p>")
    print(test_update)

    test_delete = delete_email_template(1)
    print(test_delete)