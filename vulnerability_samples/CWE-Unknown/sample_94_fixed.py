from flask import Flask, request, render_template, redirect, url_for, session
from sqlalchemy import create_engine, text
from werkzeug.security import generate_password_hash, check_password_hash
import os

app = Flask(__name__)
app.secret_key = os.urandom(24)

engine = create_engine("your_database_connection_string")

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        conn = engine.connect()
        result = conn.execute(text("SELECT * FROM users WHERE username = :username"), {"username": username}).fetchone()
        if result and check_password_hash(result['password'], password):
            session['user_id'] = result['id']
            session['is_admin'] = result['is_admin']
            return redirect(url_for('dashboard'))
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        hashed_password = generate_password_hash(password)
        conn = engine.connect()
        conn.execute(text("INSERT INTO users (username, password) VALUES (:username, :password)"),
                     {"username": username, "password": hashed_password})
        return redirect(url_for('login'))
    return render_template('register.html')

@app.route('/dashboard')
def dashboard():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    return render_template('dashboard.html')

@app.route('/search')
def search():
    query = request.args.get('query')
    conn = engine.connect()
    results = conn.execute(text("SELECT * FROM products WHERE name = :name"), {"name": query}).fetchall()
    return render_template('search_results.html', results=results)

@app.route('/admin/products')
def admin_products():
    if 'user_id' not in session or not session['is_admin']:
        return redirect(url_for('login'))
    conn = engine.connect()
    products = conn.execute(text("SELECT * FROM products")).fetchall()
    return render_template('admin_products.html', products=products)

@app.route('/admin/products/add', methods=['GET', 'POST'])
def add_product():
    if 'user_id' not in session or not session['is_admin']:
        return redirect(url_for('login'))
    if request.method == 'POST':
        name = request.form['name']
        price = request.form['price']
        conn = engine.connect()
        conn.execute(text("INSERT INTO products (name, price) VALUES (:name, :price)"),
                     {"name": name, "price": price})
        return redirect(url_for('admin_products'))
    return render_template('add_product.html')

@app.route('/admin/products/edit/<int:product_id>', methods=['GET', 'POST'])
def edit_product(product_id):
    if 'user_id' not in session or not session['is_admin']:
        return redirect(url_for('login'))
    conn = engine.connect()
    if request.method == 'POST':
        name = request.form['name']
        price = request.form['price']
        conn.execute(text("UPDATE products SET name = :name, price = :price WHERE id = :id"),
                     {"name": name, "price": price, "id": product_id})
        return redirect(url_for('admin_products'))
    product = conn.execute(text("SELECT * FROM products WHERE id = :id"), {"id": product_id}).fetchone()
    return render_template('edit_product.html', product=product)

@app.route('/admin/products/delete/<int:product_id>')
def delete_product(product_id):
    if 'user_id' not in session or not session['is_admin']:
        return redirect(url_for('login'))
    conn = engine.connect()
    conn.execute(text("DELETE FROM products WHERE id = :id"), {"id": product_id})
    return redirect(url_for('admin_products'))

if __name__ == '__main__':
    app.run(debug=True)