from flask import Flask, request, render_template_string, redirect, url_for, session, flash
import jinja2
import sqlite3
import logging
from werkzeug.security import generate_password_hash, check_password_hash
from functools import wraps

app = Flask(__name__)
app.secret_key = 'your_secret_key'
logging.basicConfig(level=logging.INFO)

class DatabaseError(Exception):
    pass

def get_db():
    try:
        db = sqlite3.connect('blog.db')
        db.row_factory = sqlite3.Row
        return db
    except sqlite3.Error as e:
        logging.error(f"Database connection error: {e}")
        raise DatabaseError("Unable to connect to the database")

def init_db():
    try:
        db = get_db()
        db.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT)')
        db.execute('CREATE TABLE IF NOT EXISTS posts (id INTEGER PRIMARY KEY, user_id INTEGER, title TEXT, content TEXT)')
        db.execute('CREATE TABLE IF NOT EXISTS comments (id INTEGER PRIMARY KEY, post_id INTEGER, user_id INTEGER, content TEXT)')
        db.commit()
    except sqlite3.Error as e:
        logging.error(f"Database initialization error: {e}")
        raise DatabaseError("Failed to initialize the database")

init_db()

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            flash('Please log in to access this page', 'error')
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        try:
            db = get_db()
            db.execute('INSERT INTO users (username, password) VALUES (?, ?)',
                       (username, generate_password_hash(password)))
            db.commit()
            flash('Registration successful', 'success')
            return redirect(url_for('login'))
        except sqlite3.IntegrityError:
            flash('Username already exists', 'error')
        except DatabaseError as e:
            flash(str(e), 'error')
    return render_template_string('''
        <form method="post">
            <input type="text" name="username" required>
            <input type="password" name="password" required>
            <input type="submit" value="Register">
        </form>
    ''')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        try:
            db = get_db()
            user = db.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()
            if user and check_password_hash(user['password'], password):
                session['user_id'] = user['id']
                flash('Login successful', 'success')
                return redirect(url_for('index'))
            else:
                flash('Invalid username or password', 'error')
        except DatabaseError as e:
            flash(str(e), 'error')
    return render_template_string('''
        <form method="post">
            <input type="text" name="username" required>
            <input type="password" name="password" required>
            <input type="submit" value="Login">
        </form>
    ''')

@app.route('/logout')
def logout():
    session.pop('user_id', None)
    flash('You have been logged out', 'info')
    return redirect(url_for('index'))

@app.route('/')
def index():
    try:
        db = get_db()
        posts = db.execute('SELECT posts.*, users.username FROM posts JOIN users ON posts.user_id = users.id').fetchall()
        return render_template_string('''
            <h1>Blog Posts</h1>
            {% for post in posts %}
                <h2>{{ post['title'] }}</h2>
                <p>By {{ post['username'] }}</p>
                <a href="{{ url_for('view_post', post_id=post['id']) }}">Read more</a>
            {% endfor %}
            <a href="{{ url_for('create_post') }}">Create new post</a>
            {% if 'user_id' in session %}
                <a href="{{ url_for('logout') }}">Logout</a>
            {% else %}
                <a href="{{ url_for('login') }}">Login</a>
            {% endif %}
        ''', posts=posts)
    except DatabaseError as e:
        flash(str(e), 'error')
        return redirect(url_for('index'))

@app.route('/post/<int:post_id>')
def view_post(post_id):
    try:
        db = get_db()
        post = db.execute('SELECT posts.*, users.username FROM posts JOIN users ON posts.user_id = users.id WHERE posts.id = ?', (post_id,)).fetchone()
        comments = db.execute('SELECT comments.*, users.username FROM comments JOIN users ON comments.user_id = users.id WHERE comments.post_id = ?', (post_id,)).fetchall()
        env = jinja2.Environment(autoescape=False)
        template = env.from_string('''
            <h1>{{ post['title'] }}</h1>
            <p>By {{ post['username'] }}</p>
            <div>{{ post['content'] }}</div>
            <h2>Comments</h2>
            {% for comment in comments %}
                <p>{{ comment['username'] }}: {{ comment['content'] }}</p>
            {% endfor %}
            <form method="post" action="{{ url_for('add_comment', post_id=post['id']) }}">
                <textarea name="content" required></textarea>
                <input type="submit" value="Add Comment">
            </form>
        ''')
        return template.render(post=post, comments=comments)
    except DatabaseError as e:
        flash(str(e), 'error')
        return redirect(url_for('index'))

@app.route('/create_post', methods=['GET', 'POST'])
@login_required
def create_post():
    if request.method == 'POST':
        title = request.form['title']
        content = request.form['content']
        try:
            db = get_db()
            db.execute('INSERT INTO posts (user_id, title, content) VALUES (?, ?, ?)',
                       (session['user_id'], title, content))
            db.commit()
            flash('Post created successfully', 'success')
            return redirect(url_for('index'))
        except DatabaseError as e:
            flash(str(e), 'error')
    return render_template_string('''
        <form method="post">
            <input type="text" name="title" required>
            <textarea name="content" required></textarea>
            <input type="submit" value="Create Post">
        </form>
    ''')

@app.route('/post/<int:post_id>/comment', methods=['POST'])
@login_required
def add_comment(post_id):
    content = request.form['content']
    try:
        db = get_db()
        db.execute('INSERT INTO comments (post_id, user_id, content) VALUES (?, ?, ?)',
                   (post_id, session['user_id'], content))
        db.commit()
        flash('Comment added successfully', 'success')
    except DatabaseError as e:
        flash(str(e), 'error')
    return redirect(url_for('view_post', post_id=post_id))

@app.route('/post/<int:post_id>/edit', methods=['GET', 'POST'])
@login_required
def edit_post(post_id):
    try:
        db = get_db()
        post = db.execute('SELECT * FROM posts WHERE id = ?', (post_id,)).fetchone()
        if post['user_id'] != session['user_id']:
            flash('You do not have permission to edit this post', 'error')
            return redirect(url_for('view_post', post_id=post_id))
        if request.method == 'POST':
            title = request.form['title']
            content = request.form['content']
            db.execute('UPDATE posts SET title = ?, content = ? WHERE id = ?',
                       (title, content, post_id))
            db.commit()
            flash('Post updated successfully', 'success')
            return redirect(url_for('view_post', post_id=post_id))
        return render_template_string('''
            <form method="post">
                <input type="text" name="title" value="{{ post['title'] }}" required>
                <textarea name="content" required>{{ post['content'] }}</textarea>
                <input type="submit" value="Update Post">
            </form>
        ''', post=post)
    except DatabaseError as e:
        flash(str(e), 'error')
        return redirect(url_for('index'))

@app.route('/post/<int:post_id>/delete', methods=['POST'])
@login_required
def delete_post(post_id):
    try:
        db = get_db()
        post = db.execute('SELECT * FROM posts WHERE id = ?', (post_id,)).fetchone()
        if post['user_id'] != session['user_id']:
            flash('You do not have permission to delete this post', 'error')
            return redirect(url_for('view_post', post_id=post_id))
        db.execute('DELETE FROM posts WHERE id = ?', (post_id,))
        db.execute('DELETE FROM comments WHERE post_id = ?', (post_id,))
        db.commit()
        flash('Post deleted successfully', 'success')
        return redirect(url_for('index'))
    except DatabaseError as e:
        flash(str(e), 'error')
        return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(debug=True)