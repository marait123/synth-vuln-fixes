import tornado.ioloop
import tornado.web
import socket
import sqlite3
import logging
import json
import os

# Configuration
CONFIG = {
    "db_path": "messages.db",
    "log_file": "app.log",
    "secret_key": os.environ.get("SECRET_KEY", "super_secret_key")
}

# Set up logging
logging.basicConfig(filename=CONFIG["log_file"], level=logging.INFO)

# Database setup
def init_db():
    conn = sqlite3.connect(CONFIG["db_path"])
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS messages
                 (id INTEGER PRIMARY KEY, content TEXT)''')
    conn.commit()
    conn.close()

# Handlers
class MainHandler(tornado.web.RequestHandler):
    def get(self):
        self.write("Hello, Tornado World!")

class MessageHandler(tornado.web.RequestHandler):
    def get(self):
        conn = sqlite3.connect(CONFIG["db_path"])
        c = conn.cursor()
        c.execute("SELECT * FROM messages")
        messages = c.fetchall()
        conn.close()
        self.write(json.dumps(messages))

    def post(self):
        content = self.get_argument("content", "")
        conn = sqlite3.connect(CONFIG["db_path"])
        c = conn.cursor()
        c.execute("INSERT INTO messages (content) VALUES (?)", (content,))
        conn.commit()
        conn.close()
        self.write({"status": "success"})

class AuthHandler(tornado.web.RequestHandler):
    def post(self):
        username = self.get_argument("username", "")
        password = self.get_argument("password", "")
        if username == "admin" and password == "password":
            self.set_secure_cookie("user", username)
            self.write({"status": "logged in"})
        else:
            self.write({"status": "login failed"})

def start_socket():
    host = os.environ.get('HOST_ADDRESS', '127.0.0.1')
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind((host, 1337))  # Fixed line
    logging.info(f"Socket started on {host}:1337")

def make_app():
    return tornado.web.Application([
        (r"/", MainHandler),
        (r"/messages", MessageHandler),
        (r"/auth", AuthHandler)
    ], cookie_secret=CONFIG["secret_key"])

if __name__ == "__main__":
    init_db()
    start_socket()
    app = make_app()
    app.listen(8888)
    logging.info("Tornado app started on port 8888")
    tornado.ioloop.IOLoop.current().start()