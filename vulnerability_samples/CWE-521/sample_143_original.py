import random
import string
from django.contrib.auth.models import User
from django.core.mail import send_mail
from django.db import models
import logging
from django.core.exceptions import ValidationError
from django.core.validators import validate_email
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.views import View
import json

logger = logging.getLogger(__name__)

class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    phone_number = models.CharField(max_length=15, blank=True)
    address = models.TextField(blank=True)

    def __str__(self):
        return f"Profile for {self.user.username}"

def generate_temp_password(length=10):
    characters = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(characters) for _ in range(length))

def send_welcome_email(email, temp_password):
    try:
        send_mail(
            'Welcome to the Platform',
            f'Your account has been created. Your temporary password is: {temp_password}',
            'from@example.com',
            [email],
            fail_silently=False,
        )
        logger.info(f"Welcome email sent to {email}")
    except Exception as e:
        logger.error(f"Failed to send welcome email to {email}: {str(e)}")

def validate_user_input(username, email):
    if not username or not email:
        return False
    try:
        validate_email(email)
    except ValidationError:
        return False
    if User.objects.filter(username=username).exists():
        return False
    if User.objects.filter(email=email).exists():
        return False
    return True

def log_registration_attempt(username, email, success):
    logger.info(f"Registration attempt: username={username}, email={email}, success={success}")

def register_new_user(username, email, phone_number='', address=''):
    if not validate_user_input(username, email):
        log_registration_attempt(username, email, False)
        return "Invalid input or user already exists"

    new_password = ""  # Vulnerable: Setting an empty password
    try:
        new_user = User.objects.create_user(username=username, email=email)
        new_user.set_password(new_password)
        new_user.save()

        UserProfile.objects.create(user=new_user, phone_number=phone_number, address=address)

        temp_password = generate_temp_password()
        send_welcome_email(email, temp_password)

        log_registration_attempt(username, email, True)
        return new_user
    except Exception as e:
        logger.error(f"Error during user registration: {str(e)}")
        return None

def get_user_profile(user_id):
    try:
        return UserProfile.objects.get(user_id=user_id)
    except UserProfile.DoesNotExist:
        logger.warning(f"Profile not found for user_id: {user_id}")
        return None

def update_user_profile(user_id, phone_number=None, address=None):
    profile = get_user_profile(user_id)
    if profile:
        if phone_number:
            profile.phone_number = phone_number
        if address:
            profile.address = address
        profile.save()
        logger.info(f"Profile updated for user_id: {user_id}")
        return True
    return False

def delete_user_account(user_id):
    try:
        user = User.objects.get(id=user_id)
        username = user.username
        user.delete()
        logger.info(f"User account deleted: {username}")
        return True
    except User.DoesNotExist:
        logger.warning(f"Attempted to delete non-existent user: {user_id}")
        return False

@method_decorator(csrf_exempt, name='dispatch')
class UserRegistrationView(View):
    def post(self, request):
        try:
            data = json.loads(request.body)
            username = data.get('username')
            email = data.get('email')
            phone_number = data.get('phone_number', '')
            address = data.get('address', '')

            user = register_new_user(username, email, phone_number, address)
            if isinstance(user, User):
                return JsonResponse({"status": "success", "message": "User registered successfully"})
            else:
                return JsonResponse({"status": "error", "message": user}, status=400)
        except json.JSONDecodeError:
            return JsonResponse({"status": "error", "message": "Invalid JSON"}, status=400)
        except Exception as e:
            logger.error(f"Error in UserRegistrationView: {str(e)}")
            return JsonResponse({"status": "error", "message": "Internal server error"}, status=500)

# Test cases
def run_tests():
    # Test user registration
    test_user = register_new_user("testuser", "test@example.com", "1234567890", "123 Test St")
    assert isinstance(test_user, User), "User registration failed"

    # Test invalid registration
    result = register_new_user("", "invalid_email", "", "")
    assert result == "Invalid input or user already exists", "Invalid input not caught"

    # Test profile retrieval
    profile = get_user_profile(test_user.id)
    assert profile is not None, "Profile retrieval failed"

    # Test profile update
    assert update_user_profile(test_user.id, "9876543210", "456 New St"), "Profile update failed"

    # Test account deletion
    assert delete_user_account(test_user.id), "Account deletion failed"

    print("All tests passed successfully!")

if __name__ == "__main__":
    run_tests()