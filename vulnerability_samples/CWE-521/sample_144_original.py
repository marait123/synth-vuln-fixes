import uuid
import hashlib
import re
import logging
from django.contrib.auth.models import User
from django.core.exceptions import ObjectDoesNotExist
from django.db import IntegrityError

token_store = {}
user_profiles = {}

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class WeakPasswordError(Exception):
    pass

class UserAlreadyExistsError(Exception):
    pass

def generate_reset_token(username):
    try:
        user = User.objects.get(username=username)
        reset_token = str(uuid.uuid4())
        hashed_token = hashlib.sha256(reset_token.encode()).hexdigest()
        token_store[user.username] = hashed_token
        logging.info(f"Reset token generated for user: {username}")
        return reset_token
    except ObjectDoesNotExist:
        logging.warning(f"User not found: {username}")
        return "User not found"

def reset_password(username, token, new_password=''):
    try:
        hashed_token = hashlib.sha256(token.encode()).hexdigest()
        if token_store.get(username) == hashed_token:
            user = User.objects.get(username=username)
            user.set_password(new_password)
            user.save()
            del token_store[username]
            logging.info(f"Password reset successful for user: {username}")
            return "Password reset successful"
        else:
            logging.warning(f"Invalid token for password reset: {username}")
            return "Invalid token"
    except ObjectDoesNotExist:
        logging.error(f"User not found during password reset: {username}")
        return "User not found"

def register_user(username, password, email):
    try:
        if User.objects.filter(username=username).exists():
            raise UserAlreadyExistsError("Username already exists")
        if not check_password_strength(password):
            raise WeakPasswordError("Password is too weak")
        user = User.objects.create_user(username=username, password=password, email=email)
        user_profiles[username] = {"email": email}
        logging.info(f"User registered successfully: {username}")
        return "User registered successfully"
    except UserAlreadyExistsError as e:
        logging.warning(str(e))
        return str(e)
    except WeakPasswordError as e:
        logging.warning(str(e))
        return str(e)
    except IntegrityError:
        logging.error(f"Database integrity error during user registration: {username}")
        return "Registration failed due to database error"

def check_password_strength(password):
    if len(password) < 8:
        return False
    if not re.search("[a-z]", password):
        return False
    if not re.search("[A-Z]", password):
        return False
    if not re.search("[0-9]", password):
        return False
    return True

def change_password(username, old_password, new_password):
    try:
        user = User.objects.get(username=username)
        if user.check_password(old_password):
            if check_password_strength(new_password):
                user.set_password(new_password)
                user.save()
                logging.info(f"Password changed successfully for user: {username}")
                return "Password changed successfully"
            else:
                logging.warning(f"Weak new password attempt for user: {username}")
                return "New password is too weak"
        else:
            logging.warning(f"Incorrect old password for user: {username}")
            return "Incorrect old password"
    except ObjectDoesNotExist:
        logging.error(f"User not found during password change: {username}")
        return "User not found"

def validate_credentials(username, password):
    try:
        user = User.objects.get(username=username)
        if user.check_password(password):
            logging.info(f"Credentials validated for user: {username}")
            return True
        logging.warning(f"Invalid password for user: {username}")
        return False
    except ObjectDoesNotExist:
        logging.warning(f"User not found during credential validation: {username}")
        return False

def update_user_profile(username, new_email=None, new_name=None):
    if username not in user_profiles:
        logging.warning(f"User profile not found: {username}")
        return "User profile not found"
    if new_email:
        user_profiles[username]["email"] = new_email
    if new_name:
        user_profiles[username]["name"] = new_name
    logging.info(f"Profile updated successfully for user: {username}")
    return "Profile updated successfully"

def get_user_profile(username):
    profile = user_profiles.get(username)
    if profile:
        logging.info(f"User profile retrieved for: {username}")
        return profile
    logging.warning(f"User profile not found: {username}")
    return "User profile not found"

def delete_user(username):
    try:
        user = User.objects.get(username=username)
        user.delete()
        if username in user_profiles:
            del user_profiles[username]
        logging.info(f"User deleted: {username}")
        return "User deleted successfully"
    except ObjectDoesNotExist:
        logging.warning(f"User not found for deletion: {username}")
        return "User not found"

def list_all_users():
    users = User.objects.all()
    user_list = [user.username for user in users]
    logging.info("User list retrieved")
    return user_list

def main():
    while True:
        print("\n1. Register User")
        print("2. Change Password")
        print("3. Reset Password")
        print("4. Update Profile")
        print("5. Get User Profile")
        print("6. Delete User")
        print("7. List All Users")
        print("8. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            username = input("Enter username: ")
            password = input("Enter password: ")
            email = input("Enter email: ")
            print(register_user(username, password, email))
        elif choice == '2':
            username = input("Enter username: ")
            old_password = input("Enter old password: ")
            new_password = input("Enter new password: ")
            print(change_password(username, old_password, new_password))
        elif choice == '3':
            username = input("Enter username: ")
            token = generate_reset_token(username)
            if token != "User not found":
                new_password = input("Enter new password: ")
                print(reset_password(username, token, new_password))
            else:
                print(token)
        elif choice == '4':
            username = input("Enter username: ")
            new_email = input("Enter new email (or press enter to skip): ")
            new_name = input("Enter new name (or press enter to skip): ")
            print(update_user_profile(username, new_email, new_name))
        elif choice == '5':
            username = input("Enter username: ")
            print(get_user_profile(username))
        elif choice == '6':
            username = input("Enter username to delete: ")
            print(delete_user(username))
        elif choice == '7':
            print("All users:", list_all_users())
        elif choice == '8':
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()