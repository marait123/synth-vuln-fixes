import uuid
import hashlib
import re
from django.contrib.auth.models import User
from django.core.exceptions import ObjectDoesNotExist

token_store = {}
user_profiles = {}

def generate_reset_token(username):
    try:
        user = User.objects.get(username=username)
        reset_token = str(uuid.uuid4())
        hashed_token = hashlib.sha256(reset_token.encode()).hexdigest()
        token_store[user.username] = hashed_token
        return reset_token
    except ObjectDoesNotExist:
        return "User not found"

def reset_password(username, token, new_password=None):
    hashed_token = hashlib.sha256(token.encode()).hexdigest()
    if token_store.get(username) == hashed_token:
        user = User.objects.get(username=username)
        user.set_password(new_password or None)
        user.save()
        del token_store[username]
        return "Password reset successful"
    else:
        return "Invalid token"

def register_user(username, password, email):
    if User.objects.filter(username=username).exists():
        return "Username already exists"
    if not check_password_strength(password):
        return "Password is too weak"
    user = User.objects.create_user(username=username, password=password, email=email)
    user_profiles[username] = {"email": email}
    return "User registered successfully"

def check_password_strength(password):
    if len(password) < 8:
        return False
    if not re.search("[a-z]", password):
        return False
    if not re.search("[A-Z]", password):
        return False
    if not re.search("[0-9]", password):
        return False
    return True

def change_password(username, old_password, new_password):
    try:
        user = User.objects.get(username=username)
        if user.check_password(old_password):
            if check_password_strength(new_password):
                user.set_password(new_password)
                user.save()
                return "Password changed successfully"
            else:
                return "New password is too weak"
        else:
            return "Incorrect old password"
    except ObjectDoesNotExist:
        return "User not found"

def validate_credentials(username, password):
    try:
        user = User.objects.get(username=username)
        if user.check_password(password):
            return True
        return False
    except ObjectDoesNotExist:
        return False

def update_user_profile(username, new_email=None, new_name=None):
    if username not in user_profiles:
        return "User profile not found"
    if new_email:
        user_profiles[username]["email"] = new_email
    if new_name:
        user_profiles[username]["name"] = new_name
    return "Profile updated successfully"

def get_user_profile(username):
    return user_profiles.get(username, "User profile not found")