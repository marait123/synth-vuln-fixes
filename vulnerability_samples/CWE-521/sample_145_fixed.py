import logging
from django.contrib.auth.models import User
from django.views.decorators.http import require_http_methods
from django.http import JsonResponse
from django.core.exceptions import ValidationError
from django.contrib.auth.password_validation import validate_password
from django.core.mail import send_mail
from django.conf import settings

logger = logging.getLogger(__name__)

def check_password_strength(password):
    if len(password) < 12:
        raise ValidationError("Password must be at least 12 characters long")
    if not any(char.isdigit() for char in password):
        raise ValidationError("Password must contain at least one number")
    if not any(char.isupper() for char in password):
        raise ValidationError("Password must contain at least one uppercase letter")
    if not any(char.islower() for char in password):
        raise ValidationError("Password must contain at least one lowercase letter")
    if not any(char in "!@#$%^&*()_+-=[]{}|;:,.<>?" for char in password):
        raise ValidationError("Password must contain at least one special character")

def check_password_history(user, new_password):
    # Check last 5 passwords
    for password in user.password_history.all()[:5]:
        if user.check_password(password.password):
            raise ValidationError("New password must not match any of your last 5 passwords")

def send_password_change_notification(user):
    subject = "Password Change Notification"
    message = f"Dear {user.username},\n\nYour password has been successfully changed. If you did not initiate this change, please contact support immediately.\n\nBest regards,\nYour App Team"
    from_email = settings.DEFAULT_FROM_EMAIL
    recipient_list = [user.email]
    send_mail(subject, message, from_email, recipient_list)

@require_http_methods(["POST"])
def api_reset_password_secure(request, user_id):
    try:
        new_password = request.POST.get('new_password', None)  # Fixed line
        if new_password is None:
            raise ValidationError("New password is required")
        
        user = User.objects.get(pk=user_id)
        
        check_password_strength(new_password)
        check_password_history(user, new_password)
        
        if user.last_login and (user.last_login.date() == user.date_joined.date()):
            raise ValidationError("Cannot change password on the day of joining")
        
        validate_password(new_password, user=user)
        user.set_password(new_password)
        user.save()
        
        # Update password history
        user.password_history.create(password=new_password)
        if user.password_history.count() > 5:
            user.password_history.earliest('created_at').delete()
        
        send_password_change_notification(user)
        
        logger.info(f"Password changed successfully for user {user.username}")
        return JsonResponse({'status': 'success'})
    except User.DoesNotExist:
        logger.warning(f"Attempt to change password for non-existent user ID: {user_id}")
        return JsonResponse({'error': 'User not found'}, status=404)
    except ValidationError as e:
        logger.warning(f"Password change validation error for user {user_id}: {str(e)}")
        return JsonResponse({'error': str(e)}, status=400)
    except Exception as e:
        logger.error(f"Unexpected error during password change for user {user_id}: {str(e)}")
        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)