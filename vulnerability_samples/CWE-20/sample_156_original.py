from django.db import models
from django import forms
from django.http import JsonResponse, HttpResponseBadRequest
from django.views.decorators.http import require_POST, require_GET
from django.contrib.auth.decorators import login_required
from django.shortcuts import render, get_object_or_404
from django.utils import timezone
from django.core.exceptions import ValidationError
from django.core.paginator import Paginator
import logging

logger = logging.getLogger(__name__)

class Feedback(models.Model):
    feedback_text = models.TextField()
    rating = models.IntegerField()
    user_email = models.EmailField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Feedback from {self.user_email} - Rating: {self.rating}"

    def clean(self):
        if self.rating < 1 or self.rating > 5:
            raise ValidationError("Rating must be between 1 and 5")

class FeedbackForm(forms.Form):
    feedback = forms.CharField(widget=forms.Textarea)
    rating = forms.IntegerField(min_value=1, max_value=5)
    user_email = forms.EmailField()

@login_required
@require_POST
def submit_feedback(request):
    try:
        form = FeedbackForm(request.POST)
        if form.is_valid():
            feedback = Feedback(
                feedback_text=request.POST['feedback'],
                rating=request.POST['rating'],
                user_email=request.POST['user_email'],
                created_at=timezone.now()
            )
            feedback.full_clean()
            feedback.save()
            logger.info(f"Feedback submitted by {request.user.username}")
            return JsonResponse({'message': 'Feedback received'})
        else:
            logger.warning(f"Invalid feedback form submitted by {request.user.username}")
            return JsonResponse({'error': 'Invalid form'}, status=400)
    except Exception as e:
        logger.error(f"Error in submit_feedback: {str(e)}")
        return HttpResponseBadRequest("An error occurred while processing your request")

@login_required
@require_GET
def list_feedback(request):
    try:
        feedbacks = Feedback.objects.all().order_by('-created_at')
        paginator = Paginator(feedbacks, 10)
        page_number = request.GET.get('page')
        page_obj = paginator.get_page(page_number)
        return render(request, 'feedback_list.html', {'page_obj': page_obj})
    except Exception as e:
        logger.error(f"Error in list_feedback: {str(e)}")
        return HttpResponseBadRequest("An error occurred while retrieving feedback")

@login_required
@require_GET
def feedback_stats(request):
    try:
        total_feedback = Feedback.objects.count()
        avg_rating = Feedback.objects.aggregate(models.Avg('rating'))['rating__avg']
        return JsonResponse({
            'total_feedback': total_feedback,
            'average_rating': round(avg_rating, 2) if avg_rating else 0
        })
    except Exception as e:
        logger.error(f"Error in feedback_stats: {str(e)}")
        return HttpResponseBadRequest("An error occurred while calculating feedback stats")

@login_required
@require_POST
def delete_feedback(request, feedback_id):
    try:
        feedback = get_object_or_404(Feedback, id=feedback_id)
        feedback.delete()
        logger.info(f"Feedback {feedback_id} deleted by {request.user.username}")
        return JsonResponse({'message': 'Feedback deleted successfully'})
    except Exception as e:
        logger.error(f"Error in delete_feedback: {str(e)}")
        return HttpResponseBadRequest("An error occurred while deleting feedback")

@login_required
@require_POST
def update_feedback(request, feedback_id):
    try:
        feedback = get_object_or_404(Feedback, id=feedback_id)
        form = FeedbackForm(request.POST)
        if form.is_valid():
            feedback.feedback_text = form.cleaned_data['feedback']
            feedback.rating = form.cleaned_data['rating']
            feedback.user_email = form.cleaned_data['user_email']
            feedback.full_clean()
            feedback.save()
            logger.info(f"Feedback {feedback_id} updated by {request.user.username}")
            return JsonResponse({'message': 'Feedback updated successfully'})
        else:
            logger.warning(f"Invalid update form for feedback {feedback_id} by {request.user.username}")
            return JsonResponse({'error': 'Invalid form'}, status=400)
    except Exception as e:
        logger.error(f"Error in update_feedback: {str(e)}")
        return HttpResponseBadRequest("An error occurred while updating feedback")

def get_feedback_by_email(user_email):
    try:
        return Feedback.objects.filter(user_email=user_email).order_by('-created_at')
    except Exception as e:
        logger.error(f"Error in get_feedback_by_email: {str(e)}")
        return []

def get_top_rated_feedback(limit=5):
    try:
        return Feedback.objects.order_by('-rating')[:limit]
    except Exception as e:
        logger.error(f"Error in get_top_rated_feedback: {str(e)}")
        return []

if __name__ == "__main__":
    # Simple CLI for testing
    while True:
        print("\n1. Submit Feedback")
        print("2. List Feedback")
        print("3. View Stats")
        print("4. Exit")
        choice = input("Enter your choice: ")
        
        if choice == '1':
            feedback = input("Enter feedback: ")
            rating = int(input("Enter rating (1-5): "))
            email = input("Enter email: ")
            form = FeedbackForm({'feedback': feedback, 'rating': rating, 'user_email': email})
            if form.is_valid():
                Feedback.objects.create(**form.cleaned_data)
                print("Feedback submitted successfully")
            else:
                print("Invalid input")
        elif choice == '2':
            feedbacks = Feedback.objects.all().order_by('-created_at')
            for f in feedbacks:
                print(f"{f.user_email} - Rating: {f.rating} - {f.feedback_text[:50]}...")
        elif choice == '3':
            total = Feedback.objects.count()
            avg = Feedback.objects.aggregate(models.Avg('rating'))['rating__avg']
            print(f"Total Feedback: {total}")
            print(f"Average Rating: {round(avg, 2) if avg else 0}")
        elif choice == '4':
            break
        else:
            print("Invalid choice")