from django.shortcuts import render, redirect, get_object_or_404
from django import forms
from django.db import models
from django.utils import timezone
from django.db.models import Q

class Game(models.Model):
    title = models.CharField(max_length=100)
    genre = models.CharField(max_length=100)
    release_date = models.DateField()
    developer = models.CharField(max_length=100)
    rating = models.FloatField(default=0.0)

    def __str__(self):
        return self.title

class CreateGameForm(forms.Form):
    title = forms.CharField(max_length=100)
    genre = forms.CharField(max_length=100)
    release_date = forms.DateField(widget=forms.DateInput(attrs={'type': 'date'}))
    developer = forms.CharField(max_length=100)
    rating = forms.FloatField(min_value=0.0, max_value=10.0)

    def clean_release_date(self):
        date = self.cleaned_data['release_date']
        if date > timezone.now().date():
            raise forms.ValidationError("Release date cannot be in the future.")
        return date

def create_new_game(request):
    if request.method == 'POST':
        form = CreateGameForm(request.POST)
        if form.is_valid():
            game = Game(
                title=form.cleaned_data['title'],  # Fixed line
                genre=form.cleaned_data['genre'],
                release_date=form.cleaned_data['release_date'],
                developer=form.cleaned_data['developer'],
                rating=form.cleaned_data['rating']
            )
            game.save()
            return redirect('game_list')
    else:
        form = CreateGameForm()
    return render(request, 'create_game.html', {'form': form})

def game_list(request):
    games = Game.objects.all().order_by('-release_date')
    return render(request, 'game_list.html', {'games': games})

def game_detail(request, game_id):
    game = get_object_or_404(Game, pk=game_id)
    return render(request, 'game_detail.html', {'game': game})

def search_games(request):
    query = request.GET.get('q')
    if query:
        games = Game.objects.filter(
            Q(title__icontains=query) | Q(genre__icontains=query) | Q(developer__icontains=query)
        )
    else:
        games = Game.objects.all()
    return render(request, 'search_results.html', {'games': games, 'query': query})