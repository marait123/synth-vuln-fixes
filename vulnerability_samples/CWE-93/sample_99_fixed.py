from flask import Flask, request, render_template, redirect, url_for, session
import sqlite3
import html
import re

app = Flask(__name__)
app.secret_key = 'your_secret_key'

def get_db():
    db = sqlite3.connect('users.db')
    db.row_factory = sqlite3.Row
    return db

@app.route('/')
def home():
    return render_template('home.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if not re.match(r'^[a-zA-Z0-9_]+$', username):
            return render_template('login.html', error='Invalid username format')
        db = get_db()
        user = db.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()
        db.close()
        if user and check_password(user['password'], password):
            session['user_id'] = user['id']
            return redirect(url_for('dashboard'))
        return render_template('login.html', error='Invalid credentials')
    return render_template('login.html')

@app.route('/dashboard')
def dashboard():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    return render_template('dashboard.html')

@app.route('/write_data')
def write_data():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    data = html.escape(request.args.get('data', ''))
    
    with open('output.txt', 'w') as f:
        f.write(data)
    
    log_action(session['user_id'], f"Wrote data: {data}")
    return "Data written successfully!"

@app.route('/read_data')
def read_data():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    try:
        with open('output.txt', 'r') as f:
            content = html.escape(f.read())
        return render_template('read_data.html', content=content)
    except FileNotFoundError:
        return "No data found."

def log_action(user_id, action):
    db = get_db()
    db.execute('INSERT INTO logs (user_id, action) VALUES (?, ?)', (user_id, html.escape(action)))
    db.commit()
    db.close()

def check_password(stored_password, provided_password):
    # Implement secure password checking (e.g., using bcrypt)
    return stored_password == provided_password

if __name__ == '__main__':
    app.run(debug=True)