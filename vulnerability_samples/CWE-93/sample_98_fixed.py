from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render, get_object_or_404
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from django.views.decorators.http import require_http_methods
from django.contrib.auth.models import User
from django.utils.html import escape
from .models import BlogPost, Comment

def register_user(request):
    if request.method == 'POST':
        username = escape(request.POST.get('username'))
        password = request.POST.get('password')
        User.objects.create_user(username=username, password=password)
        return HttpResponse("User registered successfully")
    return render(request, 'register.html')

def user_login(request):
    if request.method == 'POST':
        username = escape(request.POST.get('username'))
        password = request.POST.get('password')
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return HttpResponse("Logged in successfully")
        else:
            return HttpResponse("Invalid credentials")
    return render(request, 'login.html')

@login_required
def user_logout(request):
    logout(request)
    return HttpResponse("Logged out successfully")

@login_required
@require_http_methods(["POST"])
def add_blog_post(request):
    title = escape(request.POST.get('title'))
    content = escape(request.POST.get('content'))
    BlogPost.objects.create(title=title, content=content, author=request.user)
    return HttpResponse("Blog post added")

def list_blog_posts(request):
    posts = BlogPost.objects.all().order_by('-created_at')
    return render(request, 'list_posts.html', {'posts': posts})

def view_blog_post(request, post_id):
    post = get_object_or_404(BlogPost, id=post_id)
    comments = Comment.objects.filter(post=post)
    return render(request, 'view_post.html', {'post': post, 'comments': comments})

@login_required
@require_http_methods(["POST"])
def add_comment(request, post_id):
    comment_text = escape(request.POST.get('comment'))
    with open(f'logs/{post_id}_comments.log', 'a') as file:
        file.write(comment_text + '\n')
    Comment.objects.create(post_id=post_id, text=comment_text, author=request.user)
    return HttpResponseRedirect(f'/blog/post/{post_id}')

def search_posts(request):
    query = escape(request.GET.get('q', ''))
    posts = BlogPost.objects.filter(title__icontains=query) | BlogPost.objects.filter(content__icontains=query)
    return render(request, 'search_results.html', {'posts': posts, 'query': query})