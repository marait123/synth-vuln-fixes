from pyramid.config import Configurator
from pyramid.view import view_config
from pyramid.response import Response
from pyramid.security import remember, forget, authenticated_userid
from pyramid.httpexceptions import HTTPFound, HTTPBadRequest
import sqlite3
import os
import logging
import hashlib
import secrets

DB_NAME = 'users.db'
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class UserAlreadyExistsError(Exception):
    pass

def init_db():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT, email TEXT, salt TEXT)''')
    conn.commit()
    conn.close()
    logging.info("Database initialized")

def get_user(username):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE username=?", (username,))
    user = c.fetchone()
    conn.close()
    return user

def hash_password(password, salt=None):
    if not salt:
        salt = secrets.token_hex(16)
    return hashlib.sha256((password + salt).encode()).hexdigest(), salt

def verify_password(stored_password, provided_password, salt):
    return stored_password == hash_password(provided_password, salt)[0]

@view_config(route_name='home', renderer='templates/home.jinja2')
def home(request):
    return {'username': authenticated_userid(request)}

@view_config(route_name='login', renderer='templates/login.jinja2')
def login(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = get_user(username)
        if user and verify_password(user[2], password, user[4]):
            headers = remember(request, username)
            logging.info(f"User {username} logged in successfully")
            return HTTPFound(location=request.route_url('dashboard'), headers=headers)
        logging.warning(f"Failed login attempt for user {username}")
    return {}

@view_config(route_name='logout')
def logout(request):
    headers = forget(request)
    logging.info(f"User {authenticated_userid(request)} logged out")
    return HTTPFound(location=request.route_url('home'), headers=headers)

@view_config(route_name='register', renderer='templates/register.jinja2')
def register(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        email = request.POST.get('email')
        try:
            conn = sqlite3.connect(DB_NAME)
            c = conn.cursor()
            hashed_password, salt = hash_password(password)
            c.execute("INSERT INTO users (username, password, email, salt) VALUES (?, ?, ?, ?)",
                      (username, hashed_password, email, salt))
            conn.commit()
            conn.close()
            logging.info(f"New user registered: {username}")
            return HTTPFound(location=request.route_url('login'))
        except sqlite3.IntegrityError:
            conn.close()
            logging.warning(f"Attempted to register existing username: {username}")
            raise UserAlreadyExistsError("Username already exists")
    return {}

@view_config(route_name='dashboard', renderer='templates/dashboard.jinja2')
def dashboard(request):
    username = authenticated_userid(request)
    if not username:
        return HTTPFound(location=request.route_url('login'))
    user = get_user(username)
    return {'user': user}

@view_config(route_name='export_data')
def export_user_data(request):
    username = authenticated_userid(request)
    if not username:
        return HTTPFound(location=request.route_url('login'))
    user = get_user(username)
    data = f"Username: {user[1]}\nEmail: {user[3]}"
    filename = f"user_data_{username}.txt"
    with open(filename, 'w') as f:
        f.write(data)
    logging.info(f"Data exported for user {username}")
    return Response(f"Data exported to {filename}")

@view_config(route_name='update_profile', renderer='templates/update_profile.jinja2')
def update_profile(request):
    username = authenticated_userid(request)
    if not username:
        return HTTPFound(location=request.route_url('login'))
    if request.method == 'POST':
        new_email = request.POST.get('email')
        conn = sqlite3.connect(DB_NAME)
        c = conn.cursor()
        c.execute("UPDATE users SET email = ? WHERE username = ?", (new_email, username))
        conn.commit()
        conn.close()
        logging.info(f"Profile updated for user {username}")
        return HTTPFound(location=request.route_url('dashboard'))
    user = get_user(username)
    return {'user': user}

@view_config(route_name='delete_account')
def delete_account(request):
    username = authenticated_userid(request)
    if not username:
        return HTTPFound(location=request.route_url('login'))
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("DELETE FROM users WHERE username = ?", (username,))
    conn.commit()
    conn.close()
    headers = forget(request)
    logging.info(f"Account deleted for user {username}")
    return HTTPFound(location=request.route_url('home'), headers=headers)

def main():
    init_db()
    with Configurator() as config:
        config.include('pyramid_jinja2')
        config.add_route('home', '/')
        config.add_route('login', '/login')
        config.add_route('logout', '/logout')
        config.add_route('register', '/register')
        config.add_route('dashboard', '/dashboard')
        config.add_route('export_data', '/export')
        config.add_route('update_profile', '/update_profile')
        config.add_route('delete_account', '/delete_account')
        config.scan()
        app = config.make_wsgi_app()
    return app

if __name__ == '__main__':
    app = main()
    from wsgiref.simple_server import make_server
    server = make_server('0.0.0.0', 6543, app)
    print('Web server started on http://0.0.0.0:6543')
    server.serve_forever()