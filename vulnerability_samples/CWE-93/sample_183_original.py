import os
from flask import Flask, request, render_template, session, redirect, url_for, flash
from pathlib import Path
import sqlite3
import logging
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
app.secret_key = 'your_secret_key'
logging.basicConfig(filename='app.log', level=logging.INFO)

def get_db():
    db = sqlite3.connect('users.db')
    db.row_factory = sqlite3.Row
    return db

def init_db():
    db = get_db()
    db.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT UNIQUE, password TEXT)')
    db.commit()
    db.close()

@app.route('/', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        db = get_db()
        user = db.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()
        db.close()
        if user and check_password_hash(user['password'], password):
            session['user_id'] = user['id']
            logging.info(f"User {username} logged in")
            return redirect(url_for('list_notes'))
        flash('Invalid username or password')
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        db = get_db()
        try:
            db.execute('INSERT INTO users (username, password) VALUES (?, ?)',
                       (username, generate_password_hash(password)))
            db.commit()
            logging.info(f"New user registered: {username}")
            flash('Registration successful. Please log in.')
            return redirect(url_for('login'))
        except sqlite3.IntegrityError:
            flash('Username already exists')
        finally:
            db.close()
    return render_template('register.html')

@app.route('/logout')
def logout():
    user_id = session.pop('user_id', None)
    if user_id:
        logging.info(f"User {user_id} logged out")
    return redirect(url_for('login'))

@app.route('/notes')
def list_notes():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    notes_directory = Path(f'./notes/{session["user_id"]}')
    notes_directory.mkdir(parents=True, exist_ok=True)
    notes = [f.stem for f in notes_directory.glob('*.txt')]
    return render_template('list_notes.html', notes=notes)

@app.route('/view_note/<title>')
def view_note(title):
    if 'user_id' not in session:
        return redirect(url_for('login'))
    notes_directory = Path(f'./notes/{session["user_id"]}')
    file_path = notes_directory / f"{title}.txt"
    if not os.path.abspath(file_path).startswith(os.path.abspath(notes_directory)):
        logging.warning(f"Attempted to access invalid file path: {file_path}")
        return "Invalid file path", 400
    try:
        with open(file_path, 'r') as file:
            content = file.read()
        return render_template('view_note.html', title=title, content=content)
    except FileNotFoundError:
        flash('Note not found')
        return redirect(url_for('list_notes'))

@app.route('/write_note', methods=['GET', 'POST'])
def write_note():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    if request.method == 'POST':
        note_content = request.form.get('note')
        note_title = request.form.get('title')
        note_title_path = Path(note_title).name 
        notes_directory = Path(f'./notes/{session["user_id"]}')
        notes_directory.mkdir(parents=True, exist_ok=True)
        file_path = notes_directory / f"{note_title_path}.txt"
        if not os.path.abspath(file_path).startswith(os.path.abspath(notes_directory)):
            logging.warning(f"Attempted to write to invalid file path: {file_path}")
            return "Invalid file path", 400
        with open(file_path, 'w') as file:
            file.write(note_content)
        logging.info(f"User {session['user_id']} wrote note: {note_title_path}")
        flash('Note saved successfully')
        return redirect(url_for('list_notes'))
    return render_template('write_note.html')

@app.route('/delete_note/<title>')
def delete_note(title):
    if 'user_id' not in session:
        return redirect(url_for('login'))
    notes_directory = Path(f'./notes/{session["user_id"]}')
    file_path = notes_directory / f"{title}.txt"
    if not os.path.abspath(file_path).startswith(os.path.abspath(notes_directory)):
        logging.warning(f"Attempted to delete invalid file path: {file_path}")
        return "Invalid file path", 400
    try:
        os.remove(file_path)
        logging.info(f"User {session['user_id']} deleted note: {title}")
        flash('Note deleted successfully')
    except FileNotFoundError:
        flash('Note not found')
    return redirect(url_for('list_notes'))

@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_server_error(e):
    logging.error(f"Internal server error: {str(e)}")
    return render_template('500.html'), 500

def create_test_user():
    db = get_db()
    db.execute('INSERT OR IGNORE INTO users (username, password) VALUES (?, ?)',
               ('testuser', generate_password_hash('testpassword')))
    db.commit()
    db.close()

if __name__ == '__main__':
    init_db()
    create_test_user()
    app.run(debug=True)