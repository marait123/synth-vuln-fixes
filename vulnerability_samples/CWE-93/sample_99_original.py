from flask import Flask, request, render_template, redirect, url_for, session, jsonify
import sqlite3
import logging
import os
from werkzeug.security import generate_password_hash, check_password_hash
from functools import wraps

app = Flask(__name__)
app.secret_key = 'your_secret_key'
logging.basicConfig(filename='app.log', level=logging.INFO)

def get_db():
    db = sqlite3.connect('users.db')
    db.row_factory = sqlite3.Row
    return db

def init_db():
    db = get_db()
    db.execute('''CREATE TABLE IF NOT EXISTS users
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   username TEXT UNIQUE NOT NULL,
                   password TEXT NOT NULL)''')
    db.execute('''CREATE TABLE IF NOT EXISTS logs
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   user_id INTEGER,
                   action TEXT,
                   timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
    db.commit()
    db.close()

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

@app.route('/')
def home():
    return render_template('home.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        db = get_db()
        user = db.execute('SELECT * FROM users WHERE username = ? AND password = ?', (username, password)).fetchone()
        db.close()
        if user:
            session['user_id'] = user['id']
            logging.info(f"User {username} logged in")
            return redirect(url_for('dashboard'))
        logging.warning(f"Failed login attempt for username: {username}")
        return render_template('login.html', error='Invalid credentials')
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        db = get_db()
        try:
            db.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, password))
            db.commit()
            logging.info(f"New user registered: {username}")
            return redirect(url_for('login'))
        except sqlite3.IntegrityError:
            return render_template('register.html', error='Username already exists')
        finally:
            db.close()
    return render_template('register.html')

@app.route('/dashboard')
@login_required
def dashboard():
    return render_template('dashboard.html')

@app.route('/write_data', methods=['GET', 'POST'])
@login_required
def write_data():
    if request.method == 'POST':
        data = request.form['data']
        with open('output.txt', 'w') as f:
            f.write(data)
        log_action(session['user_id'], f"Wrote data: {data}")
        return "Data written successfully!"
    return render_template('write_data.html')

@app.route('/read_data')
@login_required
def read_data():
    try:
        with open('output.txt', 'r') as f:
            content = f.read()
        return render_template('read_data.html', content=content)
    except FileNotFoundError:
        return "No data found."

@app.route('/user_profile')
@login_required
def user_profile():
    db = get_db()
    user = db.execute('SELECT * FROM users WHERE id = ?', (session['user_id'],)).fetchone()
    db.close()
    return render_template('user_profile.html', user=user)

@app.route('/change_password', methods=['GET', 'POST'])
@login_required
def change_password():
    if request.method == 'POST':
        old_password = request.form['old_password']
        new_password = request.form['new_password']
        db = get_db()
        user = db.execute('SELECT * FROM users WHERE id = ?', (session['user_id'],)).fetchone()
        if user and user['password'] == old_password:
            db.execute('UPDATE users SET password = ? WHERE id = ?', (new_password, session['user_id']))
            db.commit()
            log_action(session['user_id'], "Changed password")
            return redirect(url_for('dashboard'))
        db.close()
        return render_template('change_password.html', error='Invalid old password')
    return render_template('change_password.html')

@app.route('/logout')
def logout():
    session.pop('user_id', None)
    return redirect(url_for('home'))

@app.route('/api/user_data')
@login_required
def api_user_data():
    db = get_db()
    user = db.execute('SELECT id, username FROM users WHERE id = ?', (session['user_id'],)).fetchone()
    db.close()
    return jsonify(dict(user))

def log_action(user_id, action):
    db = get_db()
    db.execute('INSERT INTO logs (user_id, action) VALUES (?, ?)', (user_id, action))
    db.commit()
    db.close()
    logging.info(f"User {user_id}: {action}")

@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_server_error(e):
    logging.error(f"Internal Server Error: {str(e)}")
    return render_template('500.html'), 500

if __name__ == '__main__':
    init_db()
    app.run(debug=True)