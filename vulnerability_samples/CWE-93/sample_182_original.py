from flask import Flask, request, session, render_template, redirect, url_for, jsonify
import os
import time
import sqlite3
import logging
from functools import wraps

app = Flask(__name__)
app.secret_key = os.urandom(24)
logging.basicConfig(filename='app.log', level=logging.INFO)

def get_db():
    db = sqlite3.connect('chat.db')
    db.row_factory = sqlite3.Row
    return db

def init_db():
    with app.app_context():
        db = get_db()
        db.execute('''CREATE TABLE IF NOT EXISTS users
                      (id INTEGER PRIMARY KEY AUTOINCREMENT,
                       username TEXT UNIQUE NOT NULL,
                       password TEXT NOT NULL)''')
        db.execute('''CREATE TABLE IF NOT EXISTS messages
                      (id INTEGER PRIMARY KEY AUTOINCREMENT,
                       user_id INTEGER,
                       content TEXT NOT NULL,
                       timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                       FOREIGN KEY (user_id) REFERENCES users (id))''')
        db.commit()

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'username' not in session:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

@app.route('/')
def home():
    if 'username' in session:
        return redirect(url_for('chat'))
    return render_template('home.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        db = get_db()
        try:
            db.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, password))
            db.commit()
            logging.info(f"New user registered: {username}")
            return redirect(url_for('login'))
        except sqlite3.IntegrityError:
            return "Username already exists", 400
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        db = get_db()
        user = db.execute('SELECT * FROM users WHERE username = ? AND password = ?', (username, password)).fetchone()
        if user:
            session['username'] = username
            session['user_id'] = user['id']
            logging.info(f"User logged in: {username}")
            return redirect(url_for('chat'))
        else:
            return "Invalid credentials", 401
    return render_template('login.html')

@app.route('/logout')
def logout():
    username = session.pop('username', None)
    session.pop('user_id', None)
    if username:
        logging.info(f"User logged out: {username}")
    return redirect(url_for('home'))

@app.route('/chat')
@login_required
def chat():
    return render_template('chat.html', username=session['username'])

@app.route('/send_message', methods=['POST'])
@login_required
def send_message():
    user_id = session['user_id']
    user_message = request.form['message']
    db = get_db()
    db.execute('INSERT INTO messages (user_id, content) VALUES (?, ?)', (user_id, user_message))
    db.commit()
    logging.info(f"Message sent by user {session['username']}")
    return 'Message sent'

@app.route('/view_history')
@login_required
def view_history():
    db = get_db()
    messages = db.execute('''SELECT users.username, messages.content, messages.timestamp
                             FROM messages JOIN users ON messages.user_id = users.id
                             ORDER BY messages.timestamp DESC LIMIT 50''').fetchall()
    return render_template('history.html', history=messages)

@app.route('/api/messages', methods=['GET'])
@login_required
def get_messages():
    db = get_db()
    messages = db.execute('''SELECT users.username, messages.content, messages.timestamp
                             FROM messages JOIN users ON messages.user_id = users.id
                             ORDER BY messages.timestamp DESC LIMIT 50''').fetchall()
    return jsonify([dict(m) for m in messages])

@app.route('/delete_account', methods=['POST'])
@login_required
def delete_account():
    user_id = session['user_id']
    db = get_db()
    db.execute('DELETE FROM messages WHERE user_id = ?', (user_id,))
    db.execute('DELETE FROM users WHERE id = ?', (user_id,))
    db.commit()
    session.clear()
    logging.info(f"Account deleted for user {session['username']}")
    return redirect(url_for('home'))

@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_server_error(e):
    logging.error(f"Internal server error: {str(e)}")
    return render_template('500.html'), 500

def run_tests():
    assert app.secret_key != None, "Secret key not set"
    with app.test_client() as client:
        response = client.get('/')
        assert response.status_code == 200
        response = client.post('/register', data={'username': 'testuser', 'password': 'testpass'})
        assert response.status_code == 302
        response = client.post('/login', data={'username': 'testuser', 'password': 'testpass'})
        assert response.status_code == 302
        response = client.get('/chat')
        assert response.status_code == 200
    print("All tests passed!")

if __name__ == '__main__':
    init_db()
    run_tests()
    app.run(debug=True)