import tornado.ioloop
import tornado.web
import logging
import sqlite3
import uuid
import hashlib
import re
import os
from datetime import datetime, timedelta

# Logger setup
logger = logging.getLogger('user_logger')
logger.setLevel(logging.INFO)
fh = logging.FileHandler('user_activity.log')
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter)
logger.addHandler(fh)

# Database setup
conn = sqlite3.connect('users.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users
                  (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT, token TEXT, last_login DATETIME)''')
conn.commit()

class CustomException(Exception):
    pass

class BaseHandler(tornado.web.RequestHandler):
    def get_current_user(self):
        return self.get_secure_cookie("user")

    def write_error(self, status_code, **kwargs):
        self.write(f"<html><body><h1>{status_code} Error</h1></body></html>")

class MainHandler(BaseHandler):
    @tornado.web.authenticated
    def get(self):
        user = self.get_current_user().decode('utf-8')
        self.write(f'<html><body><h1>Hello, {user}!</h1><a href="/logout">Logout</a></body></html>')

class LoginHandler(BaseHandler):
    def get(self):
        self.write('<html><body><form action="/login" method="post">'
                   'Username: <input type="text" name="username"><br>'
                   'Password: <input type="password" name="password"><br>'
                   '<input type="submit" value="Sign in">'
                   '</form><br><a href="/register">Register</a></body></html>')

    def post(self):
        try:
            username = self.get_argument("username")
            password = self.get_argument("password")
            if not username or not password:
                raise CustomException("Username and password are required")
            
            hashed_password = hashlib.sha256(password.encode()).hexdigest()
            
            cursor.execute("SELECT * FROM users WHERE username=? AND password=?", (username, hashed_password))
            user = cursor.fetchone()
            
            if user:
                token = str(uuid.uuid4())
                last_login = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                cursor.execute("UPDATE users SET token=?, last_login=? WHERE username=?", (token, last_login, username))
                conn.commit()
                self.set_secure_cookie("user", username)
                logger.warning(f'User logged in: {username}, Token: {token}')  # Vulnerable line
                self.redirect("/")
            else:
                logger.warning(f'Failed login attempt for user: {username}')
                self.write("<html><body>Invalid login<br><a href='/login'>Try again</a></body></html>")
        except CustomException as e:
            self.write(f"<html><body>Error: {str(e)}<br><a href='/login'>Try again</a></body></html>")
        except Exception as e:
            logger.error(f"Unexpected error during login: {str(e)}")
            self.write("<html><body>An unexpected error occurred<br><a href='/login'>Try again</a></body></html>")

class RegisterHandler(BaseHandler):
    def get(self):
        self.write('<html><body><form action="/register" method="post">'
                   'Username: <input type="text" name="username"><br>'
                   'Password: <input type="password" name="password"><br>'
                   '<input type="submit" value="Register">'
                   '</form></body></html>')

    def post(self):
        try:
            username = self.get_argument("username")
            password = self.get_argument("password")
            if not username or not password:
                raise CustomException("Username and password are required")
            if not re.match(r'^[a-zA-Z0-9_]{3,20}$', username):
                raise CustomException("Invalid username format")
            if len(password) < 8:
                raise CustomException("Password must be at least 8 characters long")
            
            hashed_password = hashlib.sha256(password.encode()).hexdigest()
            
            cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, hashed_password))
            conn.commit()
            logger.info(f'New user registered: {username}')
            self.redirect("/login")
        except sqlite3.IntegrityError:
            self.write("<html><body>Username already exists<br><a href='/register'>Try again</a></body></html>")
        except CustomException as e:
            self.write(f"<html><body>Error: {str(e)}<br><a href='/register'>Try again</a></body></html>")
        except Exception as e:
            logger.error(f"Unexpected error during registration: {str(e)}")
            self.write("<html><body>An unexpected error occurred<br><a href='/register'>Try again</a></body></html>")

class LogoutHandler(BaseHandler):
    def get(self):
        user = self.get_current_user()
        if user:
            logger.info(f'User logged out: {user.decode("utf-8")}')
        self.clear_cookie("user")
        self.redirect("/login")

class UserListHandler(BaseHandler):
    @tornado.web.authenticated
    def get(self):
        cursor.execute("SELECT username, last_login FROM users")
        users = cursor.fetchall()
        self.write("<html><body><h1>User List</h1><ul>")
        for user in users:
            self.write(f"<li>{user[0]} - Last login: {user[1]}</li>")
        self.write("</ul><br><a href='/'>Back to Home</a></body></html>")

def make_app():
    return tornado.web.Application([
        (r"/", MainHandler),
        (r"/login", LoginHandler),
        (r"/register", RegisterHandler),
        (r"/logout", LogoutHandler),
        (r"/users", UserListHandler)
    ], cookie_secret="SECRET_COOKIE_KEY", static_path=os.path.join(os.path.dirname(__file__), "static"))

def cleanup_old_tokens():
    cutoff = datetime.now() - timedelta(days=7)
    cursor.execute("UPDATE users SET token=NULL WHERE last_login < ?", (cutoff,))
    conn.commit()
    logger.info("Cleaned up old tokens")

if __name__ == "__main__":
    app = make_app()
    app.listen(8888)
    logger.info("Server started on port 8888")
    cleanup_old_tokens()
    tornado.ioloop.PeriodicCallback(cleanup_old_tokens, 86400000).start()
    tornado.ioloop.IOLoop.current().start()