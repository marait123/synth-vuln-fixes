import logging
import hashlib
import sqlalchemy as db
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('app_logger')

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String, unique=True)
    password = db.Column(db.String)

def create_db_engine():
    return db.create_engine('sqlite:///example.db')

def initialize_database(engine):
    Base.metadata.create_all(engine)

def create_db_session(engine):
    Session = sessionmaker(bind=engine)
    return Session()

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def store_user_credentials(username, password):
    engine = create_db_engine()
    initialize_database(engine)
    session = create_db_session(engine)
    hashed_password = hash_password(password)
    logger.info(f"Storing user {username}")
    new_user = User(username=username, password=hashed_password)
    session.add(new_user)
    session.commit()
    logger.info(f"User {username} stored successfully")

def authenticate_user(username, password):
    engine = create_db_engine()
    session = create_db_session(engine)
    user = session.query(User).filter_by(username=username).first()
    if user and user.password == hash_password(password):
        logger.info(f"User {username} authenticated successfully")
        return True
    logger.info(f"Authentication failed for user {username}")
    return False

def user_login(username, password):
    if authenticate_user(username, password):
        logger.info(f"Login successful for user {username}")
        return "Login successful"
    else:
        logger.info(f"Login failed for user {username}")
        return "Login failed"

# Example usage
store_user_credentials("alice", "password123")
login_result = user_login("alice", "password123")
print(login_result)