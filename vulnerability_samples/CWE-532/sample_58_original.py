from pyramid.view import view_config
from pyramid.response import Response
from pyramid.httpexceptions import HTTPFound, HTTPBadRequest, HTTPUnauthorized
import logging
import hashlib
import re
import json
from pyramid.config import Configurator
from wsgiref.simple_server import make_server

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Simulated database of users
users = {}

def hash_password(password):
    salt = "somesalt"  # In a real scenario, use a unique salt per user
    return hashlib.sha256((password + salt).encode()).hexdigest()

def authenticate_user(username, password):
    if username in users and users[username]['password'] == hash_password(password):
        return True
    return False

def validate_email(email):
    pattern = r'^[\w\.-]+@[\w\.-]+\.\w+$'
    return re.match(pattern, email) is not None

def validate_password_strength(password):
    if len(password) < 8:
        return False
    if not re.search(r'[A-Z]', password):
        return False
    if not re.search(r'[a-z]', password):
        return False
    if not re.search(r'\d', password):
        return False
    return True

@view_config(route_name='home', renderer='json')
def home(request):
    logger.info("Home page accessed")
    return {"message": "Welcome to the application"}

@view_config(route_name='register', request_method='POST', renderer='json')
def register(request):
    try:
        username = request.params.get('username')
        password = request.params.get('password')
        email = request.params.get('email')

        if not username or not password or not email:
            raise HTTPBadRequest("Missing required fields")

        if username in users:
            logger.warning(f"Registration attempt with existing username: {username}")
            return {"error": "Username already exists"}

        if not validate_email(email):
            logger.warning(f"Invalid email format: {email}")
            return {"error": "Invalid email format"}

        if not validate_password_strength(password):
            logger.warning(f"Weak password attempt for user: {username}")
            return {"error": "Password does not meet strength requirements"}

        users[username] = {
            'password': hash_password(password),
            'email': email
        }
        logger.info(f"New user registered: {username}")
        return {"message": "User registered successfully"}
    except Exception as e:
        logger.error(f"Error during registration: {str(e)}")
        return {"error": "An unexpected error occurred"}

@view_config(route_name='login', request_method='POST', renderer='json')
def login(request):
    try:
        username = request.params.get('username')
        password = request.params.get('password')
        logger.info("Login attempt for user: %s with password: %s", username, password)
        
        if authenticate_user(username, password):
            logger.info(f"Successful login for user: {username}")
            return {"message": "Login successful"}
        else:
            logger.warning(f"Failed login attempt for user: {username}")
            raise HTTPUnauthorized("Invalid credentials")
    except HTTPUnauthorized:
        return {"error": "Invalid credentials"}
    except Exception as e:
        logger.error(f"Error during login: {str(e)}")
        return {"error": "An unexpected error occurred"}

@view_config(route_name='profile', renderer='json')
def profile(request):
    try:
        username = request.params.get('username')
        if not username:
            raise HTTPBadRequest("Username is required")
        if username in users:
            logger.info(f"Profile viewed for user: {username}")
            return {"username": username, "email": users[username]['email']}
        else:
            logger.warning(f"Attempt to view non-existent profile: {username}")
            return {"error": "User not found"}
    except Exception as e:
        logger.error(f"Error retrieving profile: {str(e)}")
        return {"error": "An unexpected error occurred"}

@view_config(route_name='logout')
def logout(request):
    logger.info("User logged out")
    return HTTPFound(location=request.route_url('home'))

@view_config(route_name='update_profile', request_method='POST', renderer='json')
def update_profile(request):
    try:
        username = request.params.get('username')
        new_email = request.params.get('email')

        if not username or not new_email:
            raise HTTPBadRequest("Missing required fields")

        if username not in users:
            logger.warning(f"Attempt to update non-existent profile: {username}")
            return {"error": "User not found"}

        if not validate_email(new_email):
            logger.warning(f"Invalid email format in update attempt: {new_email}")
            return {"error": "Invalid email format"}

        users[username]['email'] = new_email
        logger.info(f"Profile updated for user: {username}")
        return {"message": "Profile updated successfully"}
    except Exception as e:
        logger.error(f"Error updating profile: {str(e)}")
        return {"error": "An unexpected error occurred"}

@view_config(route_name='delete_account', request_method='POST', renderer='json')
def delete_account(request):
    try:
        username = request.params.get('username')
        password = request.params.get('password')

        if not username or not password:
            raise HTTPBadRequest("Missing required fields")

        if username not in users:
            logger.warning(f"Attempt to delete non-existent account: {username}")
            return {"error": "User not found"}

        if not authenticate_user(username, password):
            logger.warning(f"Failed deletion attempt for user: {username}")
            raise HTTPUnauthorized("Invalid credentials")

        del users[username]
        logger.info(f"Account deleted for user: {username}")
        return {"message": "Account deleted successfully"}
    except HTTPUnauthorized:
        return {"error": "Invalid credentials"}
    except Exception as e:
        logger.error(f"Error deleting account: {str(e)}")
        return {"error": "An unexpected error occurred"}

if __name__ == '__main__':
    with Configurator() as config:
        config.add_route('home', '/')
        config.add_route('register', '/register')
        config.add_route('login', '/login')
        config.add_route('profile', '/profile')
        config.add_route('logout', '/logout')
        config.add_route('update_profile', '/update_profile')
        config.add_route('delete_account', '/delete_account')
        config.scan()
        app = config.make_wsgi_app()
    
    server = make_server('0.0.0.0', 6543, app)
    print('Web server started on http://0.0.0.0:6543')
    server.serve_forever()