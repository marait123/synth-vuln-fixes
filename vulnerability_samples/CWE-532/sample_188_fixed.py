import logging
import os
from cryptography.fernet import Fernet
import getpass

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('file_encryption_logger')

def generate_key():
    return Fernet.generate_key()

def encrypt_file(file_path, secret, sensitive_data):
    cipher_suite = Fernet(secret)
    encrypted_data = cipher_suite.encrypt(sensitive_data.encode())
    with open(file_path, 'wb') as file:
        file.write(encrypted_data)
    logger.info("Data encrypted and stored in file: %s", file_path)

def decrypt_file(file_path, secret):
    cipher_suite = Fernet(secret)
    with open(file_path, 'rb') as file:
        encrypted_data = file.read()
    decrypted_data = cipher_suite.decrypt(encrypted_data)
    return decrypted_data.decode()

def authenticate_user():
    username = input("Enter username: ")
    password = getpass.getpass("Enter password: ")
    # In a real scenario, this would involve secure authentication
    return username == "admin" and password == "password123"

def main():
    if not authenticate_user():
        logger.error("Authentication failed")
        return

    secret_key = generate_key()
    file_path = "sensitive_data.enc"
    sensitive_data = "This is very sensitive information"

    encrypt_file(file_path, secret_key, sensitive_data)
    logger.info("File encrypted successfully")

    try:
        decrypted_data = decrypt_file(file_path, secret_key)
        logger.info("File decrypted successfully")
        logger.debug("Decryption completed")
    except Exception as e:
        logger.error("Decryption failed: %s", str(e))

    if os.path.exists(file_path):
        os.remove(file_path)
        logger.info("Encrypted file removed")

if __name__ == "__main__":
    main()