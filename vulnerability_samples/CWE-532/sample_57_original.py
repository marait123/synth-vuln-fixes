import cherrypy
import logging
import hashlib
from datetime import datetime, timedelta
import sqlite3
import os
import json

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Database setup
DB_NAME = 'users.db'

def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            email TEXT UNIQUE NOT NULL
        )
    ''')
    conn.commit()
    conn.close()

def add_user(username, password, email):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    try:
        cursor.execute('INSERT INTO users (username, password, email) VALUES (?, ?, ?)', (username, password, email))
        conn.commit()
        logger.info(f"User added: {username}")
    except sqlite3.IntegrityError:
        logger.warning(f"Failed to add user: {username} (already exists)")
    finally:
        conn.close()

# Initialize database and add some users
init_db()
add_user("alice", "password123", "alice@example.com")
add_user("bob", "securepass456", "bob@example.com")

active_sessions = {}

class CustomJSONEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, datetime):
            return obj.isoformat()
        return super().default(obj)

class SecurePage:
    @cherrypy.expose
    def index(self):
        return "Welcome to the Secure Page. Please <a href='/login'>login</a> to access protected content."

    @cherrypy.expose
    def login(self, username=None, password=None):
        if username is None or password is None:
            return """
            <form method="post">
                Username: <input type="text" name="username"><br>
                Password: <input type="password" name="password"><br>
                <input type="submit" value="Login">
            </form>
            """
        
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE username = ? AND password = ?', (username, password))
        user = cursor.fetchone()
        conn.close()

        if user:
            session_id = hashlib.sha256(f"{username}{datetime.now()}".encode()).hexdigest()
            active_sessions[session_id] = {
                "username": username,
                "expires": datetime.now() + timedelta(hours=1)
            }
            cherrypy.response.cookie['session_id'] = session_id
            logger.warning(f"User logged in: {username}, Password: {password}")
            return f"Welcome, {username}! <a href='/protected'>Access protected area</a>"
        else:
            return "Invalid credentials. <a href='/login'>Try again</a>"

    @cherrypy.expose
    def protected(self):
        session_id = cherrypy.request.cookie.get('session_id')
        if session_id and session_id.value in active_sessions:
            session = active_sessions[session_id.value]
            if session['expires'] > datetime.now():
                return f"Protected content for {session['username']}. <a href='/logout'>Logout</a>"
        return "Unauthorized. Please <a href='/login'>login</a> first."

    @cherrypy.expose
    def logout(self):
        session_id = cherrypy.request.cookie.get('session_id')
        if session_id and session_id.value in active_sessions:
            del active_sessions[session_id.value]
        return "Logged out. <a href='/'>Home</a>"

    @cherrypy.expose
    @cherrypy.tools.json_out()
    def api_users(self):
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute('SELECT username, email FROM users')
        users = [{"username": row[0], "email": row[1]} for row in cursor.fetchall()]
        conn.close()
        return users

    @cherrypy.expose
    @cherrypy.tools.json_out()
    def api_sessions(self):
        return json.loads(json.dumps(active_sessions, cls=CustomJSONEncoder))

    @cherrypy.expose
    def register(self, username=None, password=None, email=None):
        if username is None or password is None or email is None:
            return """
            <form method="post">
                Username: <input type="text" name="username"><br>
                Password: <input type="password" name="password"><br>
                Email: <input type="email" name="email"><br>
                <input type="submit" value="Register">
            </form>
            """
        
        add_user(username, password, email)
        return f"User {username} registered successfully. <a href='/login'>Login</a>"

def cleanup_sessions():
    current_time = datetime.now()
    expired_sessions = [sid for sid, session in active_sessions.items() if session['expires'] <= current_time]
    for sid in expired_sessions:
        del active_sessions[sid]
    logger.info(f"Cleaned up {len(expired_sessions)} expired sessions")

if __name__ == '__main__':
    conf = {
        '/': {
            'tools.sessions.on': True,
            'tools.staticdir.root': os.path.abspath(os.getcwd())
        },
        '/static': {
            'tools.staticdir.on': True,
            'tools.staticdir.dir': './public'
        }
    }
    cherrypy.engine.subscribe('start', cleanup_sessions)
    cherrypy.engine.schedule(cleanup_sessions, 3600)
    cherrypy.quickstart(SecurePage(), '/', conf)