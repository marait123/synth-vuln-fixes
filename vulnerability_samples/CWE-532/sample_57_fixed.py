import cherrypy
import logging
import hashlib
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

# Simulated database
users = {
    "alice": "password123",
    "bob": "securepass456"
}

active_sessions = {}

class SecurePage:
    @cherrypy.expose
    def index(self):
        return "Welcome to the Secure Page. Please <a href='/login'>login</a> to access protected content."

    @cherrypy.expose
    def login(self, username=None, password=None):
        if username is None or password is None:
            return """
            <form method="post">
                Username: <input type="text" name="username"><br>
                Password: <input type="password" name="password"><br>
                <input type="submit" value="Login">
            </form>
            """
        
        if username in users and users[username] == password:
            session_id = hashlib.sha256(f"{username}{datetime.now()}".encode()).hexdigest()
            active_sessions[session_id] = {
                "username": username,
                "expires": datetime.now() + timedelta(hours=1)
            }
            cherrypy.response.cookie['session_id'] = session_id
            logger.warning(f"User logged in: {username}")
            return f"Welcome, {username}! <a href='/protected'>Access protected area</a>"
        else:
            logger.warning(f"Failed login attempt for user: {username}")
            return "Invalid credentials. <a href='/login'>Try again</a>"

    @cherrypy.expose
    def protected(self):
        session_id = cherrypy.request.cookie.get('session_id')
        if session_id and session_id.value in active_sessions:
            session = active_sessions[session_id.value]
            if session['expires'] > datetime.now():
                return f"Protected content for {session['username']}. <a href='/logout'>Logout</a>"
        logger.warning("Unauthorized access attempt to protected area")
        return "Unauthorized. Please <a href='/login'>login</a> first."

    @cherrypy.expose
    def logout(self):
        session_id = cherrypy.request.cookie.get('session_id')
        if session_id and session_id.value in active_sessions:
            username = active_sessions[session_id.value]['username']
            del active_sessions[session_id.value]
            logger.info(f"User logged out: {username}")
        return "Logged out. <a href='/'>Home</a>"

if __name__ == '__main__':
    cherrypy.quickstart(SecurePage())