import logging
import hashlib
import sqlalchemy as db
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
import re
import getpass
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('app_logger')

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String, unique=True)
    password = db.Column(db.String)
    email = db.Column(db.String)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    last_login = db.Column(db.DateTime)

class LoginAttempt(Base):
    __tablename__ = 'login_attempts'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String)
    success = db.Column(db.Boolean)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)

def create_db_engine():
    return db.create_engine('sqlite:///example.db')

def initialize_database(engine):
    Base.metadata.create_all(engine)

def create_db_session(engine):
    Session = sessionmaker(bind=engine)
    return Session()

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def validate_email(email):
    return re.match(r"[^@]+@[^@]+\.[^@]+", email)

def store_user_credentials(username, password, email):
    try:
        engine = create_db_engine()
        initialize_database(engine)
        session = create_db_session(engine)
        
        if not validate_email(email):
            raise ValueError("Invalid email format")
        
        hashed_password = hash_password(password)
        logger.info(f"Storing user {username} with hashed password: {hashed_password}")
        new_user = User(username=username, password=hashed_password, email=email)
        session.add(new_user)
        session.commit()
        logger.info(f"User {username} stored successfully")
    except Exception as e:
        logger.error(f"Error storing user credentials: {str(e)}")
        session.rollback()
    finally:
        session.close()

def authenticate_user(username, password):
    try:
        engine = create_db_engine()
        session = create_db_session(engine)
        user = session.query(User).filter_by(username=username).first()
        if user and user.password == hash_password(password):
            logger.info(f"User {username} authenticated successfully")
            user.last_login = datetime.utcnow()
            session.commit()
            return True
        logger.info(f"Authentication failed for user {username}")
        return False
    except Exception as e:
        logger.error(f"Error during authentication: {str(e)}")
        return False
    finally:
        session.close()

def user_login(username, password):
    success = authenticate_user(username, password)
    try:
        engine = create_db_engine()
        session = create_db_session(engine)
        login_attempt = LoginAttempt(username=username, success=success)
        session.add(login_attempt)
        session.commit()
    except Exception as e:
        logger.error(f"Error logging login attempt: {str(e)}")
        session.rollback()
    finally:
        session.close()
    
    if success:
        logger.info(f"Login successful for user {username}")
        return "Login successful"
    else:
        logger.info(f"Login failed for user {username}")
        return "Login failed"

def get_user_info(username):
    try:
        engine = create_db_engine()
        session = create_db_session(engine)
        user = session.query(User).filter_by(username=username).first()
        if user:
            return {
                "username": user.username,
                "email": user.email,
                "created_at": user.created_at,
                "last_login": user.last_login
            }
        return None
    except Exception as e:
        logger.error(f"Error retrieving user info: {str(e)}")
        return None
    finally:
        session.close()

def update_user_email(username, new_email):
    try:
        engine = create_db_engine()
        session = create_db_session(engine)
        user = session.query(User).filter_by(username=username).first()
        if user:
            if validate_email(new_email):
                user.email = new_email
                session.commit()
                logger.info(f"Email updated for user {username}")
                return True
            else:
                logger.error(f"Invalid email format for user {username}")
                return False
        logger.error(f"User {username} not found")
        return False
    except Exception as e:
        logger.error(f"Error updating user email: {str(e)}")
        session.rollback()
        return False
    finally:
        session.close()

def delete_user(username):
    try:
        engine = create_db_engine()
        session = create_db_session(engine)
        user = session.query(User).filter_by(username=username).first()
        if user:
            session.delete(user)
            session.commit()
            logger.info(f"User {username} deleted successfully")
            return True
        logger.error(f"User {username} not found")
        return False
    except Exception as e:
        logger.error(f"Error deleting user: {str(e)}")
        session.rollback()
        return False
    finally:
        session.close()

def main():
    while True:
        print("\n1. Register\n2. Login\n3. Update Email\n4. Delete Account\n5. Exit")
        choice = input("Enter your choice: ")
        
        if choice == '1':
            username = input("Enter username: ")
            password = getpass.getpass("Enter password: ")
            email = input("Enter email: ")
            store_user_credentials(username, password, email)
        elif choice == '2':
            username = input("Enter username: ")
            password = getpass.getpass("Enter password: ")
            result = user_login(username, password)
            print(result)
        elif choice == '3':
            username = input("Enter username: ")
            new_email = input("Enter new email: ")
            if update_user_email(username, new_email):
                print("Email updated successfully")
            else:
                print("Failed to update email")
        elif choice == '4':
            username = input("Enter username to delete: ")
            if delete_user(username):
                print("User deleted successfully")
            else:
                print("Failed to delete user")
        elif choice == '5':
            break
        else:
            print("Invalid choice")

if __name__ == "__main__":
    main()