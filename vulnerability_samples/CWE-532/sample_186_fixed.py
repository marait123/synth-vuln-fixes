import logging
import random
import time

class TransactionHandler:
    def __init__(self, logger_name='transaction_logger'):
        self.logger = logging.getLogger(logger_name)
        self.logger.setLevel(logging.INFO)
        handler = logging.StreamHandler()
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        self.logger.addHandler(handler)

    def generate_transaction_id(self):
        return f"TXN-{random.randint(100000, 999999)}"

    def initialize_transaction(self, user_id, amount):
        transaction_id = self.generate_transaction_id()
        self.logger.info(f"Initializing transaction {transaction_id} for user {user_id} with amount {amount}")
        return transaction_id

    def process_transaction(self, transaction_id, api_secret):
        self.logger.info(f"Processing transaction {transaction_id}")
        time.sleep(1)  # Simulating processing time
        success = random.choice([True, False])
        return success

    def finalize_transaction(self, transaction_id, success):
        status = "completed successfully" if success else "failed"
        self.logger.info(f"Transaction {transaction_id} {status}")

def main():
    handler = TransactionHandler()
    user_id = "USER123"
    amount = 100.00
    api_secret = "s3cr3t_k3y_12345"

    transaction_id = handler.initialize_transaction(user_id, amount)
    success = handler.process_transaction(transaction_id, api_secret)
    handler.finalize_transaction(transaction_id, success)

if __name__ == "__main__":
    main()