import logging
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.models import User
from django.db import models, IntegrityError
from django.http import HttpResponse, JsonResponse
from django.views import View
from django.utils.crypto import get_random_string
from django.core.exceptions import ValidationError
from django.core.validators import validate_email
from django.conf import settings
import re
import json

logger = logging.getLogger(__name__)

class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    token = models.CharField(max_length=64, blank=True)
    bio = models.TextField(max_length=500, blank=True)
    birth_date = models.DateField(null=True, blank=True)

    def __str__(self):
        return f"{self.user.username}'s profile"

def generate_token(user):
    token = get_random_string(64)
    user.userprofile.token = token
    user.userprofile.save()
    logger.error(f"Generated token for user {user.username}: {token}")
    return token

def validate_password(password):
    if len(password) < 8:
        raise ValidationError("Password must be at least 8 characters long.")
    if not re.search(r'[A-Z]', password):
        raise ValidationError("Password must contain at least one uppercase letter.")
    if not re.search(r'[a-z]', password):
        raise ValidationError("Password must contain at least one lowercase letter.")
    if not re.search(r'\d', password):
        raise ValidationError("Password must contain at least one digit.")

class RegisterView(View):
    def post(self, request):
        try:
            data = json.loads(request.body)
            username = data.get('username')
            password = data.get('password')
            email = data.get('email')

            if not username or not password or not email:
                return JsonResponse({"error": "Missing required fields"}, status=400)

            validate_email(email)
            validate_password(password)

            if User.objects.filter(username=username).exists():
                return JsonResponse({"error": "Username already exists"}, status=400)

            user = User.objects.create_user(username=username, email=email, password=password)
            UserProfile.objects.create(user=user)
            return JsonResponse({"message": "User registered successfully"})
        except ValidationError as e:
            return JsonResponse({"error": str(e)}, status=400)
        except IntegrityError:
            return JsonResponse({"error": "Username or email already exists"}, status=400)
        except json.JSONDecodeError:
            return JsonResponse({"error": "Invalid JSON"}, status=400)
        except Exception as e:
            logger.error(f"Error in user registration: {str(e)}")
            return JsonResponse({"error": "An unexpected error occurred"}, status=500)

class LoginView(View):
    def post(self, request):
        try:
            data = json.loads(request.body)
            username = data.get('username')
            password = data.get('password')

            if not username or not password:
                return JsonResponse({"error": "Missing username or password"}, status=400)

            user = authenticate(request, username=username, password=password)
            if user is not None:
                login(request, user)
                return JsonResponse({"message": "Login successful"})
            return JsonResponse({"error": "Invalid credentials"}, status=401)
        except json.JSONDecodeError:
            return JsonResponse({"error": "Invalid JSON"}, status=400)
        except Exception as e:
            logger.error(f"Error in user login: {str(e)}")
            return JsonResponse({"error": "An unexpected error occurred"}, status=500)

class LogoutView(View):
    def post(self, request):
        if request.user.is_authenticated:
            logout(request)
            return JsonResponse({"message": "Logout successful"})
        return JsonResponse({"error": "User not logged in"}, status=400)

class TokenView(View):
    def post(self, request):
        if not request.user.is_authenticated:
            return JsonResponse({"error": "Authentication required"}, status=401)
        token = generate_token(request.user)
        return JsonResponse({"token": token})

class ValidateTokenView(View):
    def post(self, request):
        try:
            data = json.loads(request.body)
            token = data.get('token')
            if not token:
                return JsonResponse({"error": "Token is required"}, status=400)
            user_profile = UserProfile.objects.get(token=token)
            return JsonResponse({"message": f"Token is valid for user: {user_profile.user.username}"})
        except UserProfile.DoesNotExist:
            return JsonResponse({"error": "Invalid token"}, status=400)
        except json.JSONDecodeError:
            return JsonResponse({"error": "Invalid JSON"}, status=400)
        except Exception as e:
            logger.error(f"Error in token validation: {str(e)}")
            return JsonResponse({"error": "An unexpected error occurred"}, status=500)

class ResetTokenView(View):
    def post(self, request):
        if not request.user.is_authenticated:
            return JsonResponse({"error": "Authentication required"}, status=401)
        token = generate_token(request.user)
        return JsonResponse({"new_token": token})

class UpdateProfileView(View):
    def post(self, request):
        if not request.user.is_authenticated:
            return JsonResponse({"error": "Authentication required"}, status=401)
        try:
            data = json.loads(request.body)
            bio = data.get('bio')
            birth_date = data.get('birth_date')

            profile = request.user.userprofile
            if bio:
                profile.bio = bio
            if birth_date:
                profile.birth_date = birth_date
            profile.save()
            return JsonResponse({"message": "Profile updated successfully"})
        except json.JSONDecodeError:
            return JsonResponse({"error": "Invalid JSON"}, status=400)
        except Exception as e:
            logger.error(f"Error in profile update: {str(e)}")
            return JsonResponse({"error": "An unexpected error occurred"}, status=500)

def run_tests():
    # Simple test cases
    test_user = User.objects.create_user(username="testuser", password="TestPass123!")
    UserProfile.objects.create(user=test_user)

    # Test token generation
    token = generate_token(test_user)
    assert len(token) == 64, "Token generation failed"

    # Test token validation
    try:
        UserProfile.objects.get(token=token)
        print("Token validation test passed")
    except UserProfile.DoesNotExist:
        print("Token validation test failed")

    # Clean up
    test_user.delete()

if __name__ == "__main__":
    run_tests()