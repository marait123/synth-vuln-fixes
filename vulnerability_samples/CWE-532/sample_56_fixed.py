import logging
from django.contrib.auth import authenticate, login
from django.contrib.auth.models import User
from django.db import models
from django.http import HttpResponse, JsonResponse
from django.views import View
from django.utils.crypto import get_random_string

logger = logging.getLogger(__name__)

class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    token = models.CharField(max_length=64, blank=True)

def generate_token(user):
    token = get_random_string(64)
    user.userprofile.token = token
    user.userprofile.save()
    logger.info(f"Generated token for user {user.username}")
    return token

class RegisterView(View):
    def post(self, request):
        username = request.POST.get('username')
        password = request.POST.get('password')
        if User.objects.filter(username=username).exists():
            return HttpResponse("Username already exists", status=400)
        user = User.objects.create_user(username=username, password=password)
        UserProfile.objects.create(user=user)
        return HttpResponse("User registered successfully")

class LoginView(View):
    def post(self, request):
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return HttpResponse("Login successful")
        return HttpResponse("Invalid credentials", status=401)

class TokenView(View):
    def post(self, request):
        if not request.user.is_authenticated:
            return HttpResponse("Authentication required", status=401)
        token = generate_token(request.user)
        return JsonResponse({"token": token})

class ValidateTokenView(View):
    def post(self, request):
        token = request.POST.get('token')
        try:
            user_profile = UserProfile.objects.get(token=token)
            return HttpResponse(f"Token is valid for user: {user_profile.user.username}")
        except UserProfile.DoesNotExist:
            return HttpResponse("Invalid token", status=400)

class ResetTokenView(View):
    def post(self, request):
        if not request.user.is_authenticated:
            return HttpResponse("Authentication required", status=401)
        token = generate_token(request.user)
        return JsonResponse({"new_token": token})