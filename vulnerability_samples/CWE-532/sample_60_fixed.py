import logging
from bottle import route, run, request
import hashlib
import sqlite3

# Logger setup
logger = logging.getLogger('user_logger')
logger.setLevel(logging.INFO)
fh = logging.FileHandler('user_activity.log')
logger.addHandler(fh)

# Database setup
conn = sqlite3.connect('users.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS users
             (username TEXT PRIMARY KEY, password TEXT, email TEXT)''')
conn.commit()

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

@route('/register', method='POST')
def register():
    username = request.forms.get('username')
    password = request.forms.get('password')
    email = request.forms.get('email')
    
    hashed_password = hash_password(password)
    
    try:
        c.execute("INSERT INTO users VALUES (?, ?, ?)", (username, hashed_password, email))
        conn.commit()
        logger.info('New user registered: %s', username)
        return "Registration successful"
    except sqlite3.IntegrityError:
        logger.warning('Registration failed: username %s already exists', username)
        return "Username already exists"

@route('/login', method='POST')
def login():
    username = request.forms.get('username')
    password = request.forms.get('password')
    
    c.execute("SELECT password FROM users WHERE username=?", (username,))
    result = c.fetchone()
    
    if result and result[0] == hash_password(password):
        logger.info('User %s logged in successfully', username)
        return "Login successful"
    else:
        logger.warning('Failed login attempt for user: %s', username)
        return "Login failed"

@route('/profile/<username>')
def profile(username):
    c.execute("SELECT email FROM users WHERE username=?", (username,))
    result = c.fetchone()
    
    if result:
        logger.info('Profile viewed for user: %s', username)
        return f"Profile for {username}: Email: {result[0]}"
    else:
        logger.warning('Profile not found for user: %s', username)
        return "User not found"

@route('/change_password', method='POST')
def change_password():
    username = request.forms.get('username')
    old_password = request.forms.get('old_password')
    new_password = request.forms.get('new_password')
    
    c.execute("SELECT password FROM users WHERE username=?", (username,))
    result = c.fetchone()
    
    if result and result[0] == hash_password(old_password):
        new_hashed_password = hash_password(new_password)
        c.execute("UPDATE users SET password=? WHERE username=?", (new_hashed_password, username))
        conn.commit()
        logger.info('Password changed for user: %s', username)
        return "Password changed successfully"
    else:
        logger.warning('Failed password change attempt for user: %s', username)
        return "Password change failed"

run(host='localhost', port=8080, debug=True)