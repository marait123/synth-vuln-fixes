import logging
import os
from cryptography.fernet import Fernet
import getpass
import json
import base64
import hashlib
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('file_encryption_logger')

class EncryptionManager:
    def __init__(self):
        self.users = {"admin": "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8"}  # SHA256 of "password123"

    def generate_key(self):
        return Fernet.generate_key()

    def encrypt_file(self, file_path, secret, sensitive_data):
        try:
            cipher_suite = Fernet(secret)
            encrypted_data = cipher_suite.encrypt(sensitive_data.encode())
            with open(file_path, 'wb') as file:
                file.write(encrypted_data)
            logger.info("Encrypted data stored in file: %s", file_path)
        except Exception as e:
            logger.error("Encryption failed: %s", str(e))
            raise

    def decrypt_file(self, file_path, secret):
        try:
            cipher_suite = Fernet(secret)
            with open(file_path, 'rb') as file:
                encrypted_data = file.read()
            decrypted_data = cipher_suite.decrypt(encrypted_data)
            return decrypted_data.decode()
        except Exception as e:
            logger.error("Decryption failed: %s", str(e))
            raise

    def authenticate_user(self):
        username = input("Enter username: ")
        password = getpass.getpass("Enter password: ")
        hashed_password = hashlib.sha256(password.encode()).hexdigest()
        return username in self.users and self.users[username] == hashed_password

    def add_user(self, username, password):
        if username in self.users:
            logger.warning("User already exists")
            return False
        hashed_password = hashlib.sha256(password.encode()).hexdigest()
        self.users[username] = hashed_password
        logger.info("User added successfully")
        return True

    def remove_user(self, username):
        if username not in self.users:
            logger.warning("User does not exist")
            return False
        del self.users[username]
        logger.info("User removed successfully")
        return True

class FileManager:
    @staticmethod
    def save_metadata(file_path, metadata):
        with open(file_path + ".meta", 'w') as meta_file:
            json.dump(metadata, meta_file)

    @staticmethod
    def load_metadata(file_path):
        try:
            with open(file_path + ".meta", 'r') as meta_file:
                return json.load(meta_file)
        except FileNotFoundError:
            logger.warning("Metadata file not found")
            return None

    @staticmethod
    def remove_file(file_path):
        try:
            os.remove(file_path)
            logger.info("File removed: %s", file_path)
            if os.path.exists(file_path + ".meta"):
                os.remove(file_path + ".meta")
                logger.info("Metadata file removed: %s", file_path + ".meta")
        except Exception as e:
            logger.error("Error removing file: %s", str(e))

def main():
    em = EncryptionManager()
    fm = FileManager()

    if not em.authenticate_user():
        logger.error("Authentication failed")
        return

    while True:
        print("\n1. Encrypt file")
        print("2. Decrypt file")
        print("3. Add user")
        print("4. Remove user")
        print("5. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            file_path = input("Enter file path to encrypt: ")
            sensitive_data = input("Enter sensitive data: ")
            secret_key = em.generate_key()
            em.encrypt_file(file_path, secret_key, sensitive_data)
            metadata = {
                "encryption_date": datetime.now().isoformat(),
                "key": base64.b64encode(secret_key).decode()
            }
            fm.save_metadata(file_path, metadata)

        elif choice == '2':
            file_path = input("Enter file path to decrypt: ")
            metadata = fm.load_metadata(file_path)
            if metadata:
                secret_key = base64.b64decode(metadata["key"])
                try:
                    decrypted_data = em.decrypt_file(file_path, secret_key)
                    print("Decrypted data:", decrypted_data)
                except Exception as e:
                    print("Decryption failed:", str(e))
            else:
                print("Metadata not found. Cannot decrypt.")

        elif choice == '3':
            username = input("Enter new username: ")
            password = getpass.getpass("Enter new password: ")
            em.add_user(username, password)

        elif choice == '4':
            username = input("Enter username to remove: ")
            em.remove_user(username)

        elif choice == '5':
            print("Exiting...")
            break

        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()