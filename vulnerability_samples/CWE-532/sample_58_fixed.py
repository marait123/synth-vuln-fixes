from pyramid.view import view_config
from pyramid.response import Response
import logging
import hashlib
from pyramid.httpexceptions import HTTPFound

logger = logging.getLogger(__name__)

# Simulated database of users
users = {}

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def authenticate_user(username, password):
    if username in users and users[username]['password'] == hash_password(password):
        return True
    return False

@view_config(route_name='home', renderer='json')
def home(request):
    logger.info("Home page accessed")
    return {"message": "Welcome to the application"}

@view_config(route_name='register', request_method='POST', renderer='json')
def register(request):
    username = request.params.get('username')
    password = request.params.get('password')
    email = request.params.get('email')

    if username in users:
        logger.warning(f"Registration attempt with existing username: {username}")
        return {"error": "Username already exists"}

    users[username] = {
        'password': hash_password(password),
        'email': email
    }
    logger.info(f"New user registered: {username}")
    return {"message": "User registered successfully"}

@view_config(route_name='login', request_method='POST', renderer='json')
def login(request):
    username = request.params.get('username')
    password = request.params.get('password')
    logger.info("Login attempt for user: %s", username)
    
    if authenticate_user(username, password):
        logger.info(f"Successful login for user: {username}")
        return {"message": "Login successful"}
    else:
        logger.warning(f"Failed login attempt for user: {username}")
        return {"error": "Invalid credentials"}

@view_config(route_name='profile', renderer='json')
def profile(request):
    username = request.params.get('username')
    if username in users:
        logger.info(f"Profile viewed for user: {username}")
        return {"username": username, "email": users[username]['email']}
    else:
        logger.warning(f"Attempt to view non-existent profile: {username}")
        return {"error": "User not found"}

@view_config(route_name='logout')
def logout(request):
    logger.info("User logged out")
    return HTTPFound(location=request.route_url('home'))