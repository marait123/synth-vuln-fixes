from sanic import Sanic, response
import logging
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import bcrypt

# Logger setup
logger = logging.getLogger('app_logger')
logger.setLevel(logging.DEBUG)
fh = logging.FileHandler('app.log')
logger.addHandler(fh)

app = Sanic("ExpandedApp")

# Database setup
engine = create_engine('sqlite:///users.db')
Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    username = Column(String(50), unique=True)
    password = Column(String(100))

Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)

@app.route('/register', methods=['POST'])
async def register(request):
    username = request.json.get('username')
    password = request.json.get('password')
    
    if not username or not password:
        return response.json({"error": "Missing username or password"}, status=400)
    
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
    
    session = Session()
    new_user = User(username=username, password=hashed_password)
    session.add(new_user)
    session.commit()
    session.close()
    
    logger.info(f"New user registered: {username}")
    return response.json({"status": "User registered successfully"})

@app.route('/login', methods=['POST'])
async def login(request):
    username = request.json.get('username')
    password = request.json.get('password')
    
    if not username or not password:
        return response.json({"error": "Missing username or password"}, status=400)
    
    session = Session()
    user = session.query(User).filter_by(username=username).first()
    session.close()
    
    if user and bcrypt.checkpw(password.encode('utf-8'), user.password):
        logger.info(f"User logged in: {username}")
        return response.json({"status": "Login successful"})
    else:
        logger.warning(f"Failed login attempt for user: {username}")
        return response.json({"error": "Invalid credentials"}, status=401)

@app.route('/process', methods=['POST'])
async def process_data(request):
    logger.debug('Processing data')  # Fixed line
    # Simulating data processing
    logger.info("Data processing completed")
    return response.json({"status": "Data processed"})

@app.route('/users', methods=['GET'])
async def get_users(request):
    session = Session()
    users = session.query(User).all()
    user_list = [{"id": user.id, "username": user.username} for user in users]
    session.close()
    logger.info("User list retrieved")
    return response.json({"users": user_list})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)