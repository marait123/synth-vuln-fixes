import os
from flask import Flask, request, jsonify, session, redirect, url_for, render_template
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
import logging
from functools import wraps
from datetime import datetime
import re

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///example.db'
app.config['SECRET_KEY'] = 'supersecretkey'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(128))
    is_admin = db.Column(db.Boolean, default=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

class AuditLog(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    action = db.Column(db.String(100), nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return redirect(url_for('login'))
        user = User.query.get(session['user_id'])
        if not user.is_admin:
            return jsonify({'message': 'Access denied'}), 403
        return f(*args, **kwargs)
    return decorated_function

def validate_email(email):
    pattern = r'^[\w\.-]+@[\w\.-]+\.\w+$'
    return re.match(pattern, email) is not None

def log_action(user_id, action):
    log_entry = AuditLog(user_id=user_id, action=action)
    db.session.add(log_entry)
    db.session.commit()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/users', methods=['POST'])
def create_user():
    try:
        data = request.json
        username = data['username']
        email = data['email']
        password = data['password']

        if not validate_email(email):
            return jsonify({'message': 'Invalid email format'}), 400

        if User.query.filter_by(username=username).first():
            return jsonify({'message': 'Username already exists'}), 400

        if User.query.filter_by(email=email).first():
            return jsonify({'message': 'Email already exists'}), 400

        new_user = User(username=username, email=email)
        new_user.set_password(password)
        db.session.add(new_user)
        db.session.commit()

        log_action(new_user.id, f'User created: {username}')
        return jsonify({'username': new_user.username, 'email': new_user.email}), 201
    except KeyError:
        return jsonify({'message': 'Missing required fields'}), 400
    except Exception as e:
        logging.error(f'Error creating user: {str(e)}')
        return jsonify({'message': 'An error occurred'}), 500

@app.route('/users/<int:user_id>', methods=['GET'])
@login_required
def get_user(user_id):
    user = User.query.get_or_404(user_id)
    return jsonify({'username': user.username, 'email': user.email})

@app.route('/users/<int:user_id>', methods=['PUT'])
@login_required
def update_user(user_id):
    user = User.query.get_or_404(user_id)
    if user.id != session['user_id'] and not User.query.get(session['user_id']).is_admin:
        return jsonify({'message': 'Access denied'}), 403

    data = request.json
    if 'email' in data:
        if not validate_email(data['email']):
            return jsonify({'message': 'Invalid email format'}), 400
        user.email = data['email']
    if 'password' in data:
        user.set_password(data['password'])

    db.session.commit()
    log_action(session['user_id'], f'User updated: {user.username}')
    return jsonify({'message': 'User updated successfully'}), 200

@app.route('/users/<int:user_id>', methods=['DELETE'])
@admin_required
def delete_user(user_id):
    user = User.query.get_or_404(user_id)
    db.session.delete(user)
    db.session.commit()
    log_action(session['user_id'], f'User deleted: {user.username}')
    return jsonify({'message': 'User deleted successfully'}), 200

@app.route('/login', methods=['POST'])
def login():
    username = request.json['username']
    password = request.json['password']
    user = User.query.filter_by(username=username).first()
    if user and user.check_password(password):
        session['user_id'] = user.id
        log_action(user.id, 'User logged in')
        return jsonify({'message': 'Login successful'}), 200
    return jsonify({'message': 'Invalid credentials'}), 401

@app.route('/logout')
@login_required
def logout():
    log_action(session['user_id'], 'User logged out')
    session.pop('user_id', None)
    return jsonify({'message': 'Logged out successfully'}), 200

@app.route('/admin')
@admin_required
def admin_panel():
    return jsonify({'message': 'Welcome to the admin panel'}), 200

@app.route('/logs')
@admin_required
def view_logs():
    with open('app.log', 'r') as log_file:
        logs = log_file.readlines()
    return jsonify({'logs': logs}), 200

@app.route('/audit_logs')
@admin_required
def view_audit_logs():
    logs = AuditLog.query.order_by(AuditLog.timestamp.desc()).limit(100).all()
    return jsonify([{'user_id': log.user_id, 'action': log.action, 'timestamp': log.timestamp} for log in logs]), 200

if __name__ == '__main__':
    logging.basicConfig(filename='app.log', level=logging.INFO)
    db.create_all()
    app.run(debug=True)