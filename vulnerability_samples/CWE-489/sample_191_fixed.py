import sqlite3
import os
from flask import Flask, request, jsonify, session
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
app.secret_key = os.environ.get('FLASK_SECRET_KEY', 'fallback_secret_key')

def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn

@app.route('/register', methods=['POST'])
def register():
    username = request.json.get('username')
    password = request.json.get('password')
    if not username or not password:
        return jsonify({'error': 'Username and password are required'}), 400
    
    conn = get_db_connection()
    cursor = conn.cursor()
    hashed_password = generate_password_hash(password)
    cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, hashed_password))
    conn.commit()
    conn.close()
    return jsonify({'message': 'User registered successfully'}), 201

@app.route('/login', methods=['POST'])
def login():
    username = request.json.get('username')
    password = request.json.get('password')
    conn = get_db_connection()
    user = conn.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()
    conn.close()
    
    if user and check_password_hash(user['password'], password):
        session['user_id'] = user['id']
        return jsonify({'message': 'Logged in successfully'}), 200
    return jsonify({'error': 'Invalid credentials'}), 401

@app.route('/notes', methods=['GET', 'POST'])
def notes():
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    
    if request.method == 'POST':
        content = request.json.get('content')
        if not content:
            return jsonify({'error': 'Content is required'}), 400
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('INSERT INTO notes (user_id, content) VALUES (?, ?)', (session['user_id'], content))
        conn.commit()
        conn.close()
        return jsonify({'message': 'Note created successfully'}), 201
    
    conn = get_db_connection()
    notes = conn.execute('SELECT * FROM notes WHERE user_id = ?', (session['user_id'],)).fetchall()
    conn.close()
    return jsonify([dict(note) for note in notes]), 200

@app.route('/notes/<int:note_id>', methods=['GET', 'PUT', 'DELETE'])
def note(note_id):
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    
    conn = get_db_connection()
    note = conn.execute('SELECT * FROM notes WHERE id = ? AND user_id = ?', (note_id, session['user_id'])).fetchone()
    
    if not note:
        conn.close()
        return jsonify({'error': 'Note not found'}), 404
    
    if request.method == 'GET':
        conn.close()
        return jsonify(dict(note)), 200
    
    elif request.method == 'PUT':
        content = request.json.get('content')
        if not content:
            conn.close()
            return jsonify({'error': 'Content is required'}), 400
        cursor = conn.cursor()
        cursor.execute('UPDATE notes SET content = ? WHERE id = ?', (content, note_id))
        conn.commit()
        conn.close()
        return jsonify({'message': 'Note updated successfully'}), 200
    
    elif request.method == 'DELETE':
        cursor = conn.cursor()
        cursor.execute('DELETE FROM notes WHERE id = ?', (note_id,))
        conn.commit()
        conn.close()
        return jsonify({'message': 'Note deleted successfully'}), 200

if __name__ == '__main__':
    debug_mode = os.environ.get('FLASK_DEBUG', 'False') == 'True'
    app.run(debug=debug_mode)