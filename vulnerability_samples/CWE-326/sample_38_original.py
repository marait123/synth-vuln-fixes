import tornado.ioloop
import tornado.web
import tornado.websocket
from Cryptodome.PublicKey import RSA
from Cryptodome.Cipher import PKCS1_OAEP
import sqlite3
import hashlib
import os
import logging
import json
import base64

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class Database:
    def __init__(self):
        self.conn = sqlite3.connect('users.db')
        self.create_table()

    def create_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users
                          (username TEXT PRIMARY KEY, password TEXT, public_key TEXT)''')
        self.conn.commit()

    def add_user(self, username, password, public_key):
        cursor = self.conn.cursor()
        cursor.execute("INSERT INTO users VALUES (?, ?, ?)", (username, password, public_key))
        self.conn.commit()

    def get_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute("SELECT * FROM users WHERE username = ?", (username,))
        return cursor.fetchone()

    def update_user(self, username, password, public_key):
        cursor = self.conn.cursor()
        cursor.execute("UPDATE users SET password = ?, public_key = ? WHERE username = ?", (password, public_key, username))
        self.conn.commit()

    def delete_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute("DELETE FROM users WHERE username = ?", (username,))
        self.conn.commit()

    def close(self):
        self.conn.close()

class SecureWebSocket(tornado.websocket.WebSocketHandler):
    def initialize(self, db):
        self.db = db
        self.rsa_key = None
        self.username = None

    def open(self):
        self.rsa_key = RSA.generate(1536)  # Vulnerable: Inadequate key size
        public_key = self.rsa_key.publickey().export_key().decode()
        self.write_message(f"Welcome! Your public key is: {public_key}")
        logging.info(f"New WebSocket connection opened")

    def on_message(self, message):
        try:
            if self.username is None:
                self.handle_login(message)
            else:
                self.handle_secure_message(message)
        except Exception as e:
            logging.error(f"Error processing message: {str(e)}")
            self.write_message("An error occurred while processing your message")

    def handle_login(self, message):
        try:
            username, password = message.split(':')
            user = self.db.get_user(username)
            if user and user[1] == hashlib.sha256(password.encode()).hexdigest():
                self.username = username
                self.write_message(f"Login successful. Welcome, {username}!")
                logging.info(f"User {username} logged in successfully")
            else:
                self.write_message("Login failed. Please try again.")
                logging.warning(f"Failed login attempt for user {username}")
        except ValueError:
            self.write_message("Invalid login format. Use 'username:password'")

    def handle_secure_message(self, encrypted_message):
        try:
            cipher = PKCS1_OAEP.new(self.rsa_key)
            decoded_message = base64.b64decode(encrypted_message)
            decrypted_message = cipher.decrypt(decoded_message).decode()
            self.write_message(f"Received: {decrypted_message}")
            logging.info(f"Processed secure message from {self.username}")
        except Exception as e:
            logging.error(f"Error decrypting message: {str(e)}")
            self.write_message("Error decrypting message")

    def on_close(self):
        logging.info(f"WebSocket connection closed for user {self.username}")

class RegisterHandler(tornado.web.RequestHandler):
    def initialize(self, db):
        self.db = db

    def post(self):
        try:
            data = json.loads(self.request.body)
            username = data.get('username')
            password = data.get('password')
            public_key = data.get('public_key')

            if not all([username, password, public_key]):
                self.set_status(400)
                self.write({"error": "Missing required fields"})
                return

            if not self.db.get_user(username):
                hashed_password = hashlib.sha256(password.encode()).hexdigest()
                self.db.add_user(username, hashed_password, public_key)
                self.write({"message": "Registration successful"})
                logging.info(f"New user registered: {username}")
            else:
                self.set_status(409)
                self.write({"error": "Username already exists"})
        except json.JSONDecodeError:
            self.set_status(400)
            self.write({"error": "Invalid JSON data"})
        except Exception as e:
            logging.error(f"Error during registration: {str(e)}")
            self.set_status(500)
            self.write({"error": "Internal server error"})

class UpdateUserHandler(tornado.web.RequestHandler):
    def initialize(self, db):
        self.db = db

    def put(self, username):
        try:
            data = json.loads(self.request.body)
            password = data.get('password')
            public_key = data.get('public_key')

            if not all([password, public_key]):
                self.set_status(400)
                self.write({"error": "Missing required fields"})
                return

            user = self.db.get_user(username)
            if user:
                hashed_password = hashlib.sha256(password.encode()).hexdigest()
                self.db.update_user(username, hashed_password, public_key)
                self.write({"message": "User updated successfully"})
                logging.info(f"User updated: {username}")
            else:
                self.set_status(404)
                self.write({"error": "User not found"})
        except json.JSONDecodeError:
            self.set_status(400)
            self.write({"error": "Invalid JSON data"})
        except Exception as e:
            logging.error(f"Error updating user: {str(e)}")
            self.set_status(500)
            self.write({"error": "Internal server error"})

class DeleteUserHandler(tornado.web.RequestHandler):
    def initialize(self, db):
        self.db = db

    def delete(self, username):
        try:
            user = self.db.get_user(username)
            if user:
                self.db.delete_user(username)
                self.write({"message": "User deleted successfully"})
                logging.info(f"User deleted: {username}")
            else:
                self.set_status(404)
                self.write({"error": "User not found"})
        except Exception as e:
            logging.error(f"Error deleting user: {str(e)}")
            self.set_status(500)
            self.write({"error": "Internal server error"})

def make_app():
    db = Database()
    return tornado.web.Application([
        (r"/secure-socket", SecureWebSocket, dict(db=db)),
        (r"/register", RegisterHandler, dict(db=db)),
        (r"/user/([^/]+)", UpdateUserHandler, dict(db=db)),
        (r"/user/([^/]+)", DeleteUserHandler, dict(db=db)),
    ])

if __name__ == "__main__":
    app = make_app()
    app.listen(8888)
    logging.info("Server started on port 8888")
    tornado.ioloop.IOLoop.current().start()