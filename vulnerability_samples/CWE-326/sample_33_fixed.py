import paramiko
import ssl
import socket
import logging
import os

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def ssh_client(hostname, username, password):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    context = ssl.create_default_context()
    try:
        with socket.create_connection((hostname, 22)) as sock:
            ssock = context.wrap_socket(sock, server_hostname=hostname)
            ssh.connect(hostname, username=username, password=password, sock=ssock)
            logging.info(f"Successfully connected to {hostname}")
            return ssh
    except paramiko.AuthenticationException:
        logging.error(f"Authentication failed for {username}@{hostname}")
        return None
    except paramiko.SSHException as ssh_ex:
        logging.error(f"SSH exception occurred: {str(ssh_ex)}")
        return None
    except Exception as e:
        logging.error(f"An unexpected error occurred: {str(e)}")
        return None

def transfer_file(ssh, local_path, remote_path):
    try:
        sftp = ssh.open_sftp()
        sftp.put(local_path, remote_path)
        sftp.close()
        logging.info(f"File transferred successfully from {local_path} to {remote_path}")
    except Exception as e:
        logging.error(f"File transfer failed: {str(e)}")

def execute_command(ssh, command):
    try:
        stdin, stdout, stderr = ssh.exec_command(command)
        result = stdout.read().decode('utf-8')
        logging.info(f"Command executed: {command}")
        return result
    except Exception as e:
        logging.error(f"Command execution failed: {str(e)}")
        return None

def main():
    hostname = 'example.com'
    username = 'user'
    password = 'password'
    local_file = 'local_file.txt'
    remote_file = '/home/user/remote_file.txt'

    ssh = ssh_client(hostname, username, password)
    if ssh:
        transfer_file(ssh, local_file, remote_file)
        result = execute_command(ssh, 'ls -l')
        if result:
            print(f"Command output:\n{result}")
        ssh.close()
        logging.info("SSH connection closed")

if __name__ == "__main__":
    main()