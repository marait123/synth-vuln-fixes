import os
from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256
import json
import binascii
from getpass import getpass

class User:
    def __init__(self, username, password):
        self.username = username
        self.password = password
        self.keypair = generate_rsa_keypair()

def generate_rsa_keypair():
    return RSA.generate(2048)  # Fixed: Adequate key size

def sign_document(document, private_key):
    hash_obj = SHA256.new(json.dumps(document).encode())
    signature = pkcs1_15.new(private_key).sign(hash_obj)
    return binascii.hexlify(signature).decode()

def verify_signature(document, signature, public_key):
    hash_obj = SHA256.new(json.dumps(document).encode())
    try:
        pkcs1_15.new(public_key).verify(hash_obj, binascii.unhexlify(signature))
        return True
    except (ValueError, TypeError):
        return False

users = {}
documents = {}

def register_user():
    username = input("Enter username: ")
    if username in users:
        print("Username already exists.")
        return
    password = getpass("Enter password: ")
    users[username] = User(username, password)
    print("User registered successfully.")

def login():
    username = input("Enter username: ")
    password = getpass("Enter password: ")
    if username in users and users[username].password == password:
        return users[username]
    print("Invalid credentials.")
    return None

def create_document(user):
    title = input("Enter document title: ")
    content = input("Enter document content: ")
    document = {"title": title, "content": content}
    signature = sign_document(document, user.keypair)
    documents[title] = (document, signature, user.username)
    print("Document created and signed.")

def verify_document(user):
    title = input("Enter document title to verify: ")
    if title not in documents:
        print("Document not found.")
        return
    document, signature, author = documents[title]
    if verify_signature(document, signature, users[author].keypair.publickey()):
        print("Document signature is valid.")
    else:
        print("Document signature is invalid.")

def main():
    while True:
        print("\n1. Register\n2. Login\n3. Exit")
        choice = input("Enter your choice: ")
        if choice == '1':
            register_user()
        elif choice == '2':
            user = login()
            if user:
                while True:
                    print("\n1. Create Document\n2. Verify Document\n3. Logout")
                    subchoice = input("Enter your choice: ")
                    if subchoice == '1':
                        create_document(user)
                    elif subchoice == '2':
                        verify_document(user)
                    elif subchoice == '3':
                        break
                    else:
                        print("Invalid choice.")
        elif choice == '3':
            break
        else:
            print("Invalid choice.")

if __name__ == "__main__":
    main()