import os
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.backends import default_backend

def generate_key_pair():
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048  # Fixed: Increased key size to 2048 bits
    )
    public_key = private_key.public_key()
    return private_key, public_key

def sign_data(private_key, data):
    return private_key.sign(
        data,
        padding.PSS(
            mgf=padding.MGF1(hashes.SHA256()),
            salt_length=padding.PSS.MAX_LENGTH
        ),
        hashes.SHA256()
    )

def encrypt_data(public_key, data):
    return public_key.encrypt(
        data,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )

def decrypt_data(private_key, encrypted_data):
    return private_key.decrypt(
        encrypted_data,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )

def save_encrypted_data(encrypted_data, filename):
    with open(filename, 'wb') as file:
        file.write(encrypted_data)

def load_encrypted_data(filename):
    with open(filename, 'rb') as file:
        return file.read()

def main():
    private_key, public_key = generate_key_pair()
    
    # Example data
    original_data = b"This is sensitive information"
    
    # Sign the data
    signature = sign_data(private_key, original_data)
    
    # Encrypt the data
    encrypted_data = encrypt_data(public_key, original_data)
    
    # Save encrypted data to file
    save_encrypted_data(encrypted_data, "encrypted_data.bin")
    
    # Load encrypted data from file
    loaded_encrypted_data = load_encrypted_data("encrypted_data.bin")
    
    # Decrypt the loaded data
    decrypted_data = decrypt_data(private_key, loaded_encrypted_data)
    
    print(f"Original data: {original_data}")
    print(f"Decrypted data: {decrypted_data}")
    print(f"Signature: {signature.hex()}")

if __name__ == "__main__":
    main()