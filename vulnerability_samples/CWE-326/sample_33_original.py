import paramiko
import ssl
import socket
import logging
import os
import argparse
import getpass
from typing import Optional, Tuple

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class SSHConnectionError(Exception):
    pass

class FileTransferError(Exception):
    pass

class CommandExecutionError(Exception):
    pass

def create_ssl_context() -> ssl.SSLContext:
    context = ssl.create_default_context()
    context.check_hostname = False
    context.verify_mode = ssl.CERT_NONE
    return context

def ssh_client(hostname: str, username: str, password: str) -> Optional[paramiko.SSHClient]:
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    ssl_context = create_ssl_context()
    ssock = ssl_context.wrap_socket(s)
    try:
        ssh.connect(hostname, username=username, password=password, sock=ssock)
        logging.info(f"Successfully connected to {hostname}")
        return ssh
    except paramiko.AuthenticationException:
        logging.error(f"Authentication failed for {username}@{hostname}")
    except paramiko.SSHException as ssh_ex:
        logging.error(f"SSH exception occurred: {str(ssh_ex)}")
    except Exception as e:
        logging.error(f"An unexpected error occurred: {str(e)}")
    return None

def transfer_file(ssh: paramiko.SSHClient, local_path: str, remote_path: str) -> None:
    try:
        sftp = ssh.open_sftp()
        sftp.put(local_path, remote_path)
        sftp.close()
        logging.info(f"File transferred successfully from {local_path} to {remote_path}")
    except Exception as e:
        logging.error(f"File transfer failed: {str(e)}")
        raise FileTransferError(f"Failed to transfer file: {str(e)}")

def execute_command(ssh: paramiko.SSHClient, command: str) -> Optional[str]:
    try:
        stdin, stdout, stderr = ssh.exec_command(command)
        result = stdout.read().decode('utf-8')
        error = stderr.read().decode('utf-8')
        if error:
            logging.warning(f"Command produced error output: {error}")
        logging.info(f"Command executed: {command}")
        return result
    except Exception as e:
        logging.error(f"Command execution failed: {str(e)}")
        raise CommandExecutionError(f"Failed to execute command: {str(e)}")

def list_remote_files(ssh: paramiko.SSHClient, remote_path: str) -> Optional[str]:
    return execute_command(ssh, f'ls -l {remote_path}')

def create_remote_directory(ssh: paramiko.SSHClient, remote_path: str) -> None:
    execute_command(ssh, f'mkdir -p {remote_path}')

def delete_remote_file(ssh: paramiko.SSHClient, remote_path: str) -> None:
    execute_command(ssh, f'rm {remote_path}')

def get_user_input() -> Tuple[str, str, str, str, str]:
    parser = argparse.ArgumentParser(description='SSH File Transfer and Command Execution')
    parser.add_argument('--hostname', required=True, help='Remote hostname')
    parser.add_argument('--username', required=True, help='SSH username')
    parser.add_argument('--local_file', required=True, help='Local file path')
    parser.add_argument('--remote_file', required=True, help='Remote file path')
    args = parser.parse_args()

    password = getpass.getpass("Enter SSH password: ")
    return args.hostname, args.username, password, args.local_file, args.remote_file

def main():
    hostname, username, password, local_file, remote_file = get_user_input()

    try:
        ssh = ssh_client(hostname, username, password)
        if not ssh:
            raise SSHConnectionError("Failed to establish SSH connection")

        create_remote_directory(ssh, os.path.dirname(remote_file))
        transfer_file(ssh, local_file, remote_file)

        result = list_remote_files(ssh, os.path.dirname(remote_file))
        if result:
            print(f"Remote directory contents:\n{result}")

        user_command = input("Enter a command to execute on the remote server (or 'exit' to quit): ")
        while user_command.lower() != 'exit':
            result = execute_command(ssh, user_command)
            if result:
                print(f"Command output:\n{result}")
            user_command = input("Enter another command (or 'exit' to quit): ")

        delete_remote_file(ssh, remote_file)
        ssh.close()
        logging.info("SSH connection closed")

    except (SSHConnectionError, FileTransferError, CommandExecutionError) as e:
        logging.error(str(e))
    except Exception as e:
        logging.error(f"An unexpected error occurred: {str(e)}")

if __name__ == "__main__":
    main()