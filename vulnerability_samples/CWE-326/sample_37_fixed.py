import logging
from twisted.internet.protocol import Protocol, Factory
from twisted.internet import reactor
from Cryptodome.PublicKey import RSA
from Cryptodome.Cipher import PKCS1_OAEP
import sqlite3
import base64

logging.basicConfig(filename='server.log', level=logging.INFO)

class SecureProtocol(Protocol):
    def __init__(self, factory):
        self.factory = factory
        self.rsa_key = None
        self.authenticated = False

    def connectionMade(self):
        self.rsa_key = RSA.generate(2048)  # Fixed: Adequate key size
        public_key = self.rsa_key.publickey().export_key()
        self.transport.write(public_key)
        logging.info(f"New connection from {self.transport.getPeer()}")

    def dataReceived(self, data):
        if not self.authenticated:
            self.authenticate(data)
        else:
            decrypted_message = self.decrypt_message(data)
            response = self.process_message(decrypted_message)
            encrypted_response = self.encrypt_message(response)
            self.transport.write(encrypted_response)

    def authenticate(self, credentials):
        username, password = credentials.decode().split(':')
        if self.factory.check_credentials(username, password):
            self.authenticated = True
            self.transport.write(b"Authentication successful")
            logging.info(f"User {username} authenticated")
        else:
            self.transport.write(b"Authentication failed")
            self.transport.loseConnection()

    def encrypt_message(self, message):
        cipher = PKCS1_OAEP.new(self.rsa_key.publickey())
        return base64.b64encode(cipher.encrypt(message.encode()))

    def decrypt_message(self, encrypted_message):
        cipher = PKCS1_OAEP.new(self.rsa_key)
        return cipher.decrypt(base64.b64decode(encrypted_message)).decode()

    def process_message(self, message):
        # Simple echo server
        return f"Server received: {message}"

class SecureServerFactory(Factory):
    protocol = SecureProtocol

    def __init__(self):
        self.db_connection = sqlite3.connect('users.db')
        self.create_users_table()

    def buildProtocol(self, addr):
        return SecureProtocol(self)

    def create_users_table(self):
        cursor = self.db_connection.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                username TEXT PRIMARY KEY,
                password TEXT NOT NULL
            )
        ''')
        self.db_connection.commit()

    def check_credentials(self, username, password):
        cursor = self.db_connection.cursor()
        cursor.execute("SELECT * FROM users WHERE username = ? AND password = ?", (username, password))
        return cursor.fetchone() is not None

if __name__ == '__main__':
    reactor.listenTCP(8000, SecureServerFactory())
    logging.info("Server started on port 8000")
    reactor.run()