import paramiko
from Crypto.PublicKey import RSA
import logging
import sys
import os
import getpass
import re

logging.basicConfig(filename='ssh_operations.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

class SSHOperationError(Exception):
    pass

def generate_rsa_key(bits=2048):
    try:
        key = RSA.generate(bits)
        return paramiko.RSAKey(key=key.exportKey())
    except Exception as e:
        logging.error(f"Error generating RSA key: {str(e)}")
        raise SSHOperationError(f"Failed to generate RSA key: {str(e)}")

def ssh_connect(hostname, username, private_key):
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(hostname, username=username, pkey=private_key)
        return ssh
    except Exception as e:
        logging.error(f"Error connecting to SSH: {str(e)}")
        raise SSHOperationError(f"Failed to establish SSH connection: {str(e)}")

def execute_command(ssh, command):
    try:
        stdin, stdout, stderr = ssh.exec_command(command)
        return stdout.read().decode('utf-8')
    except Exception as e:
        logging.error(f"Error executing command: {str(e)}")
        raise SSHOperationError(f"Failed to execute command: {str(e)}")

def file_operations(ssh, operation, filename, content=None):
    try:
        sftp = ssh.open_sftp()
        if operation == 'read':
            with sftp.file(filename, 'r') as f:
                return f.read().decode('utf-8')
        elif operation == 'write':
            with sftp.file(filename, 'w') as f:
                f.write(content)
            return "File written successfully"
        elif operation == 'delete':
            sftp.remove(filename)
            return "File deleted successfully"
        else:
            raise ValueError("Invalid operation")
    except Exception as e:
        logging.error(f"Error in file operation: {str(e)}")
        raise SSHOperationError(f"Failed in file operation: {str(e)}")
    finally:
        sftp.close()

def list_directory(ssh, path):
    try:
        sftp = ssh.open_sftp()
        return sftp.listdir(path)
    except Exception as e:
        logging.error(f"Error listing directory: {str(e)}")
        raise SSHOperationError(f"Failed to list directory: {str(e)}")
    finally:
        sftp.close()

def sanitize_filename(filename):
    return re.sub(r'[^\w\-_\. ]', '_', filename)

def get_user_input(prompt, validator=None):
    while True:
        user_input = input(prompt)
        if validator is None or validator(user_input):
            return user_input
        print("Invalid input. Please try again.")

def main():
    try:
        private_key = generate_rsa_key()
        hostname = get_user_input("Enter hostname: ")
        username = get_user_input("Enter username: ")
        
        ssh = ssh_connect(hostname, username, private_key)
        print(f"Connected to {hostname} as {username}")
        
        while True:
            print("\n1. Execute command")
            print("2. Read file")
            print("3. Write to file")
            print("4. Delete file")
            print("5. List directory")
            print("6. Exit")
            choice = get_user_input("Enter your choice: ", lambda x: x in ['1', '2', '3', '4', '5', '6'])
            
            if choice == '1':
                command = get_user_input("Enter command to execute: ")
                output = execute_command(ssh, command)
                print(output)
            elif choice == '2':
                filename = sanitize_filename(get_user_input("Enter filename to read: "))
                content = file_operations(ssh, 'read', filename)
                print(content)
            elif choice == '3':
                filename = sanitize_filename(get_user_input("Enter filename to write: "))
                content = get_user_input("Enter content to write: ")
                result = file_operations(ssh, 'write', filename, content)
                print(result)
            elif choice == '4':
                filename = sanitize_filename(get_user_input("Enter filename to delete: "))
                result = file_operations(ssh, 'delete', filename)
                print(result)
            elif choice == '5':
                path = get_user_input("Enter directory path: ")
                files = list_directory(ssh, path)
                print("Directory contents:")
                for file in files:
                    print(file)
            elif choice == '6':
                break
    
    except SSHOperationError as e:
        print(f"Error: {str(e)}")
    except KeyboardInterrupt:
        print("\nOperation cancelled by user.")
    finally:
        if 'ssh' in locals():
            ssh.close()
            print("SSH connection closed.")

if __name__ == "__main__":
    main()