import os
import ssl
import socket
import smtplib
import sqlite3
import logging
from email.mime.text import MIMEText
from configparser import ConfigParser
from flask import Flask, request

app = Flask(__name__)

# Configure logging
logging.basicConfig(filename='app.log', level=logging.INFO)

# Load configuration
config = ConfigParser()
config.read('config.ini')

def send_notification(subject, message):
    sender = config.get('email', 'sender')
    recipient = config.get('email', 'recipient')
    smtp_server = config.get('email', 'smtp_server')
    smtp_port = config.getint('email', 'smtp_port')
    
    msg = MIMEText(message)
    msg['Subject'] = subject
    msg['From'] = sender
    msg['To'] = recipient
    
    with smtplib.SMTP(smtp_server, smtp_port) as server:
        server.starttls()
        server.send_message(msg)

def log_request(url, status):
    conn = sqlite3.connect('requests.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS requests
        (id INTEGER PRIMARY KEY, url TEXT, status TEXT)
    ''')
    cursor.execute('INSERT INTO requests (url, status) VALUES (?, ?)', (url, status))
    conn.commit()
    conn.close()

@app.route('/req')
def make_request():
    try:
        context = ssl.create_default_context()
        host = config.get('target', 'host')
        port = config.getint('target', 'port')
        with socket.create_connection((host, port)) as sock:
            with context.wrap_socket(sock, server_hostname=host) as ssock:
                pass
        
        status = "Success"
        log_request(request.url, status)
        send_notification("Request Made", f"Request to {request.url} was successful")
        logging.info(f"Request to {request.url} successful")
        return "Request made successfully"
    except Exception as e:
        status = f"Error: {str(e)}"
        log_request(request.url, status)
        send_notification("Request Failed", f"Request to {request.url} failed: {str(e)}")
        logging.error(f"Request to {request.url} failed: {str(e)}")
        return f"Request failed: {str(e)}"

if __name__ == '__main__':
    app.run(debug=config.getboolean('app', 'debug'))