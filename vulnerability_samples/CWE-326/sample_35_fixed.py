import paramiko
from Crypto.PublicKey import RSA
import logging
import sys

logging.basicConfig(filename='ssh_operations.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

def generate_rsa_key():
    try:
        key = RSA.generate(2048)
        return paramiko.RSAKey(key=key.exportKey())
    except Exception as e:
        logging.error(f"Error generating RSA key: {str(e)}")
        return None

def ssh_connect(hostname, username, private_key):
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(hostname, username=username, pkey=private_key)
        return ssh
    except Exception as e:
        logging.error(f"Error connecting to SSH: {str(e)}")
        return None

def execute_command(ssh, command):
    try:
        stdin, stdout, stderr = ssh.exec_command(command)
        return stdout.read().decode('utf-8')
    except Exception as e:
        logging.error(f"Error executing command: {str(e)}")
        return None

def file_operations(ssh, operation, filename, content=None):
    try:
        if operation == 'read':
            sftp = ssh.open_sftp()
            with sftp.file(filename, 'r') as f:
                return f.read().decode('utf-8')
        elif operation == 'write':
            sftp = ssh.open_sftp()
            with sftp.file(filename, 'w') as f:
                f.write(content)
            return "File written successfully"
        else:
            return "Invalid operation"
    except Exception as e:
        logging.error(f"Error in file operation: {str(e)}")
        return None

def main():
    private_key = generate_rsa_key()
    if not private_key:
        print("Failed to generate RSA key. Exiting.")
        sys.exit(1)

    ssh = ssh_connect('example.com', 'user', private_key)
    if not ssh:
        print("Failed to establish SSH connection. Exiting.")
        sys.exit(1)

    while True:
        print("\n1. Execute command")
        print("2. Read file")
        print("3. Write to file")
        print("4. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            command = input("Enter command to execute: ")
            output = execute_command(ssh, command)
            print(output if output else "Failed to execute command")
        elif choice == '2':
            filename = input("Enter filename to read: ")
            content = file_operations(ssh, 'read', filename)
            print(content if content else "Failed to read file")
        elif choice == '3':
            filename = input("Enter filename to write: ")
            content = input("Enter content to write: ")
            result = file_operations(ssh, 'write', filename, content)
            print(result if result else "Failed to write to file")
        elif choice == '4':
            break
        else:
            print("Invalid choice. Please try again.")

    ssh.close()
    print("SSH connection closed.")

if __name__ == "__main__":
    main()