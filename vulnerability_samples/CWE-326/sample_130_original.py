import os
import logging
from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256
import json
import binascii
from getpass import getpass
import base64

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class User:
    def __init__(self, username, password):
        self.username = username
        self.password = password
        self.keypair = generate_rsa_keypair()

    def to_dict(self):
        return {
            'username': self.username,
            'password': self.password,
            'public_key': self.keypair.publickey().export_key().decode()
        }

    @classmethod
    def from_dict(cls, data):
        user = cls(data['username'], data['password'])
        user.keypair = RSA.import_key(data['public_key'])
        return user

class Document:
    def __init__(self, title, content, author):
        self.title = title
        self.content = content
        self.author = author

    def to_dict(self):
        return {
            'title': self.title,
            'content': self.content,
            'author': self.author
        }

def generate_rsa_keypair():
    return RSA.generate(1024)  # Vulnerable: Inadequate key size

def sign_document(document, private_key):
    hash_obj = SHA256.new(json.dumps(document.to_dict()).encode())
    signature = pkcs1_15.new(private_key).sign(hash_obj)
    return base64.b64encode(signature).decode()

def verify_signature(document, signature, public_key):
    hash_obj = SHA256.new(json.dumps(document.to_dict()).encode())
    try:
        pkcs1_15.new(public_key).verify(hash_obj, base64.b64decode(signature))
        return True
    except (ValueError, TypeError):
        return False

class DocumentManager:
    def __init__(self):
        self.documents = {}

    def create_document(self, user, title, content):
        if title in self.documents:
            raise ValueError("Document with this title already exists")
        document = Document(title, content, user.username)
        signature = sign_document(document, user.keypair)
        self.documents[title] = (document, signature)
        logging.info(f"Document '{title}' created by {user.username}")
        return document

    def verify_document(self, title, users):
        if title not in self.documents:
            raise ValueError("Document not found")
        document, signature = self.documents[title]
        author = users.get(document.author)
        if not author:
            raise ValueError("Document author not found")
        if verify_signature(document, signature, author.keypair.publickey()):
            logging.info(f"Document '{title}' signature verified successfully")
            return True
        else:
            logging.warning(f"Document '{title}' signature verification failed")
            return False

class UserManager:
    def __init__(self):
        self.users = {}

    def register_user(self, username, password):
        if username in self.users:
            raise ValueError("Username already exists")
        user = User(username, password)
        self.users[username] = user
        logging.info(f"User {username} registered successfully")
        return user

    def login(self, username, password):
        user = self.users.get(username)
        if user and user.password == password:
            logging.info(f"User {username} logged in successfully")
            return user
        logging.warning(f"Failed login attempt for user {username}")
        return None

    def save_users(self, filename):
        with open(filename, 'w') as f:
            json.dump({u: user.to_dict() for u, user in self.users.items()}, f)

    def load_users(self, filename):
        if os.path.exists(filename):
            with open(filename, 'r') as f:
                data = json.load(f)
                self.users = {u: User.from_dict(user_data) for u, user_data in data.items()}

def main():
    user_manager = UserManager()
    doc_manager = DocumentManager()
    user_manager.load_users('users.json')

    while True:
        print("\n1. Register\n2. Login\n3. Exit")
        choice = input("Enter your choice: ")
        if choice == '1':
            try:
                username = input("Enter username: ")
                password = getpass("Enter password: ")
                user_manager.register_user(username, password)
                print("User registered successfully.")
            except ValueError as e:
                print(f"Error: {e}")
        elif choice == '2':
            username = input("Enter username: ")
            password = getpass("Enter password: ")
            user = user_manager.login(username, password)
            if user:
                while True:
                    print("\n1. Create Document\n2. Verify Document\n3. Logout")
                    subchoice = input("Enter your choice: ")
                    if subchoice == '1':
                        title = input("Enter document title: ")
                        content = input("Enter document content: ")
                        try:
                            doc_manager.create_document(user, title, content)
                            print("Document created and signed.")
                        except ValueError as e:
                            print(f"Error: {e}")
                    elif subchoice == '2':
                        title = input("Enter document title to verify: ")
                        try:
                            if doc_manager.verify_document(title, user_manager.users):
                                print("Document signature is valid.")
                            else:
                                print("Document signature is invalid.")
                        except ValueError as e:
                            print(f"Error: {e}")
                    elif subchoice == '3':
                        break
                    else:
                        print("Invalid choice.")
            else:
                print("Invalid credentials.")
        elif choice == '3':
            user_manager.save_users('users.json')
            break
        else:
            print("Invalid choice.")

if __name__ == "__main__":
    main()