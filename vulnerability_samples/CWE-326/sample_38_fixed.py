import tornado.ioloop
import tornado.web
import tornado.websocket
from Cryptodome.PublicKey import RSA
from Cryptodome.Cipher import PKCS1_OAEP
import sqlite3
import hashlib
import os
import secrets

class Database:
    def __init__(self):
        self.conn = sqlite3.connect('users.db')
        self.create_table()

    def create_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users
                          (username TEXT PRIMARY KEY, password TEXT, salt TEXT, public_key TEXT)''')
        self.conn.commit()

    def add_user(self, username, password, salt, public_key):
        cursor = self.conn.cursor()
        cursor.execute("INSERT INTO users VALUES (?, ?, ?, ?)", (username, password, salt, public_key))
        self.conn.commit()

    def get_user(self, username):
        cursor = self.conn.cursor()
        cursor.execute("SELECT * FROM users WHERE username = ?", (username,))
        return cursor.fetchone()

class SecureWebSocket(tornado.websocket.WebSocketHandler):
    def initialize(self, db):
        self.db = db
        self.rsa_key = None
        self.username = None

    def open(self):
        self.rsa_key = RSA.generate(4096)  # Fixed: Adequate key size
        public_key = self.rsa_key.publickey().export_key().decode()
        self.write_message(f"Welcome! Your public key is: {public_key}")

    def on_message(self, message):
        if self.username is None:
            self.handle_login(message)
        else:
            self.handle_secure_message(message)

    def handle_login(self, message):
        username, password = message.split(':')
        user = self.db.get_user(username)
        if user:
            stored_password, salt = user[1], user[2]
            hashed_password = hashlib.pbkdf2_hmac('sha256', password.encode(), salt.encode(), 100000).hex()
            if hashed_password == stored_password:
                self.username = username
                self.write_message(f"Login successful. Welcome, {username}!")
                return
        self.write_message("Login failed. Please try again.")

    def handle_secure_message(self, encrypted_message):
        cipher = PKCS1_OAEP.new(self.rsa_key)
        decrypted_message = cipher.decrypt(encrypted_message.encode()).decode()
        self.write_message(f"Received: {decrypted_message}")

class RegisterHandler(tornado.web.RequestHandler):
    def initialize(self, db):
        self.db = db

    def post(self):
        username = self.get_argument('username')
        password = self.get_argument('password')
        public_key = self.get_argument('public_key')
        
        if not self.db.get_user(username):
            salt = secrets.token_hex(16)
            hashed_password = hashlib.pbkdf2_hmac('sha256', password.encode(), salt.encode(), 100000).hex()
            self.db.add_user(username, hashed_password, salt, public_key)
            self.write("Registration successful")
        else:
            self.write("Username already exists")

def make_app():
    db = Database()
    return tornado.web.Application([
        (r"/secure-socket", SecureWebSocket, dict(db=db)),
        (r"/register", RegisterHandler, dict(db=db)),
    ])

if __name__ == "__main__":
    app = make_app()
    app.listen(8888)
    tornado.ioloop.IOLoop.current().start()