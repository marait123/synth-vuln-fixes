import http.server
import socketserver
import ssl
import logging
import json
import base64
import os
import argparse
from datetime import datetime

class ConfigManager:
    def __init__(self):
        self.config = {
            'port': 8443,
            'host': 'localhost',
            'log_file': 'server.log',
            'auth_file': 'users.json',
            'cert_file': 'server.crt',
            'key_file': 'server.key'
        }

    def load_config(self, file_path):
        try:
            with open(file_path, 'r') as f:
                self.config.update(json.load(f))
        except FileNotFoundError:
            logging.warning(f"Config file {file_path} not found. Using defaults.")
        except json.JSONDecodeError:
            logging.error(f"Invalid JSON in config file {file_path}. Using defaults.")

    def get(self, key, default=None):
        return self.config.get(key, default)

class AuthManager:
    def __init__(self, auth_file):
        self.users = self.load_users(auth_file)
        self.auth_file = auth_file

    def load_users(self, auth_file):
        try:
            with open(auth_file, 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            logging.error(f"Auth file {auth_file} not found.")
            return {}
        except json.JSONDecodeError:
            logging.error(f"Invalid JSON in auth file {auth_file}.")
            return {}

    def authenticate(self, username, password):
        return username in self.users and self.users[username] == password

    def add_user(self, username, password):
        if username not in self.users:
            self.users[username] = password
            self._save_users()
            return True
        return False

    def remove_user(self, username):
        if username in self.users:
            del self.users[username]
            self._save_users()
            return True
        return False

    def _save_users(self):
        with open(self.auth_file, 'w') as f:
            json.dump(self.users, f, indent=2)

class SecureHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    def __init__(self, *args, auth_manager=None, **kwargs):
        self.auth_manager = auth_manager
        super().__init__(*args, **kwargs)

    def do_GET(self):
        if self.authenticate():
            super().do_GET()
        else:
            self.send_error(401, "Unauthorized")

    def do_POST(self):
        if self.authenticate():
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(f"Received POST data: {post_data.decode()}".encode())
        else:
            self.send_error(401, "Unauthorized")

    def authenticate(self):
        auth_header = self.headers.get('Authorization')
        if auth_header:
            auth_type, auth_string = auth_header.split()
            if auth_type.lower() == 'basic':
                username, password = base64.b64decode(auth_string).decode().split(':')
                return self.auth_manager.authenticate(username, password)
        return False

    def log_message(self, format, *args):
        logging.info("%s - - [%s] %s\n" % (self.client_address[0], self.log_date_time_string(), format % args))

def run_https_server(config, auth_manager):
    logging.basicConfig(level=logging.INFO, filename=config.get('log_file'), filemode='a',
                        format='%(asctime)s - %(levelname)s - %(message)s')
    server_address = (config.get('host'), config.get('port'))
    httpd = socketserver.TCPServer(server_address, lambda *args, **kwargs: SecureHTTPRequestHandler(*args, auth_manager=auth_manager, **kwargs))
    
    try:
        cert_file = config.get('cert_file')
        key_file = config.get('key_file')
        if not (os.path.exists(cert_file) and os.path.exists(key_file)):
            raise FileNotFoundError("Certificate or key file not found")
        httpd.socket = ssl.wrap_socket(httpd.socket, certfile=cert_file, keyfile=key_file, server_side=True)  # Vulnerable line
    except Exception as e:
        logging.error(f"Failed to set up SSL: {str(e)}")
        return

    logging.info(f"HTTPS Server running on {config.get('host')}:{config.get('port')}")
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        logging.info("Server stopped.")
    finally:
        httpd.server_close()

def setup_cli():
    parser = argparse.ArgumentParser(description="Secure HTTPS Server")
    parser.add_argument('-c', '--config', default='server_config.json', help='Path to config file')
    return parser.parse_args()

def main():
    args = setup_cli()
    config_manager = ConfigManager()
    config_manager.load_config(args.config)
    auth_manager = AuthManager(config_manager.get('auth_file'))

    print("Secure HTTPS Server")
    print("1. Start server")
    print("2. Add user")
    print("3. Remove user")
    print("4. Exit")

    while True:
        choice = input("Enter your choice: ")
        if choice == '1':
            run_https_server(config_manager, auth_manager)
        elif choice == '2':
            username = input("Enter username: ")
            password = input("Enter password: ")
            if auth_manager.add_user(username, password):
                print("User added successfully")
            else:
                print("Failed to add user")
        elif choice == '3':
            username = input("Enter username to remove: ")
            if auth_manager.remove_user(username):
                print("User removed successfully")
            else:
                print("Failed to remove user")
        elif choice == '4':
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()