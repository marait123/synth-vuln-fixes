# Django views and models
from django.http import HttpResponse, JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.db import models
import ssl
import socket
import logging
import json
from datetime import datetime

# Configure logging
logging.basicConfig(filename='server_connections.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

class ServerData(models.Model):
    server_name = models.CharField(max_length=100)
    data = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.server_name} - {self.timestamp}"

class ServerConnectionError(Exception):
    pass

def process_data(data):
    # Simple data processing
    return data.upper()

def connect_to_server(server, port):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    ssock = ssl.wrap_socket(s, ssl_version=ssl.PROTOCOL_TLSv1_2)
    try:
        ssock.connect((server, port))
        logging.info(f"Connected to {server}:{port}")
        data = ssock.recv(1024).decode('utf-8')
        processed_data = process_data(data)
        ServerData.objects.create(server_name=server, data=processed_data)
        return processed_data
    except ssl.SSLError as e:
        logging.error(f"SSL Error connecting to {server}: {str(e)}")
        raise ServerConnectionError(f"SSL Error: {str(e)}")
    except socket.error as e:
        logging.error(f"Socket Error connecting to {server}: {str(e)}")
        raise ServerConnectionError(f"Socket Error: {str(e)}")
    except Exception as e:
        logging.error(f"Unexpected error connecting to {server}: {str(e)}")
        raise ServerConnectionError(f"Unexpected Error: {str(e)}")
    finally:
        ssock.close()

@csrf_exempt
def view(request):
    servers = [
        ('example.com', 443),
        ('secure.example.org', 443),
        ('api.example.net', 443)
    ]
    
    results = []
    for server, port in servers:
        try:
            result = connect_to_server(server, port)
            results.append(f"Data from {server}: {result}")
        except ServerConnectionError as e:
            results.append(f"Error connecting to {server}: {str(e)}")
    
    if results:
        return HttpResponse("<br>".join(results))
    else:
        return HttpResponse("No data retrieved from servers")

@csrf_exempt
def get_server_data(request):
    if request.method == 'GET':
        server_name = request.GET.get('server_name')
        if not server_name:
            return JsonResponse({"error": "Server name is required"}, status=400)
        
        try:
            data = ServerData.objects.filter(server_name=server_name).order_by('-timestamp').first()
            if data:
                return JsonResponse({"server_name": data.server_name, "data": data.data, "timestamp": data.timestamp})
            else:
                return JsonResponse({"error": "No data found for the specified server"}, status=404)
        except Exception as e:
            logging.error(f"Error retrieving data for {server_name}: {str(e)}")
            return JsonResponse({"error": "Internal server error"}, status=500)
    else:
        return JsonResponse({"error": "Method not allowed"}, status=405)

@csrf_exempt
def clear_server_data(request):
    if request.method == 'POST':
        try:
            ServerData.objects.all().delete()
            logging.info("All server data cleared")
            return JsonResponse({"message": "All server data cleared successfully"})
        except Exception as e:
            logging.error(f"Error clearing server data: {str(e)}")
            return JsonResponse({"error": "Internal server error"}, status=500)
    else:
        return JsonResponse({"error": "Method not allowed"}, status=405)

@csrf_exempt
def add_server_data(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            server_name = data.get('server_name')
            server_data = data.get('data')
            
            if not server_name or not server_data:
                return JsonResponse({"error": "Server name and data are required"}, status=400)
            
            ServerData.objects.create(server_name=server_name, data=server_data)
            logging.info(f"Added new data for server: {server_name}")
            return JsonResponse({"message": "Server data added successfully"})
        except json.JSONDecodeError:
            return JsonResponse({"error": "Invalid JSON data"}, status=400)
        except Exception as e:
            logging.error(f"Error adding server data: {str(e)}")
            return JsonResponse({"error": "Internal server error"}, status=500)
    else:
        return JsonResponse({"error": "Method not allowed"}, status=405)

def test_server_connections():
    test_servers = [
        ('example.com', 443),
        ('secure.example.org', 443),
        ('api.example.net', 443)
    ]
    
    for server, port in test_servers:
        try:
            result = connect_to_server(server, port)
            print(f"Successfully connected to {server}:{port}")
            print(f"Received data: {result}")
        except ServerConnectionError as e:
            print(f"Failed to connect to {server}:{port}")
            print(f"Error: {str(e)}")

if __name__ == "__main__":
    test_server_connections()