import os
from flask import Flask, jsonify, request, session
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import base64
import sqlite3
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
app.secret_key = os.urandom(24)

def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db_connection()
    conn.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT)')
    conn.execute('CREATE TABLE IF NOT EXISTS messages (id INTEGER PRIMARY KEY, user_id INTEGER, encrypted_message TEXT)')
    conn.close()

init_db()

@app.route('/register', methods=['POST'])
def register():
    data = request.json
    username = data.get('username')
    password = data.get('password')
    if not username or not password:
        return jsonify({"error": "Username and password are required"}), 400
    
    hashed_password = generate_password_hash(password)
    conn = get_db_connection()
    try:
        conn.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, hashed_password))
        conn.commit()
        return jsonify({"message": "User registered successfully"}), 201
    except sqlite3.IntegrityError:
        return jsonify({"error": "Username already exists"}), 400
    finally:
        conn.close()

@app.route('/login', methods=['POST'])
def login():
    data = request.json
    username = data.get('username')
    password = data.get('password')
    conn = get_db_connection()
    user = conn.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()
    conn.close()
    
    if user and check_password_hash(user['password'], password):
        session['user_id'] = user['id']
        return jsonify({"message": "Login successful"}), 200
    return jsonify({"error": "Invalid credentials"}), 401

@app.route('/encrypt_message', methods=['POST'])
def encrypt_message():
    if 'user_id' not in session:
        return jsonify({"error": "User not logged in"}), 401
    
    data = request.json
    message = data.get('message')
    if not message:
        return jsonify({"error": "Message is required"}), 400
    
    key = RSA.generate(2048)  # Fixed: Using 2048-bit key
    public_key = key.publickey()
    cipher = PKCS1_OAEP.new(public_key)
    encrypted_message = cipher.encrypt(message.encode('utf-8'))
    encoded_message = base64.b64encode(encrypted_message).decode('utf-8')
    
    conn = get_db_connection()
    conn.execute('INSERT INTO messages (user_id, encrypted_message) VALUES (?, ?)', (session['user_id'], encoded_message))
    conn.commit()
    conn.close()
    
    return jsonify({"message": "Message encrypted and stored successfully"}), 200

@app.route('/get_messages', methods=['GET'])
def get_messages():
    if 'user_id' not in session:
        return jsonify({"error": "User not logged in"}), 401
    
    conn = get_db_connection()
    messages = conn.execute('SELECT encrypted_message FROM messages WHERE user_id = ?', (session['user_id'],)).fetchall()
    conn.close()
    
    return jsonify({"messages": [msg['encrypted_message'] for msg in messages]}), 200

if __name__ == '__main__':
    app.run(debug=True)