import os
from Cryptodome.PublicKey import RSA
from Cryptodome.Cipher import PKCS1_OAEP
from Cryptodome.Random import get_random_bytes

def generate_key_pair(key_size=2048):
    key = RSA.generate(key_size)
    private_key = key.export_key()
    public_key = key.publickey().export_key()
    return private_key, public_key

def save_key(key, filename):
    with open(filename, 'wb') as key_file:
        key_file.write(key)

def load_key(filename):
    with open(filename, 'rb') as key_file:
        return key_file.read()

def encrypt_file(input_file, output_file, public_key):
    key = RSA.import_key(public_key)
    cipher = PKCS1_OAEP.new(key)

    with open(input_file, 'rb') as file:
        data = file.read()

    chunk_size = 190  # Maximum size for 2048-bit key
    encrypted_data = b''
    for i in range(0, len(data), chunk_size):
        chunk = data[i:i+chunk_size]
        encrypted_chunk = cipher.encrypt(chunk)
        encrypted_data += encrypted_chunk

    with open(output_file, 'wb') as file:
        file.write(encrypted_data)

def decrypt_file(input_file, output_file, private_key):
    key = RSA.import_key(private_key)
    cipher = PKCS1_OAEP.new(key)

    with open(input_file, 'rb') as file:
        encrypted_data = file.read()

    chunk_size = 256  # Size of encrypted chunk for 2048-bit key
    decrypted_data = b''
    for i in range(0, len(encrypted_data), chunk_size):
        chunk = encrypted_data[i:i+chunk_size]
        decrypted_chunk = cipher.decrypt(chunk)
        decrypted_data += decrypted_chunk

    with open(output_file, 'wb') as file:
        file.write(decrypted_data)

def main():
    private_key, public_key = generate_key_pair()
    save_key(private_key, 'private_key.pem')
    save_key(public_key, 'public_key.pem')

    with open('original.txt', 'w') as file:
        file.write("This is a secret message.")

    encrypt_file('original.txt', 'encrypted.bin', public_key)
    decrypt_file('encrypted.bin', 'decrypted.txt', private_key)

    print("File encryption and decryption completed.")

if __name__ == "__main__":
    main()