from pyramid.response import Response
from pyramid.httpexceptions import HTTPFound
from pyramid.security import remember, forget, authenticated_userid
from pyramid.view import view_config
from pyramid.config import Configurator
from wsgiref.simple_server import make_server
import os
import logging
import hashlib
import json
from datetime import datetime

# Configure logging
logging.basicConfig(filename='app.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

UPLOAD_DIR = "/path/to/upload/directory"
if not os.path.exists(UPLOAD_DIR):
    os.makedirs(UPLOAD_DIR)

# Mock user database
USERS = {
    'admin': {
        'password': 'secret',
        'role': 'admin'
    },
    'user': {
        'password': 'password',
        'role': 'user'
    }
}

def get_user(request):
    user_id = authenticated_userid(request)
    if user_id:
        return {'id': user_id, 'name': f'User {user_id}', 'role': USERS[user_id]['role']}
    return None

@view_config(route_name='login', renderer='json')
def login(request):
    username = request.POST.get('username')
    password = request.POST.get('password')
    if username in USERS and USERS[username]['password'] == password:
        headers = remember(request, username)
        logging.info(f"User {username} logged in")
        return HTTPFound(location=request.route_url('home'), headers=headers)
    logging.warning(f"Failed login attempt for user {username}")
    return {'message': 'Login failed'}

@view_config(route_name='logout')
def logout(request):
    headers = forget(request)
    logging.info(f"User {authenticated_userid(request)} logged out")
    return HTTPFound(location=request.route_url('home'), headers=headers)

@view_config(route_name='home', renderer='json')
def home(request):
    user = get_user(request)
    if not user:
        return HTTPFound(location=request.route_url('login'))
    return {'message': f'Welcome, {user["name"]}!', 'role': user['role']}

@view_config(route_name='upload', request_method='POST')
def process_uploaded_file(request):
    user = get_user(request)
    if not user:
        return HTTPFound(location=request.route_url('login'))

    try:
        uploaded_file = request.POST.get('file').file
        file_name = request.POST.get('file').filename
        if not file_name.endswith('.txt'):
            return Response('Only text files are allowed', status=400)

        file_path = os.path.join(UPLOAD_DIR, file_name)
        with open(file_path, 'wb') as output_file:
            while True:
                data = uploaded_file.read(4096)
                if not data:
                    break
                output_file.write(data)

        file_hash = hashlib.md5(open(file_path, 'rb').read()).hexdigest()
        logging.info(f"File uploaded: {file_name} (MD5: {file_hash}) by user {user['id']}")
        response = HTTPFound(location=request.route_url('home'))
        response.set_cookie('upload_status', value='success', secure=True, httponly=False, samesite='Lax')
        return response
    except Exception as e:
        logging.error(f"Upload error: {str(e)}")
        return Response('Upload failed', status=500)

@view_config(route_name='list_files', renderer='json')
def list_files(request):
    user = get_user(request)
    if not user:
        return HTTPFound(location=request.route_url('login'))

    files = []
    for f in os.listdir(UPLOAD_DIR):
        if f.endswith('.txt'):
            file_path = os.path.join(UPLOAD_DIR, f)
            file_stat = os.stat(file_path)
            files.append({
                'name': f,
                'size': file_stat.st_size,
                'created': datetime.fromtimestamp(file_stat.st_ctime).isoformat(),
                'modified': datetime.fromtimestamp(file_stat.st_mtime).isoformat()
            })
    return {'files': files}

@view_config(route_name='download')
def download_file(request):
    user = get_user(request)
    if not user:
        return HTTPFound(location=request.route_url('login'))

    filename = request.matchdict['filename']
    file_path = os.path.join(UPLOAD_DIR, filename)
    if not os.path.exists(file_path):
        return Response('File not found', status=404)

    response = Response(content_type='text/plain')
    response.app_iter = open(file_path, 'rb')
    response.content_disposition = f'attachment; filename="{filename}"'
    logging.info(f"File downloaded: {filename} by user {user['id']}")
    return response

@view_config(route_name='delete_file', request_method='POST')
def delete_file(request):
    user = get_user(request)
    if not user or user['role'] != 'admin':
        return Response('Unauthorized', status=403)

    filename = request.POST.get('filename')
    file_path = os.path.join(UPLOAD_DIR, filename)
    if not os.path.exists(file_path):
        return Response('File not found', status=404)

    try:
        os.remove(file_path)
        logging.info(f"File deleted: {filename} by admin {user['id']}")
        return Response('File deleted successfully')
    except Exception as e:
        logging.error(f"Delete error: {str(e)}")
        return Response('Delete failed', status=500)

def main():
    config = Configurator()
    config.add_route('home', '/')
    config.add_route('login', '/login')
    config.add_route('logout', '/logout')
    config.add_route('upload', '/upload')
    config.add_route('list_files', '/files')
    config.add_route('download', '/download/{filename}')
    config.add_route('delete_file', '/delete')
    config.scan()
    app = config.make_wsgi_app()
    server = make_server('0.0.0.0', 8080, app)
    print('Server started on http://0.0.0.0:8080')
    server.serve_forever()

if __name__ == '__main__':
    main()