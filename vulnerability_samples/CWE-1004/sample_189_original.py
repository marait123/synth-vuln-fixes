from pyramid.config import Configurator
from pyramid.httpexceptions import HTTPFound, HTTPBadRequest
from pyramid.response import Response
from pyramid.view import view_config
from pyramid.authentication import AuthTktAuthenticationPolicy
from pyramid.authorization import ACLAuthorizationPolicy
from pyramid.security import (
    remember,
    forget,
    Authenticated,
    Everyone,
)
from waitress import serve
import sqlite3
import logging
import bcrypt
import re
from functools import wraps

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def init_db():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT, email TEXT)''')
    conn.commit()
    conn.close()
    logger.info("Database initialized")

def get_db_connection():
    return sqlite3.connect('users.db')

def get_user(username, password):
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("SELECT id, password FROM users WHERE username=?", (username,))
    result = c.fetchone()
    conn.close()
    if result and bcrypt.checkpw(password.encode('utf-8'), result[1]):
        return result[0]
    return None

def validate_input(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        request = args[0]
        if request.method == 'POST':
            username = request.POST.get('username', '')
            password = request.POST.get('password', '')
            if not username or not password:
                raise HTTPBadRequest("Username and password are required")
            if not re.match(r'^[a-zA-Z0-9_]{3,20}$', username):
                raise HTTPBadRequest("Invalid username format")
            if len(password) < 8:
                raise HTTPBadRequest("Password must be at least 8 characters long")
        return func(*args, **kwargs)
    return wrapper

@view_config(route_name='home', renderer='string', permission='view')
def home_view(request):
    user_id = request.authenticated_userid
    logger.info(f"User {user_id} accessed home page")
    return f'Welcome, user {user_id}! This is your home page.'

@view_config(route_name='login', renderer='string')
@validate_input
def login_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user_id = get_user(username, password)
        if user_id:
            headers = remember(request, user_id)
            response = HTTPFound(location='/home', headers=headers)
            response.set_cookie('session_id', f'session-{user_id}', samesite='Lax', secure=True, httponly=True)
            logger.info(f"User {username} logged in successfully")
            return response
        logger.warning(f"Failed login attempt for user {username}")
    return 'Please log in: <form method="POST"><input name="username"><input name="password" type="password"><input type="submit"></form>'

@view_config(route_name='logout')
def logout_view(request):
    headers = forget(request)
    logger.info(f"User {request.authenticated_userid} logged out")
    return HTTPFound(location='/', headers=headers)

@view_config(route_name='register', renderer='string')
@validate_input
def register_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        email = request.POST.get('email', '')
        
        hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
        
        conn = get_db_connection()
        c = conn.cursor()
        try:
            c.execute("INSERT INTO users (username, password, email) VALUES (?, ?, ?)", 
                      (username, hashed_password, email))
            conn.commit()
            logger.info(f"New user registered: {username}")
            return HTTPFound(location='/login')
        except sqlite3.IntegrityError:
            conn.rollback()
            logger.warning(f"Registration failed: Username {username} already exists")
            return "Username already exists. Please choose a different one."
        finally:
            conn.close()
    return 'Register: <form method="POST"><input name="username"><input name="password" type="password"><input name="email" type="email"><input type="submit"></form>'

@view_config(route_name='user_profile', renderer='string', permission='view')
def user_profile(request):
    user_id = request.authenticated_userid
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("SELECT username, email FROM users WHERE id=?", (user_id,))
    user = c.fetchone()
    conn.close()
    if user:
        return f"Profile for {user[0]}: Email: {user[1]}"
    return "User not found"

def main():
    init_db()
    settings = {
        'auth.secret': 'secret',
    }
    config = Configurator(settings=settings)
    config.set_authentication_policy(AuthTktAuthenticationPolicy(settings['auth.secret']))
    config.set_authorization_policy(ACLAuthorizationPolicy())
    config.add_route('home', '/home')
    config.add_route('login', '/login')
    config.add_route('logout', '/logout')
    config.add_route('register', '/register')
    config.add_route('user_profile', '/profile')
    config.scan()
    return config.make_wsgi_app()

if __name__ == '__main__':
    app = main()
    serve(app, host='0.0.0.0', port=6543)