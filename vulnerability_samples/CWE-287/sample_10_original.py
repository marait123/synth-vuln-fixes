import sys
import logging
from PyQt5.QtWidgets import QApplication, QWidget, QLineEdit, QVBoxLayout, QPushButton, QLabel, QMessageBox, QTextEdit, QHBoxLayout
from PyQt5.QtCore import Qt
import jwt
import datetime
import hashlib
import sqlite3

SECRET_KEY = "your_secret_key"
DB_NAME = "users.db"

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class CustomException(Exception):
    pass

class DatabaseManager:
    def __init__(self):
        self.conn = sqlite3.connect(DB_NAME)
        self.cursor = self.conn.cursor()
        self.create_table()

    def create_table(self):
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS users
                            (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT)''')
        self.conn.commit()

    def add_user(self, username, password):
        hashed_password = hashlib.sha256(password.encode()).hexdigest()
        try:
            self.cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, hashed_password))
            self.conn.commit()
        except sqlite3.IntegrityError:
            raise CustomException("Username already exists")

    def validate_user(self, username, password):
        hashed_password = hashlib.sha256(password.encode()).hexdigest()
        self.cursor.execute("SELECT * FROM users WHERE username=? AND password=?", (username, hashed_password))
        return self.cursor.fetchone() is not None

    def close(self):
        self.conn.close()

class App(QWidget):
    def __init__(self):
        super().__init__()
        self.db_manager = DatabaseManager()
        self.initUI()

    def initUI(self):
        self.username_input = QLineEdit(self)
        self.username_input.setPlaceholderText("Username")
        self.password_input = QLineEdit(self)
        self.password_input.setPlaceholderText("Password")
        self.password_input.setEchoMode(QLineEdit.Password)
        self.login_button = QPushButton('Login', self)
        self.login_button.clicked.connect(self.on_login)
        self.register_button = QPushButton('Register', self)
        self.register_button.clicked.connect(self.on_register)
        self.token_input = QLineEdit(self)
        self.token_input.setPlaceholderText("Enter JWT Token")
        self.decode_button = QPushButton('Decode JWT', self)
        self.decode_button.clicked.connect(self.on_decode)
        self.info_label = QLabel('User Info:', self)
        self.log_area = QTextEdit(self)
        self.log_area.setReadOnly(True)

        layout = QVBoxLayout()
        layout.addWidget(self.username_input)
        layout.addWidget(self.password_input)
        button_layout = QHBoxLayout()
        button_layout.addWidget(self.login_button)
        button_layout.addWidget(self.register_button)
        layout.addLayout(button_layout)
        layout.addWidget(self.token_input)
        layout.addWidget(self.decode_button)
        layout.addWidget(self.info_label)
        layout.addWidget(self.log_area)
        self.setLayout(layout)
        self.setWindowTitle('JWT Authentication Demo')
        self.show()

    def generate_token(self, username):
        payload = {
            "username": username,
            "exp": datetime.datetime.utcnow() + datetime.timedelta(hours=1)
        }
        token = jwt.encode(payload, SECRET_KEY, algorithm="HS256")
        return token

    def on_login(self):
        username = self.username_input.text()
        password = self.password_input.text()
        try:
            if self.db_manager.validate_user(username, password):
                token = self.generate_token(username)
                self.token_input.setText(token)
                self.log_message(f"User {username} logged in successfully")
                QMessageBox.information(self, "Success", "Login successful! Token generated.")
            else:
                raise CustomException("Invalid credentials")
        except CustomException as e:
            self.log_message(f"Login failed: {str(e)}")
            QMessageBox.warning(self, "Error", str(e))

    def on_register(self):
        username = self.username_input.text()
        password = self.password_input.text()
        try:
            if not username or not password:
                raise CustomException("Username and password are required")
            self.db_manager.add_user(username, password)
            self.log_message(f"User {username} registered successfully")
            QMessageBox.information(self, "Success", "User registered successfully!")
        except CustomException as e:
            self.log_message(f"Registration failed: {str(e)}")
            QMessageBox.warning(self, "Error", str(e))

    def on_decode(self):
        token = self.token_input.text()
        try:
            decoded_data = jwt.decode(token, options={"verify_signature": False})
            self.info_label.setText(f"User Info: {decoded_data}")
            self.log_message(f"Token decoded: {decoded_data}")
        except jwt.ExpiredSignatureError:
            self.info_label.setText("Token has expired!")
            self.log_message("Token decoding failed: Expired signature")
        except jwt.InvalidTokenError:
            self.info_label.setText("Invalid token!")
            self.log_message("Token decoding failed: Invalid token")

    def log_message(self, message):
        logging.info(message)
        self.log_area.append(message)

    def closeEvent(self, event):
        self.db_manager.close()
        event.accept()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = App()
    sys.exit(app.exec_())