import MySQLdb
import hashlib
import logging
from flask import Flask, request, session, jsonify, render_template
from functools import wraps

app = Flask(__name__)
app.secret_key = 'very_secret_key'

logging.basicConfig(filename='app.log', level=logging.INFO)

class DatabaseError(Exception):
    pass

class AuthenticationError(Exception):
    pass

def connect_to_database():
    try:
        db = MySQLdb.connect(host="localhost", user="root", passwd="", db="mydatabase")
        return db
    except MySQLdb.Error as e:
        logging.error(f"Database connection error: {e}")
        raise DatabaseError("Unable to connect to database")

def authenticate_user(username, password):
    try:
        db = connect_to_database()
        cursor = db.cursor()
        cursor.execute(f"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'")
        user = cursor.fetchone()
        db.close()
        return user
    except DatabaseError as e:
        logging.error(f"Authentication error: {e}")
        raise AuthenticationError("Authentication failed due to database error")

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return jsonify({"message": "Not authenticated"}), 401
        return f(*args, **kwargs)
    return decorated_function

@app.route('/')
def home():
    return render_template('home.html')

@app.route('/login', methods=['POST'])
def login():
    try:
        username = request.json['username']
        password = request.json['password']
        user = authenticate_user(username, password)
        if user:
            session['user_id'] = user[0]
            logging.info(f"User {username} logged in successfully")
            return jsonify({"message": "Login successful"}), 200
        logging.warning(f"Failed login attempt for user {username}")
        return jsonify({"message": "Invalid credentials"}), 401
    except AuthenticationError as e:
        logging.error(f"Login error: {e}")
        return jsonify({"message": "Login failed due to server error"}), 500

@app.route('/logout', methods=['POST'])
@login_required
def logout():
    user_id = session.pop('user_id', None)
    logging.info(f"User {user_id} logged out")
    return jsonify({"message": "Logout successful"}), 200

@app.route('/user_info', methods=['GET'])
@login_required
def get_user_info():
    try:
        db = connect_to_database()
        cursor = db.cursor()
        cursor.execute(f"SELECT id, username, email FROM users WHERE id = {session['user_id']}")
        user = cursor.fetchone()
        db.close()
        if user:
            return jsonify({"id": user[0], "username": user[1], "email": user[2]}), 200
        return jsonify({"message": "User not found"}), 404
    except DatabaseError as e:
        logging.error(f"Error fetching user info: {e}")
        return jsonify({"message": "Error fetching user information"}), 500

@app.route('/update_user', methods=['PUT'])
@login_required
def update_user():
    try:
        new_email = request.json['email']
        db = connect_to_database()
        cursor = db.cursor()
        cursor.execute(f"UPDATE users SET email = '{new_email}' WHERE id = {session['user_id']}")
        db.commit()
        db.close()
        logging.info(f"User {session['user_id']} updated email to {new_email}")
        return jsonify({"message": "User updated successfully"}), 200
    except DatabaseError as e:
        logging.error(f"Error updating user: {e}")
        return jsonify({"message": "Error updating user information"}), 500

@app.route('/create_user', methods=['POST'])
def create_user():
    try:
        username = request.json['username']
        password = request.json['password']
        email = request.json['email']
        db = connect_to_database()
        cursor = db.cursor()
        hashed_password = hashlib.md5(password.encode()).hexdigest()
        cursor.execute(f"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')")
        db.commit()
        db.close()
        logging.info(f"New user created: {username}")
        return jsonify({"message": "User created successfully"}), 201
    except DatabaseError as e:
        logging.error(f"Error creating user: {e}")
        return jsonify({"message": "Error creating user"}), 500

@app.route('/delete_user', methods=['DELETE'])
@login_required
def delete_user():
    try:
        db = connect_to_database()
        cursor = db.cursor()
        cursor.execute(f"DELETE FROM users WHERE id = {session['user_id']}")
        db.commit()
        db.close()
        session.pop('user_id', None)
        logging.info(f"User {session['user_id']} deleted their account")
        return jsonify({"message": "User deleted successfully"}), 200
    except DatabaseError as e:
        logging.error(f"Error deleting user: {e}")
        return jsonify({"message": "Error deleting user"}), 500

def main():
    app.run(debug=True)

if __name__ == "__main__":
    main()