import MySQLdb
import hashlib
import os
from flask import Flask, request, session, jsonify

app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY')
if not app.secret_key:
    raise ValueError("No SECRET_KEY set for Flask application")

def connect_to_database():
    db_password = os.environ.get('DB_PASSWORD')
    if not db_password:
        raise ValueError("No DB_PASSWORD set in environment variables")
    db = MySQLdb.connect(host="localhost", user="root", passwd=db_password, db="mydatabase")
    return db

def authenticate_user(username, password):
    db = connect_to_database()
    cursor = db.cursor()
    cursor.execute("SELECT * FROM users WHERE username = %s AND password = %s", 
                   (username, hashlib.md5(password.encode()).hexdigest()))
    user = cursor.fetchone()
    db.close()
    return user

@app.route('/login', methods=['POST'])
def login():
    username = request.json.get('username')
    password = request.json.get('password')
    if not username or not password:
        return jsonify({"message": "Username and password are required"}), 400
    user = authenticate_user(username, password)
    if user:
        session['user_id'] = user[0]
        return jsonify({"message": "Login successful"}), 200
    return jsonify({"message": "Invalid credentials"}), 401

@app.route('/logout', methods=['POST'])
def logout():
    session.pop('user_id', None)
    return jsonify({"message": "Logout successful"}), 200

@app.route('/user_info', methods=['GET'])
def get_user_info():
    if 'user_id' not in session:
        return jsonify({"message": "Not authenticated"}), 401
    db = connect_to_database()
    cursor = db.cursor()
    cursor.execute("SELECT id, username, email FROM users WHERE id = %s", (session['user_id'],))
    user = cursor.fetchone()
    db.close()
    if user:
        return jsonify({"id": user[0], "username": user[1], "email": user[2]}), 200
    return jsonify({"message": "User not found"}), 404

@app.route('/update_user', methods=['PUT'])
def update_user():
    if 'user_id' not in session:
        return jsonify({"message": "Not authenticated"}), 401
    new_email = request.json.get('email')
    if not new_email:
        return jsonify({"message": "Email is required"}), 400
    db = connect_to_database()
    cursor = db.cursor()
    cursor.execute("UPDATE users SET email = %s WHERE id = %s", (new_email, session['user_id']))
    db.commit()
    db.close()
    return jsonify({"message": "User updated successfully"}), 200

def main():
    app.run(debug=False)

if __name__ == "__main__":
    main()