import jwt
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json
from datetime import datetime, timedelta

# Simulated database
users_db = {
    "alice": {"password": "password123", "role": "admin"},
    "bob": {"password": "password456", "role": "user"},
}

SECRET_KEY = "your_secret_key_here"

def generate_token(username, role):
    payload = {
        "username": username,
        "role": role,
        "exp": datetime.utcnow() + timedelta(hours=1)
    }
    return jwt.encode(payload, SECRET_KEY, algorithm="HS256")

@csrf_exempt
def login(request):
    if request.method == "POST":
        data = json.loads(request.body)
        username = data.get("username")
        password = data.get("password")
        
        if username in users_db and users_db[username]["password"] == password:
            token = generate_token(username, users_db[username]["role"])
            return JsonResponse({"token": token})
        else:
            return JsonResponse({"error": "Invalid credentials"}, status=401)

def verify_token(token):
    try:
        decoded_token = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
        return decoded_token
    except jwt.ExpiredSignatureError:
        return None
    except jwt.InvalidTokenError:
        return None

def sensitive_data_access(request):
    token = request.headers.get('Authorization')
    decoded_token = verify_token(token)
    
    if decoded_token and decoded_token.get('role') == 'admin':
        return JsonResponse({'data': 'sensitive admin data'})
    return JsonResponse({'error': 'Access denied'}, status=403)

def user_data_access(request):
    token = request.headers.get('Authorization')
    decoded_token = verify_token(token)
    
    if decoded_token:
        return JsonResponse({'data': f"User data for {decoded_token.get('username')}"})
    return JsonResponse({'error': 'Access denied'}, status=403)

def public_data_access(request):
    return JsonResponse({'data': 'This is public data'})

# URL routing (simplified)
def route_request(request, path):
    if path == "login":
        return login(request)
    elif path == "admin":
        return sensitive_data_access(request)
    elif path == "user":
        return user_data_access(request)
    elif path == "public":
        return public_data_access(request)
    else:
        return JsonResponse({'error': 'Not found'}, status=404)