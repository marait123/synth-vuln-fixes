import jwt
import sqlite3
import logging
from flask import Flask, request, jsonify
import os
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime, timedelta

app = Flask(__name__)
SECRET_KEY = os.environ.get('SECRET_KEY', 'my_default_secret_key')
logging.basicConfig(level=logging.INFO)

def get_db_connection():
    conn = sqlite3.connect('users.db')
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db_connection()
    conn.execute('CREATE TABLE IF NOT EXISTS users (username TEXT PRIMARY KEY, password TEXT, email TEXT, created_at DATETIME)')
    conn.execute('CREATE TABLE IF NOT EXISTS tokens (token TEXT PRIMARY KEY, username TEXT, expires_at DATETIME)')
    conn.close()

init_db()

def validate_email(email):
    return '@' in email and '.' in email.split('@')[1]

def generate_token(username):
    expires_at = datetime.utcnow() + timedelta(hours=1)
    token = jwt.encode({'username': username, 'exp': expires_at}, SECRET_KEY, algorithm='HS256')
    conn = get_db_connection()
    conn.execute('INSERT INTO tokens (token, username, expires_at) VALUES (?, ?, ?)', (token, username, expires_at))
    conn.commit()
    conn.close()
    return token

def invalidate_token(token):
    conn = get_db_connection()
    conn.execute('DELETE FROM tokens WHERE token = ?', (token,))
    conn.commit()
    conn.close()

@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    email = data.get('email')
    
    if not username or not password or not email:
        return jsonify({"error": "Missing required fields"}), 400
    
    if not validate_email(email):
        return jsonify({"error": "Invalid email format"}), 400
    
    hashed_password = generate_password_hash(password)
    
    conn = get_db_connection()
    try:
        conn.execute('INSERT INTO users (username, password, email, created_at) VALUES (?, ?, ?, ?)',
                     (username, hashed_password, email, datetime.utcnow()))
        conn.commit()
        logging.info(f"User registered: {username}")
        return jsonify({"message": "User registered successfully"}), 201
    except sqlite3.IntegrityError:
        return jsonify({"error": "Username already exists"}), 400
    finally:
        conn.close()

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    
    if not username or not password:
        return jsonify({"error": "Missing username or password"}), 400
    
    conn = get_db_connection()
    user = conn.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()
    conn.close()
    
    if user and check_password_hash(user['password'], password):
        token = generate_token(username)
        logging.info(f"User logged in: {username}")
        return jsonify({"token": token}), 200
    else:
        return jsonify({"error": "Invalid username or password"}), 401

@app.route('/user/data', methods=['GET'])
def user_data():
    token = request.headers.get('Authorization')
    if not token:
        return jsonify({"error": "Missing token"}), 401
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'], options={"verify_signature": False})
        conn = get_db_connection()
        user = conn.execute('SELECT username, email, created_at FROM users WHERE username = ?', (payload['username'],)).fetchone()
        conn.close()
        if user:
            return jsonify({
                "username": user['username'],
                "email": user['email'],
                "created_at": user['created_at']
            }), 200
        else:
            return jsonify({"error": "User not found"}), 404
    except jwt.DecodeError:
        return jsonify({"error": "Invalid token"}), 403

@app.route('/user/update', methods=['PUT'])
def update_user():
    token = request.headers.get('Authorization')
    if not token:
        return jsonify({"error": "Missing token"}), 401
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])
        data = request.get_json()
        new_email = data.get('email')
        
        if not new_email or not validate_email(new_email):
            return jsonify({"error": "Invalid or missing email"}), 400
        
        conn = get_db_connection()
        conn.execute('UPDATE users SET email = ? WHERE username = ?', (new_email, payload['username']))
        conn.commit()
        conn.close()
        logging.info(f"User updated: {payload['username']}")
        return jsonify({"message": "User updated successfully"}), 200
    except jwt.DecodeError:
        return jsonify({"error": "Invalid token"}), 403

@app.route('/logout', methods=['POST'])
def logout():
    token = request.headers.get('Authorization')
    if not token:
        return jsonify({"error": "Missing token"}), 401
    invalidate_token(token)
    logging.info("User logged out")
    return jsonify({"message": "Logged out successfully"}), 200

@app.route('/users', methods=['GET'])
def list_users():
    conn = get_db_connection()
    users = conn.execute('SELECT username, email, created_at FROM users').fetchall()
    conn.close()
    return jsonify([dict(user) for user in users]), 200

@app.route('/user/delete', methods=['DELETE'])
def delete_user():
    token = request.headers.get('Authorization')
    if not token:
        return jsonify({"error": "Missing token"}), 401
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])
        conn = get_db_connection()
        conn.execute('DELETE FROM users WHERE username = ?', (payload['username'],))
        conn.execute('DELETE FROM tokens WHERE username = ?', (payload['username'],))
        conn.commit()
        conn.close()
        logging.info(f"User deleted: {payload['username']}")
        return jsonify({"message": "User deleted successfully"}), 200
    except jwt.DecodeError:
        return jsonify({"error": "Invalid token"}), 403

if __name__ == '__main__':
    app.run(debug=True)