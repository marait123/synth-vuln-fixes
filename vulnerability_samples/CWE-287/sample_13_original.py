import jwt
import json
import logging
import asyncio
from aiohttp import web
from datetime import datetime, timedelta
import hashlib
import re

# In-memory database
users_db = {}
preferences_db = {}

SECRET_KEY = "your_secret_key_here"
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class CustomException(Exception):
    pass

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def validate_username(username):
    return re.match(r'^[a-zA-Z0-9_]{3,20}$', username) is not None

def validate_password(password):
    return len(password) >= 8

async def register(request):
    try:
        data = await request.json()
        username = data.get('username')
        password = data.get('password')
        
        if not validate_username(username):
            raise CustomException("Invalid username format")
        
        if not validate_password(password):
            raise CustomException("Password must be at least 8 characters long")
        
        if username in users_db:
            raise CustomException("Username already exists")
        
        hashed_password = hash_password(password)
        users_db[username] = hashed_password
        preferences_db[username] = {}
        logging.info(f"User registered: {username}")
        return web.json_response({"message": "User registered successfully"})
    except CustomException as e:
        logging.error(f"Registration error: {str(e)}")
        return web.json_response({"error": str(e)}, status=400)
    except Exception as e:
        logging.error(f"Unexpected error during registration: {str(e)}")
        return web.json_response({"error": "An unexpected error occurred"}, status=500)

async def login(request):
    try:
        data = await request.json()
        username = data.get('username')
        password = data.get('password')
        
        if username not in users_db or users_db[username] != hash_password(password):
            raise CustomException("Invalid credentials")
        
        token = jwt.encode({"username": username, "exp": datetime.utcnow() + timedelta(hours=1)}, SECRET_KEY, algorithm="HS256")
        logging.info(f"User logged in: {username}")
        return web.json_response({"token": token})
    except CustomException as e:
        logging.error(f"Login error: {str(e)}")
        return web.json_response({"error": str(e)}, status=401)
    except Exception as e:
        logging.error(f"Unexpected error during login: {str(e)}")
        return web.json_response({"error": "An unexpected error occurred"}, status=500)

async def get_preferences(request):
    try:
        token = request.headers.get('Authorization')
        if not token:
            raise CustomException("No token provided")
        
        user_data = jwt.decode(token, options={"verify_signature": False})  # Vulnerable line
        username = user_data['username']
        
        user_prefs = preferences_db.get(username, {})
        logging.info(f"Preferences retrieved for user: {username}")
        return web.json_response(user_prefs)
    except jwt.ExpiredSignatureError:
        logging.error("Token expired")
        return web.json_response({"error": "Token expired"}, status=401)
    except jwt.InvalidTokenError:
        logging.error("Invalid token")
        return web.json_response({"error": "Invalid token"}, status=401)
    except CustomException as e:
        logging.error(f"Preference retrieval error: {str(e)}")
        return web.json_response({"error": str(e)}, status=400)
    except Exception as e:
        logging.error(f"Unexpected error during preference retrieval: {str(e)}")
        return web.json_response({"error": "An unexpected error occurred"}, status=500)

async def update_preferences(request):
    try:
        token = request.headers.get('Authorization')
        if not token:
            raise CustomException("No token provided")
        
        user_data = jwt.decode(token, options={"verify_signature": False})  # Vulnerable line
        username = user_data['username']
        
        new_prefs = await request.json()
        preferences_db[username].update(new_prefs)
        logging.info(f"Preferences updated for user: {username}")
        return web.json_response({"message": "Preferences updated successfully"})
    except jwt.ExpiredSignatureError:
        logging.error("Token expired")
        return web.json_response({"error": "Token expired"}, status=401)
    except jwt.InvalidTokenError:
        logging.error("Invalid token")
        return web.json_response({"error": "Invalid token"}, status=401)
    except CustomException as e:
        logging.error(f"Preference update error: {str(e)}")
        return web.json_response({"error": str(e)}, status=400)
    except Exception as e:
        logging.error(f"Unexpected error during preference update: {str(e)}")
        return web.json_response({"error": "An unexpected error occurred"}, status=500)

async def delete_account(request):
    try:
        token = request.headers.get('Authorization')
        if not token:
            raise CustomException("No token provided")
        
        user_data = jwt.decode(token, options={"verify_signature": False})  # Vulnerable line
        username = user_data['username']
        
        if username not in users_db:
            raise CustomException("User not found")
        
        del users_db[username]
        del preferences_db[username]
        logging.info(f"Account deleted for user: {username}")
        return web.json_response({"message": "Account deleted successfully"})
    except jwt.ExpiredSignatureError:
        logging.error("Token expired")
        return web.json_response({"error": "Token expired"}, status=401)
    except jwt.InvalidTokenError:
        logging.error("Invalid token")
        return web.json_response({"error": "Invalid token"}, status=401)
    except CustomException as e:
        logging.error(f"Account deletion error: {str(e)}")
        return web.json_response({"error": str(e)}, status=400)
    except Exception as e:
        logging.error(f"Unexpected error during account deletion: {str(e)}")
        return web.json_response({"error": "An unexpected error occurred"}, status=500)

app = web.Application()
app.add_routes([
    web.post('/register', register),
    web.post('/login', login),
    web.get('/preferences', get_preferences),
    web.put('/preferences', update_preferences),
    web.delete('/account', delete_account)
])

async def init_app():
    return app

if __name__ == '__main__':
    web.run_app(init_app())