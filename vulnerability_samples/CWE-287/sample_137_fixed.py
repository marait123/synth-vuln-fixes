import jwt
import sqlite3
from flask import Flask, request, jsonify
import os
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
SECRET_KEY = os.environ.get('SECRET_KEY', 'my_default_secret_key')

def get_db_connection():
    conn = sqlite3.connect('users.db')
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db_connection()
    conn.execute('CREATE TABLE IF NOT EXISTS users (username TEXT PRIMARY KEY, password TEXT, email TEXT)')
    conn.close()

init_db()

@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    email = data.get('email')
    
    if not username or not password or not email:
        return jsonify({"error": "Missing required fields"}), 400
    
    hashed_password = generate_password_hash(password)
    
    conn = get_db_connection()
    try:
        conn.execute('INSERT INTO users (username, password, email) VALUES (?, ?, ?)',
                     (username, hashed_password, email))
        conn.commit()
        return jsonify({"message": "User registered successfully"}), 201
    except sqlite3.IntegrityError:
        return jsonify({"error": "Username already exists"}), 400
    finally:
        conn.close()

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    
    if not username or not password:
        return jsonify({"error": "Missing username or password"}), 400
    
    conn = get_db_connection()
    user = conn.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()
    conn.close()
    
    if user and check_password_hash(user['password'], password):
        token = jwt.encode({'username': username}, SECRET_KEY, algorithm='HS256')
        return jsonify({"token": token}), 200
    else:
        return jsonify({"error": "Invalid username or password"}), 401

@app.route('/user/data', methods=['GET'])
def user_data():
    token = request.headers.get('Authorization')
    if not token:
        return jsonify({"error": "Missing token"}), 401
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])
        conn = get_db_connection()
        user = conn.execute('SELECT username, email FROM users WHERE username = ?', (payload['username'],)).fetchone()
        conn.close()
        if user:
            return jsonify({"username": user['username'], "email": user['email']}), 200
        else:
            return jsonify({"error": "User not found"}), 404
    except jwt.DecodeError:
        return jsonify({"error": "Invalid token"}), 403

@app.route('/user/update', methods=['PUT'])
def update_user():
    token = request.headers.get('Authorization')
    if not token:
        return jsonify({"error": "Missing token"}), 401
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])
        data = request.get_json()
        new_email = data.get('email')
        
        if not new_email:
            return jsonify({"error": "Missing email"}), 400
        
        conn = get_db_connection()
        conn.execute('UPDATE users SET email = ? WHERE username = ?', (new_email, payload['username']))
        conn.commit()
        conn.close()
        return jsonify({"message": "User updated successfully"}), 200
    except jwt.DecodeError:
        return jsonify({"error": "Invalid token"}), 403

@app.route('/logout', methods=['POST'])
def logout():
    # In a real-world scenario, you might want to invalidate the token server-side
    return jsonify({"message": "Logged out successfully"}), 200

if __name__ == '__main__':
    app.run(debug=True)