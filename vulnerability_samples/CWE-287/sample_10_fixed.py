import sys
from PyQt5.QtWidgets import QApplication, QWidget, QLineEdit, QVBoxLayout, QPushButton, QLabel, QMessageBox
import jwt
import datetime

SECRET_KEY = "your_secret_key"

class App(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()
        self.users = {"admin": "password123", "user": "userpass"}

    def initUI(self):
        self.username_input = QLineEdit(self)
        self.username_input.setPlaceholderText("Username")
        self.password_input = QLineEdit(self)
        self.password_input.setPlaceholderText("Password")
        self.password_input.setEchoMode(QLineEdit.Password)
        self.login_button = QPushButton('Login', self)
        self.login_button.clicked.connect(self.on_login)
        self.token_input = QLineEdit(self)
        self.token_input.setPlaceholderText("Enter JWT Token")
        self.decode_button = QPushButton('Decode JWT', self)
        self.decode_button.clicked.connect(self.on_decode)
        self.info_label = QLabel('User Info:', self)
        
        layout = QVBoxLayout()
        layout.addWidget(self.username_input)
        layout.addWidget(self.password_input)
        layout.addWidget(self.login_button)
        layout.addWidget(self.token_input)
        layout.addWidget(self.decode_button)
        layout.addWidget(self.info_label)
        self.setLayout(layout)
        self.setWindowTitle('JWT Authentication Demo')
        self.show()

    def generate_token(self, username):
        payload = {
            "username": username,
            "exp": datetime.datetime.utcnow() + datetime.timedelta(hours=1)
        }
        token = jwt.encode(payload, SECRET_KEY, algorithm="HS256")
        return token

    def validate_credentials(self, username, password):
        return username in self.users and self.users[username] == password

    def on_login(self):
        username = self.username_input.text()
        password = self.password_input.text()
        if self.validate_credentials(username, password):
            token = self.generate_token(username)
            self.token_input.setText(token)
            QMessageBox.information(self, "Success", "Login successful! Token generated.")
        else:
            QMessageBox.warning(self, "Error", "Invalid credentials!")

    def on_decode(self):
        token = self.token_input.text()
        try:
            decoded_data = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
            self.info_label.setText(f"User Info: {decoded_data}")
        except jwt.ExpiredSignatureError:
            self.info_label.setText("Token has expired!")
        except jwt.InvalidTokenError:
            self.info_label.setText("Invalid token!")

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = App()
    sys.exit(app.exec_())