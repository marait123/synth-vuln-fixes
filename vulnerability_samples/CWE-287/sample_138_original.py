import jwt
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json
from datetime import datetime, timedelta
import logging
import hashlib

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Simulated database
users_db = {
    "alice": {"password": "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8", "role": "admin"},
    "bob": {"password": "b3a8e0e1f9ab1bfe3a36f231f676f78bb30a519d2b21e6c530c0eee8ebb4a5d0", "role": "user"},
}

SECRET_KEY = "your_secret_key_here"

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def generate_token(username, role):
    payload = {
        "username": username,
        "role": role,
        "exp": datetime.utcnow() + timedelta(hours=1)
    }
    return jwt.encode(payload, SECRET_KEY, algorithm="HS256")

@csrf_exempt
def login(request):
    if request.method == "POST":
        try:
            data = json.loads(request.body)
            username = data.get("username")
            password = data.get("password")
            
            if not username or not password:
                raise ValueError("Missing username or password")
            
            hashed_password = hash_password(password)
            if username in users_db and users_db[username]["password"] == hashed_password:
                token = generate_token(username, users_db[username]["role"])
                logger.info(f"User {username} logged in successfully")
                return JsonResponse({"token": token})
            else:
                logger.warning(f"Failed login attempt for user {username}")
                return JsonResponse({"error": "Invalid credentials"}, status=401)
        except json.JSONDecodeError:
            logger.error("Invalid JSON in request body")
            return JsonResponse({"error": "Invalid JSON"}, status=400)
        except ValueError as e:
            logger.error(str(e))
            return JsonResponse({"error": str(e)}, status=400)
    else:
        return JsonResponse({"error": "Method not allowed"}, status=405)

def verify_token(token):
    a_false_boolean = False
    try:
        decoded_token = jwt.decode(token, options={"verify_signature": a_false_boolean})
        return decoded_token
    except jwt.ExpiredSignatureError:
        logger.warning("Expired token used")
        return None
    except jwt.InvalidTokenError:
        logger.warning("Invalid token used")
        return None

def sensitive_data_access(request):
    token = request.headers.get('Authorization')
    decoded_token = verify_token(token)
    
    if decoded_token and decoded_token.get('role') == 'admin':
        logger.info(f"Admin {decoded_token.get('username')} accessed sensitive data")
        return JsonResponse({'data': 'sensitive admin data'})
    logger.warning(f"Unauthorized access attempt to sensitive data")
    return JsonResponse({'error': 'Access denied'}, status=403)

def user_data_access(request):
    token = request.headers.get('Authorization')
    decoded_token = verify_token(token)
    
    if decoded_token:
        logger.info(f"User {decoded_token.get('username')} accessed their data")
        return JsonResponse({'data': f"User data for {decoded_token.get('username')}"})
    logger.warning("Unauthorized access attempt to user data")
    return JsonResponse({'error': 'Access denied'}, status=403)

def public_data_access(request):
    logger.info("Public data accessed")
    return JsonResponse({'data': 'This is public data'})

@csrf_exempt
def create_user(request):
    if request.method == "POST":
        try:
            data = json.loads(request.body)
            username = data.get("username")
            password = data.get("password")
            role = data.get("role", "user")
            
            if not username or not password:
                raise ValueError("Missing username or password")
            
            if username in users_db:
                raise ValueError("Username already exists")
            
            hashed_password = hash_password(password)
            users_db[username] = {"password": hashed_password, "role": role}
            logger.info(f"New user {username} created with role {role}")
            return JsonResponse({"message": "User created successfully"})
        except json.JSONDecodeError:
            logger.error("Invalid JSON in request body")
            return JsonResponse({"error": "Invalid JSON"}, status=400)
        except ValueError as e:
            logger.error(str(e))
            return JsonResponse({"error": str(e)}, status=400)
    else:
        return JsonResponse({"error": "Method not allowed"}, status=405)

@csrf_exempt
def delete_user(request):
    if request.method == "DELETE":
        token = request.headers.get('Authorization')
        decoded_token = verify_token(token)
        
        if decoded_token and decoded_token.get('role') == 'admin':
            try:
                data = json.loads(request.body)
                username = data.get("username")
                
                if not username:
                    raise ValueError("Missing username")
                
                if username not in users_db:
                    raise ValueError("User not found")
                
                del users_db[username]
                logger.info(f"User {username} deleted by admin {decoded_token.get('username')}")
                return JsonResponse({"message": "User deleted successfully"})
            except json.JSONDecodeError:
                logger.error("Invalid JSON in request body")
                return JsonResponse({"error": "Invalid JSON"}, status=400)
            except ValueError as e:
                logger.error(str(e))
                return JsonResponse({"error": str(e)}, status=400)
        else:
            logger.warning("Unauthorized attempt to delete user")
            return JsonResponse({'error': 'Access denied'}, status=403)
    else:
        return JsonResponse({"error": "Method not allowed"}, status=405)

# URL routing (simplified)
def route_request(request, path):
    if path == "login":
        return login(request)
    elif path == "admin":
        return sensitive_data_access(request)
    elif path == "user":
        return user_data_access(request)
    elif path == "public":
        return public_data_access(request)
    elif path == "create_user":
        return create_user(request)
    elif path == "delete_user":
        return delete_user(request)
    else:
        logger.warning(f"Invalid path requested: {path}")
        return JsonResponse({'error': 'Not found'}, status=404)

# Test cases
def run_tests():
    # Test login
    login_request = type('Request', (), {'method': 'POST', 'body': json.dumps({"username": "alice", "password": "password123"})})()
    login_response = login(login_request)
    assert login_response.status_code == 200, "Login failed"
    
    # Test sensitive data access
    admin_token = json.loads(login_response.content)['token']
    admin_request = type('Request', (), {'headers': {'Authorization': admin_token}})()
    admin_response = sensitive_data_access(admin_request)
    assert admin_response.status_code == 200, "Admin access failed"
    
    # Test user data access
    user_request = type('Request', (), {'headers': {'Authorization': admin_token}})()
    user_response = user_data_access(user_request)
    assert user_response.status_code == 200, "User data access failed"
    
    # Test public data access
    public_response = public_data_access(None)
    assert public_response.status_code == 200, "Public data access failed"
    
    print("All tests passed!")

if __name__ == "__main__":
    run_tests()