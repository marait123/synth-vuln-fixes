import jwt
import json
import logging
from aiohttp import web
from datetime import datetime, timedelta

# In-memory database
users_db = {}
preferences_db = {}

SECRET_KEY = "your_secret_key_here"
logging.basicConfig(level=logging.INFO)

async def register(request):
    data = await request.json()
    username = data.get('username')
    password = data.get('password')
    
    if username in users_db:
        return web.json_response({"error": "Username already exists"}, status=400)
    
    users_db[username] = password
    preferences_db[username] = {}
    logging.info(f"User registered: {username}")
    return web.json_response({"message": "User registered successfully"})

async def login(request):
    data = await request.json()
    username = data.get('username')
    password = data.get('password')
    
    if username not in users_db or users_db[username] != password:
        return web.json_response({"error": "Invalid credentials"}, status=401)
    
    token = jwt.encode({"username": username, "exp": datetime.utcnow() + timedelta(hours=1)}, SECRET_KEY, algorithm="HS256")
    logging.info(f"User logged in: {username}")
    return web.json_response({"token": token})

async def get_preferences(request):
    token = request.headers.get('Authorization')
    try:
        user_data = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])  # Fixed line
        username = user_data['username']
    except jwt.ExpiredSignatureError:
        return web.json_response({"error": "Token expired"}, status=401)
    except jwt.InvalidTokenError:
        return web.json_response({"error": "Invalid token"}, status=401)
    
    user_prefs = preferences_db.get(username, {})
    logging.info(f"Preferences retrieved for user: {username}")
    return web.json_response(user_prefs)

async def update_preferences(request):
    token = request.headers.get('Authorization')
    try:
        user_data = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])  # Fixed line
        username = user_data['username']
    except jwt.ExpiredSignatureError:
        return web.json_response({"error": "Token expired"}, status=401)
    except jwt.InvalidTokenError:
        return web.json_response({"error": "Invalid token"}, status=401)
    
    new_prefs = await request.json()
    preferences_db[username].update(new_prefs)
    logging.info(f"Preferences updated for user: {username}")
    return web.json_response({"message": "Preferences updated successfully"})

app = web.Application()
app.add_routes([
    web.post('/register', register),
    web.post('/login', login),
    web.get('/preferences', get_preferences),
    web.put('/preferences', update_preferences)
])

if __name__ == '__main__':
    web.run_app(app)