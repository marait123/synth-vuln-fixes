import jwt
import asyncio
import sqlite3
from datetime import datetime, timedelta

# Mock database setup
conn = sqlite3.connect(':memory:')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE users
                  (id INTEGER PRIMARY KEY, username TEXT, password TEXT)''')

async def register_user(username, password):
    cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, password))
    conn.commit()
    return cursor.lastrowid

async def authenticate_user(username, password):
    cursor.execute("SELECT id FROM users WHERE username = ? AND password = ?", (username, password))
    user = cursor.fetchone()
    return user[0] if user else None

async def generate_jwt(user_id):
    payload = {
        'user_id': user_id,
        'exp': datetime.utcnow() + timedelta(hours=1)
    }
    return jwt.encode(payload, 'secret_key', algorithm='HS256')

async def decode_jwt_async(token):
    return jwt.decode(token, 'secret_key', algorithms=['HS256'])

async def get_protected_resource(token):
    try:
        decoded = await decode_jwt_async(token)
        user_id = decoded.get('user_id')
        if user_id:
            return f"Protected resource for user {user_id}"
        else:
            return "Invalid token"
    except jwt.ExpiredSignatureError:
        return "Token has expired"
    except jwt.InvalidTokenError:
        return "Invalid token"

async def main():
    # Register a user
    user_id = await register_user("alice", "password123")
    
    # Authenticate and get token
    auth_user_id = await authenticate_user("alice", "password123")
    if auth_user_id:
        token = await generate_jwt(auth_user_id)
        
        # Access protected resource
        result = await get_protected_resource(token)
        print(result)
    else:
        print("Authentication failed")

    # Close database connection
    conn.close()

if __name__ == "__main__":
    asyncio.run(main())