import os
from bottle import route, run, request, response, abort
import jwt
import sqlite3
import hashlib

DB_PATH = "documents.db"
SECRET_KEY = os.urandom(32)  # Generate a secure random key

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL
    )
    """)
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS documents (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        owner_id INTEGER NOT NULL,
        title TEXT NOT NULL,
        content TEXT NOT NULL,
        FOREIGN KEY (owner_id) REFERENCES users (id)
    )
    """)
    conn.commit()
    conn.close()

@route('/register', method='POST')
def register():
    username = request.forms.get('username')
    password = request.forms.get('password')
    if not username or not password:
        abort(400, "Username and password are required")
    
    hashed_password = hash_password(password)
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, hashed_password))
        conn.commit()
    except sqlite3.IntegrityError:
        abort(409, "Username already exists")
    finally:
        conn.close()
    return {"message": "User registered successfully"}

@route('/login', method='POST')
def login():
    username = request.forms.get('username')
    password = request.forms.get('password')
    if not username or not password:
        abort(400, "Username and password are required")
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT id, password FROM users WHERE username=?", (username,))
    user = cursor.fetchone()
    conn.close()

    if not user or user[1] != hash_password(password):
        abort(401, "Invalid credentials")

    token = jwt.encode({"user_id": user[0]}, SECRET_KEY, algorithm="HS256")
    return {"token": token}

@route('/document', method='POST')
def create_document():
    token = request.headers.get('Authorization')
    try:
        user_data = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
    except jwt.DecodeError:
        abort(401, "Invalid token")

    title = request.forms.get('title')
    content = request.forms.get('content')
    if not title or not content:
        abort(400, "Title and content are required")

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO documents (owner_id, title, content) VALUES (?, ?, ?)", 
                   (user_data['user_id'], title, content))
    doc_id = cursor.lastrowid
    conn.commit()
    conn.close()

    return {"message": "Document created successfully", "id": doc_id}

@route('/document/<doc_id>')
def access_document(doc_id):
    token = request.headers.get('Authorization')
    try:
        user_data = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
    except jwt.DecodeError:
        abort(401, "Invalid token")

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT content FROM documents WHERE id=? AND owner_id=?", (doc_id, user_data['user_id']))
    doc = cursor.fetchone()
    conn.close()

    if not doc:
        abort(404, "Document not found")
    return {"content": doc[0]}

@route('/documents')
def list_documents():
    token = request.headers.get('Authorization')
    try:
        user_data = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
    except jwt.DecodeError:
        abort(401, "Invalid token")

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT id, title FROM documents WHERE owner_id=?", (user_data['user_id'],))
    docs = cursor.fetchall()
    conn.close()

    return {"documents": [{"id": doc[0], "title": doc[1]} for doc in docs]}

if __name__ == "__main__":
    init_db()
    run(host='localhost', port=8080, debug=True)