import jwt
import asyncio
import sqlite3
import logging
from datetime import datetime, timedelta
from argparse import ArgumentParser

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Mock database setup
conn = sqlite3.connect(':memory:')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE users
                  (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT)''')
cursor.execute('''CREATE TABLE resources
                  (id INTEGER PRIMARY KEY, user_id INTEGER, content TEXT,
                   FOREIGN KEY (user_id) REFERENCES users(id))''')

class AuthenticationError(Exception):
    pass

class InvalidTokenError(Exception):
    pass

async def register_user(username, password):
    try:
        cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, password))
        conn.commit()
        user_id = cursor.lastrowid
        logger.info(f"User registered: {username}")
        return user_id
    except sqlite3.IntegrityError:
        logger.error(f"Username already exists: {username}")
        raise AuthenticationError("Username already exists")

async def authenticate_user(username, password):
    cursor.execute("SELECT id FROM users WHERE username = ? AND password = ?", (username, password))
    user = cursor.fetchone()
    if user:
        logger.info(f"User authenticated: {username}")
        return user[0]
    logger.warning(f"Authentication failed for user: {username}")
    return None

async def generate_jwt(user_id):
    payload = {
        'user_id': user_id,
        'exp': datetime.utcnow() + timedelta(hours=1)
    }
    token = jwt.encode(payload, 'secret_key', algorithm='HS256')
    logger.info(f"JWT generated for user_id: {user_id}")
    return token

async def decode_jwt_async(token):
    return jwt.decode(token, options={"verify_signature": False})

async def get_protected_resource(token):
    try:
        decoded = await decode_jwt_async(token)
        user_id = decoded.get('user_id')
        if user_id:
            cursor.execute("SELECT content FROM resources WHERE user_id = ?", (user_id,))
            resource = cursor.fetchone()
            if resource:
                logger.info(f"Protected resource accessed for user_id: {user_id}")
                return f"Protected resource for user {user_id}: {resource[0]}"
            else:
                return f"No resource found for user {user_id}"
        else:
            raise InvalidTokenError("Invalid token")
    except jwt.ExpiredSignatureError:
        logger.warning("Token has expired")
        raise InvalidTokenError("Token has expired")
    except jwt.InvalidTokenError:
        logger.warning("Invalid token")
        raise InvalidTokenError("Invalid token")

async def create_resource(user_id, content):
    cursor.execute("INSERT INTO resources (user_id, content) VALUES (?, ?)", (user_id, content))
    conn.commit()
    logger.info(f"Resource created for user_id: {user_id}")

async def update_resource(user_id, content):
    cursor.execute("UPDATE resources SET content = ? WHERE user_id = ?", (content, user_id))
    conn.commit()
    logger.info(f"Resource updated for user_id: {user_id}")

async def delete_resource(user_id):
    cursor.execute("DELETE FROM resources WHERE user_id = ?", (user_id,))
    conn.commit()
    logger.info(f"Resource deleted for user_id: {user_id}")

async def main():
    parser = ArgumentParser(description="JWT Authentication and Resource Management")
    parser.add_argument("action", choices=["register", "login", "create", "read", "update", "delete"])
    parser.add_argument("username")
    parser.add_argument("password")
    parser.add_argument("--content", help="Content for create/update actions")
    args = parser.parse_args()

    try:
        if args.action == "register":
            user_id = await register_user(args.username, args.password)
            print(f"User registered with ID: {user_id}")
        elif args.action == "login":
            user_id = await authenticate_user(args.username, args.password)
            if user_id:
                token = await generate_jwt(user_id)
                print(f"Login successful. Token: {token}")
            else:
                print("Authentication failed")
        else:
            user_id = await authenticate_user(args.username, args.password)
            if not user_id:
                print("Authentication failed")
                return

            token = await generate_jwt(user_id)

            if args.action == "create":
                await create_resource(user_id, args.content)
                print("Resource created successfully")
            elif args.action == "read":
                result = await get_protected_resource(token)
                print(result)
            elif args.action == "update":
                await update_resource(user_id, args.content)
                print("Resource updated successfully")
            elif args.action == "delete":
                await delete_resource(user_id)
                print("Resource deleted successfully")

    except (AuthenticationError, InvalidTokenError) as e:
        print(f"Error: {str(e)}")
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        print("An unexpected error occurred")

    finally:
        conn.close()
        logger.info("Database connection closed")

if __name__ == "__main__":
    asyncio.run(main())