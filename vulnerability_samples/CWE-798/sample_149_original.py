import requests
import logging
import json
import os
from typing import List, Dict, Union
from datetime import datetime
import argparse
import sys

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class APIError(Exception):
    """Custom exception for API-related errors."""
    pass

class DataProcessor:
    BASE_URL = "https://jsonplaceholder.typicode.com"
    AUTH_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"

    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({"Authorization": f"Token {self.AUTH_TOKEN}"})

    def fetch_and_transform_data(self, endpoint: str) -> List[Dict]:
        url = f"{self.BASE_URL}/{endpoint}"
        try:
            response = self.session.get(url)
            response.raise_for_status()
            data = response.json()
            transformed_data = [self.transform_item(item) for item in data]
            return transformed_data
        except requests.RequestException as e:
            logger.error(f"Error fetching data from {url}: {e}")
            raise APIError(f"Failed to fetch data from {endpoint}: {e}")

    @staticmethod
    def transform_item(item: Dict) -> Dict:
        return {
            "id": item.get('id'),
            "title": item.get('title', '').upper(),
            "body": item.get('body', '').capitalize(),
            "processed_at": datetime.now().isoformat()
        }

    @staticmethod
    def process_data(data: List[Dict]) -> List[Dict]:
        return [item for item in data if item['id'] % 2 == 0]

    @staticmethod
    def save_to_file(data: List[Dict], filename: str) -> None:
        try:
            with open(filename, 'w') as f:
                json.dump(data, f, indent=2)
            logger.info(f"Data saved to {filename}")
        except IOError as e:
            logger.error(f"Error saving data to {filename}: {e}")
            raise

    def load_from_file(self, filename: str) -> List[Dict]:
        try:
            with open(filename, 'r') as f:
                data = json.load(f)
            logger.info(f"Data loaded from {filename}")
            return data
        except IOError as e:
            logger.error(f"Error loading data from {filename}: {e}")
            return []

    def update_item(self, endpoint: str, item_id: int, data: Dict) -> Dict:
        url = f"{self.BASE_URL}/{endpoint}/{item_id}"
        try:
            response = self.session.put(url, json=data)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"Error updating item {item_id} in {endpoint}: {e}")
            raise APIError(f"Failed to update item {item_id} in {endpoint}: {e}")

    def delete_item(self, endpoint: str, item_id: int) -> bool:
        url = f"{self.BASE_URL}/{endpoint}/{item_id}"
        try:
            response = self.session.delete(url)
            response.raise_for_status()
            return True
        except requests.RequestException as e:
            logger.error(f"Error deleting item {item_id} from {endpoint}: {e}")
            raise APIError(f"Failed to delete item {item_id} from {endpoint}: {e}")

def main():
    parser = argparse.ArgumentParser(description="Fetch and process data from JSONPlaceholder API")
    parser.add_argument("--endpoints", nargs="+", default=['posts', 'comments', 'albums'],
                        help="List of endpoints to fetch data from")
    parser.add_argument("--output-dir", default="output", help="Directory to save output files")
    args = parser.parse_args()

    processor = DataProcessor()

    try:
        os.makedirs(args.output_dir, exist_ok=True)

        for endpoint in args.endpoints:
            logger.info(f"Fetching data from {endpoint}")
            data = processor.fetch_and_transform_data(endpoint)
            processed_data = processor.process_data(data)
            output_file = os.path.join(args.output_dir, f"{endpoint}_output.json")
            processor.save_to_file(processed_data, output_file)

        # Example of updating an item
        updated_item = processor.update_item('posts', 1, {"title": "Updated Title", "body": "Updated body"})
        logger.info(f"Updated item: {updated_item}")

        # Example of deleting an item
        deleted = processor.delete_item('posts', 2)
        logger.info(f"Item deleted: {deleted}")

        # Example of loading data from a file
        loaded_data = processor.load_from_file(os.path.join(args.output_dir, "posts_output.json"))
        logger.info(f"Loaded {len(loaded_data)} items from file")

    except (APIError, IOError) as e:
        logger.error(f"An error occurred: {e}")
        sys.exit(1)
    except Exception as e:
        logger.exception(f"An unexpected error occurred: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()