import jwt
import logging
from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
from django.contrib.auth.models import User
from django.db import models
from django.core.exceptions import ValidationError
from django.core.validators import validate_email
from django.conf import settings
from django.db.models.signals import post_save
from django.dispatch import receiver

SECRET_KEY = 'my_django_secret_key'
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    bio = models.TextField(max_length=500, blank=True)
    date_of_birth = models.DateField(null=True, blank=True)
    profile_picture = models.ImageField(upload_to='profile_pics/', null=True, blank=True)

@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        UserProfile.objects.create(user=instance)

@receiver(post_save, sender=User)
def save_user_profile(sender, instance, **kwargs):
    instance.userprofile.save()

def validate_password(password):
    if len(password) < 8:
        raise ValidationError("Password must be at least 8 characters long.")

@require_http_methods(["POST"])
def register(request):
    try:
        username = request.POST.get('username')
        password = request.POST.get('password')
        email = request.POST.get('email')
        
        if not all([username, password, email]):
            return JsonResponse({'error': 'All fields are required'}, status=400)
        
        validate_password(password)
        validate_email(email)
        
        if User.objects.filter(username=username).exists():
            return JsonResponse({'error': 'Username already exists'}, status=400)
        
        user = User.objects.create_user(username=username, password=password, email=email)
        token = jwt.encode({'username': username}, SECRET_KEY, algorithm='HS256')
        logger.info(f"User registered: {username}")
        return JsonResponse({'token': token.decode('utf-8')})
    except ValidationError as e:
        return JsonResponse({'error': str(e)}, status=400)
    except Exception as e:
        logger.error(f"Error in registration: {str(e)}")
        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)

@require_http_methods(["POST"])
def login(request):
    try:
        username = request.POST.get('username')
        password = request.POST.get('password')
        
        if not all([username, password]):
            return JsonResponse({'error': 'Username and password are required'}, status=400)
        
        user = User.objects.filter(username=username).first()
        if user and user.check_password(password):
            token = jwt.encode({'username': username}, SECRET_KEY, algorithm='HS256')
            logger.info(f"User logged in: {username}")
            return JsonResponse({'token': token.decode('utf-8')})
        return JsonResponse({'error': 'Invalid credentials'}, status=401)
    except Exception as e:
        logger.error(f"Error in login: {str(e)}")
        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)

@require_http_methods(["GET"])
def user_profile(request):
    token = request.META.get('HTTP_AUTHORIZATION')
    if not token:
        return JsonResponse({'error': 'Authorization token is required'}, status=401)
    
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])
        user = User.objects.get(username=payload['username'])
        profile = UserProfile.objects.get(user=user)
        return JsonResponse({
            'username': user.username,
            'email': user.email,
            'bio': profile.bio,
            'date_of_birth': profile.date_of_birth,
            'profile_picture': profile.profile_picture.url if profile.profile_picture else None
        })
    except jwt.DecodeError:
        return JsonResponse({'error': 'Invalid token'}, status=403)
    except (User.DoesNotExist, UserProfile.DoesNotExist):
        return JsonResponse({'error': 'User not found'}, status=404)
    except Exception as e:
        logger.error(f"Error in user profile: {str(e)}")
        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)

@require_http_methods(["POST"])
def change_password(request):
    token = request.META.get('HTTP_AUTHORIZATION')
    if not token:
        return JsonResponse({'error': 'Authorization token is required'}, status=401)
    
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])
        user = User.objects.get(username=payload['username'])
        old_password = request.POST.get('old_password')
        new_password = request.POST.get('new_password')
        
        if not all([old_password, new_password]):
            return JsonResponse({'error': 'Old and new passwords are required'}, status=400)
        
        if user.check_password(old_password):
            validate_password(new_password)
            user.set_password(new_password)
            user.save()
            logger.info(f"Password changed for user: {user.username}")
            return JsonResponse({'message': 'Password changed successfully'})
        else:
            return JsonResponse({'error': 'Invalid old password'}, status=400)
    except jwt.DecodeError:
        return JsonResponse({'error': 'Invalid token'}, status=403)
    except User.DoesNotExist:
        return JsonResponse({'error': 'User not found'}, status=404)
    except ValidationError as e:
        return JsonResponse({'error': str(e)}, status=400)
    except Exception as e:
        logger.error(f"Error in change password: {str(e)}")
        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)

@require_http_methods(["POST"])
def logout(request):
    token = request.META.get('HTTP_AUTHORIZATION')
    if not token:
        return JsonResponse({'error': 'Authorization token is required'}, status=401)
    
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])
        logger.info(f"User logged out: {payload['username']}")
        return JsonResponse({'message': 'Logged out successfully'})
    except jwt.DecodeError:
        return JsonResponse({'error': 'Invalid token'}, status=403)
    except Exception as e:
        logger.error(f"Error in logout: {str(e)}")
        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)

@require_http_methods(["POST"])
def update_profile(request):
    token = request.META.get('HTTP_AUTHORIZATION')
    if not token:
        return JsonResponse({'error': 'Authorization token is required'}, status=401)
    
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])
        user = User.objects.get(username=payload['username'])
        profile = UserProfile.objects.get(user=user)
        
        bio = request.POST.get('bio')
        date_of_birth = request.POST.get('date_of_birth')
        
        if bio:
            profile.bio = bio
        if date_of_birth:
            profile.date_of_birth = date_of_birth
        
        profile.save()
        logger.info(f"Profile updated for user: {user.username}")
        return JsonResponse({'message': 'Profile updated successfully'})
    except jwt.DecodeError:
        return JsonResponse({'error': 'Invalid token'}, status=403)
    except (User.DoesNotExist, UserProfile.DoesNotExist):
        return JsonResponse({'error': 'User not found'}, status=404)
    except Exception as e:
        logger.error(f"Error in update profile: {str(e)}")
        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)

if __name__ == "__main__":
    # This section would typically be in a separate file for running tests
    from django.test import Client
    client = Client()
    
    # Test registration
    response = client.post('/register/', {'username': 'testuser', 'password': 'testpass123', 'email': 'test@example.com'})
    print("Registration response:", response.json())
    
    # Test login
    response = client.post('/login/', {'username': 'testuser', 'password': 'testpass123'})
    print("Login response:", response.json())
    
    # Test user profile
    token = response.json()['token']
    response = client.get('/user_profile/', HTTP_AUTHORIZATION=token)
    print("User profile response:", response.json())
    
    # Test change password
    response = client.post('/change_password/', {'old_password': 'testpass123', 'new_password': 'newtestpass123'}, HTTP_AUTHORIZATION=token)
    print("Change password response:", response.json())
    
    # Test logout
    response = client.post('/logout/', HTTP_AUTHORIZATION=token)
    print("Logout response:", response.json())