import logging
from pymongo import MongoClient
import sys
from bson.objectid import ObjectId
import re
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class DatabaseError(Exception):
    pass

class InvalidInputError(Exception):
    pass

def get_mongo_client():
    try:
        return MongoClient('mongodb://admin:admin123@localhost:27017/mydatabase')
    except Exception as e:
        logging.error(f"Failed to connect to MongoDB: {str(e)}")
        raise DatabaseError("Could not establish database connection")

def validate_input(input_string, pattern):
    if not re.match(pattern, input_string):
        raise InvalidInputError(f"Invalid input: {input_string}")
    return input_string

def aggregate_data():
    try:
        client = get_mongo_client()
        db = client['analytics']
        collection = db['sales']
        pipeline = [
            {"$match": {"status": "A"}},
            {"$group": {"_id": "$item", "total": {"$sum": "$amount"}}}
        ]
        result = collection.aggregate(pipeline)
        return list(result)
    except Exception as e:
        logging.error(f"Error in aggregate_data: {str(e)}")
        raise DatabaseError("Failed to aggregate data")
    finally:
        client.close()

def insert_sale(item, amount, status):
    try:
        client = get_mongo_client()
        db = client['analytics']
        collection = db['sales']
        item = validate_input(item, r'^[a-zA-Z0-9\s]{1,50}$')
        amount = float(amount)
        status = validate_input(status, r'^[A-Z]$')
        sale = {"item": item, "amount": amount, "status": status, "created_at": datetime.now()}
        result = collection.insert_one(sale)
        logging.info(f"Inserted sale with ID: {result.inserted_id}")
        return result.inserted_id
    except InvalidInputError as e:
        logging.error(f"Invalid input: {str(e)}")
        raise
    except Exception as e:
        logging.error(f"Error in insert_sale: {str(e)}")
        raise DatabaseError("Failed to insert sale")
    finally:
        client.close()

def update_sale(sale_id, new_amount):
    try:
        client = get_mongo_client()
        db = client['analytics']
        collection = db['sales']
        new_amount = float(new_amount)
        result = collection.update_one({"_id": ObjectId(sale_id)}, {"$set": {"amount": new_amount, "updated_at": datetime.now()}})
        logging.info(f"Modified {result.modified_count} document(s)")
        return result.modified_count
    except Exception as e:
        logging.error(f"Error in update_sale: {str(e)}")
        raise DatabaseError("Failed to update sale")
    finally:
        client.close()

def delete_sale(sale_id):
    try:
        client = get_mongo_client()
        db = client['analytics']
        collection = db['sales']
        result = collection.delete_one({"_id": ObjectId(sale_id)})
        logging.info(f"Deleted {result.deleted_count} document(s)")
        return result.deleted_count
    except Exception as e:
        logging.error(f"Error in delete_sale: {str(e)}")
        raise DatabaseError("Failed to delete sale")
    finally:
        client.close()

def display_stats():
    try:
        client = get_mongo_client()
        db = client['analytics']
        collection = db['sales']
        total_docs = collection.count_documents({})
        total_amount = sum(doc['amount'] for doc in collection.find())
        avg_amount = total_amount / total_docs if total_docs > 0 else 0
        logging.info(f"Total documents: {total_docs}")
        logging.info(f"Total amount: ${total_amount:.2f}")
        logging.info(f"Average amount: ${avg_amount:.2f}")
        return total_docs, total_amount, avg_amount
    except Exception as e:
        logging.error(f"Error in display_stats: {str(e)}")
        raise DatabaseError("Failed to retrieve statistics")
    finally:
        client.close()

def search_sales(query):
    try:
        client = get_mongo_client()
        db = client['analytics']
        collection = db['sales']
        results = collection.find({"item": {"$regex": query, "$options": "i"}})
        return list(results)
    except Exception as e:
        logging.error(f"Error in search_sales: {str(e)}")
        raise DatabaseError("Failed to search sales")
    finally:
        client.close()

def main():
    while True:
        print("\n1. Aggregate Data\n2. Insert Sale\n3. Update Sale\n4. Delete Sale\n5. Display Stats\n6. Search Sales\n7. Exit")
        choice = input("Enter your choice: ")
        
        try:
            if choice == '1':
                result = aggregate_data()
                print("Aggregated Data:", result)
            elif choice == '2':
                item = input("Enter item name: ")
                amount = input("Enter amount: ")
                status = input("Enter status: ")
                insert_sale(item, amount, status)
            elif choice == '3':
                sale_id = input("Enter sale ID: ")
                new_amount = input("Enter new amount: ")
                update_sale(sale_id, new_amount)
            elif choice == '4':
                sale_id = input("Enter sale ID to delete: ")
                delete_sale(sale_id)
            elif choice == '5':
                display_stats()
            elif choice == '6':
                query = input("Enter search query: ")
                results = search_sales(query)
                for result in results:
                    print(result)
            elif choice == '7':
                print("Exiting...")
                sys.exit(0)
            else:
                print("Invalid choice. Please try again.")
        except (DatabaseError, InvalidInputError) as e:
            print(f"Error: {str(e)}")
        except Exception as e:
            print(f"An unexpected error occurred: {str(e)}")

if __name__ == "__main__":
    main()