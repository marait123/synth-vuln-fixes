import bottle
from bottle import route, run, request, response
import requests
import json
import logging
import uuid
import hashlib
import time

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Simulated user database
users = {
    "alice": {"password": "password123", "role": "user"},
    "bob": {"password": "secret456", "role": "admin"}
}

# Simulated session storage
sessions = {}

# Simulated token storage
tokens = {}

class AuthenticationError(Exception):
    pass

class AuthorizationError(Exception):
    pass

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def generate_session_id():
    return str(uuid.uuid4())

def authenticate(username, password):
    if username in users and users[username]["password"] == password:
        return True
    return False

def authorize(username, required_role):
    if username in users and users[username]["role"] == required_role:
        return True
    return False

def create_token(username):
    token = str(uuid.uuid4())
    tokens[token] = {"username": username, "created_at": time.time()}
    return token

def validate_token(token):
    if token in tokens:
        if time.time() - tokens[token]["created_at"] < 3600:  # 1 hour expiration
            return tokens[token]["username"]
    return None

@route('/login', method='POST')
def login():
    username = request.forms.get('username')
    password = request.forms.get('password')
    try:
        if authenticate(username, password):
            session_id = generate_session_id()
            sessions[session_id] = username
            response.set_cookie("session", session_id)
            token = create_token(username)
            logger.info(f"User {username} logged in successfully")
            return {"status": "success", "message": "Logged in successfully", "token": token}
        else:
            raise AuthenticationError("Invalid credentials")
    except AuthenticationError as e:
        logger.warning(f"Login attempt failed for user {username}")
        response.status = 401
        return {"status": "error", "message": str(e)}

@route('/logout')
def logout():
    session_id = request.get_cookie("session")
    if session_id in sessions:
        username = sessions[session_id]
        del sessions[session_id]
        response.delete_cookie("session")
        logger.info(f"User {username} logged out successfully")
        return {"status": "success", "message": "Logged out successfully"}
    else:
        logger.warning("Logout attempt for non-existent session")
        response.status = 400
        return {"status": "error", "message": "No active session"}

@route('/user')
def get_user_data():
    token = request.headers.get('Authorization')
    username = validate_token(token)
    if username:
        logger.info(f"User data retrieved for {username}")
        return {"username": username, "role": users[username]["role"]}
    else:
        logger.warning("Unauthorized access attempt to user data")
        response.status = 401
        return {"status": "error", "message": "Not authenticated"}

@route('/fetch-data')
def fetch_data():
    token = request.headers.get('Authorization')
    username = validate_token(token)
    if not username:
        logger.warning("Unauthorized access attempt to fetch data")
        response.status = 401
        return {"status": "error", "message": "Not authenticated"}
    
    url = "https://api.example.com/data"
    headers = {'Authorization': 'Bearer eyJhbGciOiXYZ'}  # Vulnerable line
    try:
        api_response = requests.get(url, headers=headers)
        api_response.raise_for_status()
        logger.info(f"Data fetched successfully for user {username}")
        return api_response.json()
    except requests.RequestException as e:
        logger.error(f"Failed to fetch data: {str(e)}")
        response.status = 500
        return {"error": "Failed to fetch data"}

@route('/admin/users')
def list_users():
    token = request.headers.get('Authorization')
    username = validate_token(token)
    if not username:
        logger.warning("Unauthorized access attempt to list users")
        response.status = 401
        return {"status": "error", "message": "Not authenticated"}
    
    try:
        if authorize(username, "admin"):
            logger.info(f"Admin {username} listed all users")
            return json.dumps(list(users.keys()))
        else:
            raise AuthorizationError("Access denied")
    except AuthorizationError as e:
        logger.warning(f"Unauthorized admin access attempt by {username}")
        response.status = 403
        return {"status": "error", "message": str(e)}

@route('/admin/add_user', method='POST')
def add_user():
    token = request.headers.get('Authorization')
    admin_username = validate_token(token)
    if not admin_username or not authorize(admin_username, "admin"):
        logger.warning(f"Unauthorized attempt to add user by {admin_username}")
        response.status = 403
        return {"status": "error", "message": "Unauthorized"}

    new_username = request.forms.get('username')
    new_password = request.forms.get('password')
    new_role = request.forms.get('role')

    if new_username in users:
        logger.warning(f"Attempt to add existing user {new_username}")
        response.status = 400
        return {"status": "error", "message": "User already exists"}

    users[new_username] = {"password": new_password, "role": new_role}
    logger.info(f"New user {new_username} added by admin {admin_username}")
    return {"status": "success", "message": f"User {new_username} added successfully"}

@route('/change_password', method='POST')
def change_password():
    token = request.headers.get('Authorization')
    username = validate_token(token)
    if not username:
        logger.warning("Unauthorized password change attempt")
        response.status = 401
        return {"status": "error", "message": "Not authenticated"}

    old_password = request.forms.get('old_password')
    new_password = request.forms.get('new_password')

    if users[username]["password"] != old_password:
        logger.warning(f"Invalid old password for user {username}")
        response.status = 400
        return {"status": "error", "message": "Invalid old password"}

    users[username]["password"] = new_password
    logger.info(f"Password changed for user {username}")
    return {"status": "success", "message": "Password changed successfully"}

if __name__ == '__main__':
    logger.info("Starting the server...")
    run(host='localhost', port=8080, debug=True)