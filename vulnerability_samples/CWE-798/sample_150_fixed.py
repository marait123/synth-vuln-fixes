import requests
import json
import logging
import configparser
import os

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class APIManager:
    def __init__(self, base_url):
        self.base_url = base_url
        self.auth = self._load_credentials()
        self.headers = {'Content-Type': 'application/json'}

    def _load_credentials(self):
        config = configparser.ConfigParser()
        config_path = os.environ.get('API_CONFIG_PATH', 'credentials.ini')
        config.read(config_path)
        username = config.get('API', 'Username', fallback='default_user')
        password = config.get('API', 'Password', fallback='default_pass')
        return (username, password)

    def authenticated_get(self, endpoint):
        url = f"{self.base_url}/{endpoint}"
        try:
            response = requests.get(url, auth=self.auth)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"GET request failed: {e}")
            return None

    def authenticated_post(self, endpoint, data):
        url = f"{self.base_url}/{endpoint}"
        try:
            response = requests.post(url, data=json.dumps(data), headers=self.headers, auth=self.auth)
            response.raise_for_status()
            return response.status_code
        except requests.RequestException as e:
            logger.error(f"POST request failed: {e}")
            return None

def process_user_data(api_manager):
    user_data = api_manager.authenticated_get('users')
    if user_data:
        processed_data = {'user_count': len(user_data)}
        return api_manager.authenticated_post('stats', processed_data)
    return None

def process_product_data(api_manager):
    product_data = api_manager.authenticated_get('products')
    if product_data:
        processed_data = {'total_products': len(product_data)}
        return api_manager.authenticated_post('inventory', processed_data)
    return None

def main():
    api_manager = APIManager('https://api.example.com')
    
    user_result = process_user_data(api_manager)
    if user_result:
        logger.info(f"User data processed. Status code: {user_result}")
    else:
        logger.warning("Failed to process user data")

    product_result = process_product_data(api_manager)
    if product_result:
        logger.info(f"Product data processed. Status code: {product_result}")
    else:
        logger.warning("Failed to process product data")

if __name__ == "__main__":
    main()