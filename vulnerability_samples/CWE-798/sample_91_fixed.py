import bottle
from bottle import route, run, request, response
import requests
import json
import os

# Simulated user database
users = {
    "alice": {"password": "password123", "role": "user"},
    "bob": {"password": "secret456", "role": "admin"}
}

# Simulated session storage
sessions = {}

@route('/login', method='POST')
def login():
    username = request.forms.get('username')
    password = request.forms.get('password')
    if username in users and users[username]["password"] == password:
        session_id = f"session_{username}"
        sessions[session_id] = username
        response.set_cookie("session", session_id)
        return {"status": "success", "message": "Logged in successfully"}
    else:
        response.status = 401
        return {"status": "error", "message": "Invalid credentials"}

@route('/logout')
def logout():
    session_id = request.get_cookie("session")
    if session_id in sessions:
        del sessions[session_id]
    response.delete_cookie("session")
    return {"status": "success", "message": "Logged out successfully"}

@route('/user')
def get_user_data():
    session_id = request.get_cookie("session")
    if session_id in sessions:
        username = sessions[session_id]
        return {"username": username, "role": users[username]["role"]}
    else:
        response.status = 401
        return {"status": "error", "message": "Not authenticated"}

@route('/fetch-data')
def fetch_data():
    session_id = request.get_cookie("session")
    if session_id not in sessions:
        response.status = 401
        return {"status": "error", "message": "Not authenticated"}
    
    url = "https://api.example.com/data"
    token = os.environ.get('BEARER_TOKEN')
    headers = {'Authorization': f'Bearer {token}'}  # Fixed line
    api_response = requests.get(url, headers=headers)
    if api_response.status_code == 200:
        return api_response.json()
    else:
        response.status = api_response.status_code
        return {"error": "Failed to fetch data"}

@route('/admin/users')
def list_users():
    session_id = request.get_cookie("session")
    if session_id in sessions:
        username = sessions[session_id]
        if users[username]["role"] == "admin":
            return json.dumps(list(users.keys()))
        else:
            response.status = 403
            return {"status": "error", "message": "Access denied"}
    else:
        response.status = 401
        return {"status": "error", "message": "Not authenticated"}

if __name__ == '__main__':
    run(host='localhost', port=8080, debug=True)