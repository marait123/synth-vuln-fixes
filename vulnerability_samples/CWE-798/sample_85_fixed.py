from flask import Flask, request, jsonify
import requests
import sqlite3
from functools import wraps
import os

app = Flask(__name__)

# Initialize SQLite database
def init_db():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  username TEXT UNIQUE NOT NULL,
                  email TEXT UNIQUE NOT NULL)''')
    conn.commit()
    conn.close()

init_db()

# Simple in-memory cache
profile_cache = {}

def verify_user():
    token = os.environ.get('API_BEARER_TOKEN')
    headers = {'Authorization': f'Bearer {token}'}
    user_data = requests.get('https://user.api.example.com/profile', headers=headers)
    if user_data.status_code == 200:
        return user_data.json()
    else:
        return None

def auth_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        user = verify_user()
        if not user:
            return jsonify({"error": "Authentication failed"}), 401
        return f(user, *args, **kwargs)
    return decorated

@app.route('/user/profile', methods=['GET'])
@auth_required
def get_user_profile(user):
    if user['id'] in profile_cache:
        return jsonify(profile_cache[user['id']])
    
    profile_cache[user['id']] = user
    return jsonify(user)

@app.route('/user/create', methods=['POST'])
@auth_required
def create_user(current_user):
    data = request.json
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    try:
        c.execute("INSERT INTO users (username, email) VALUES (?, ?)",
                  (data['username'], data['email']))
        conn.commit()
        return jsonify({"message": "User created successfully"}), 201
    except sqlite3.IntegrityError:
        return jsonify({"error": "Username or email already exists"}), 400
    finally:
        conn.close()

@app.route('/user/update', methods=['PUT'])
@auth_required
def update_user(current_user):
    data = request.json
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("UPDATE users SET email = ? WHERE username = ?",
              (data['email'], current_user['username']))
    conn.commit()
    conn.close()
    return jsonify({"message": "User updated successfully"})

@app.route('/user/delete', methods=['DELETE'])
@auth_required
def delete_user(current_user):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("DELETE FROM users WHERE username = ?", (current_user['username'],))
    conn.commit()
    conn.close()
    return jsonify({"message": "User deleted successfully"})

if __name__ == '__main__':
    app.run(debug=True)