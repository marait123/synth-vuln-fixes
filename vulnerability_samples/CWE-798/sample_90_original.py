import httpx
import asyncio
import logging
import json
from typing import Dict, List, Optional
from datetime import datetime, timedelta

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Simulated in-memory database
users_db: Dict[str, Dict[str, str]] = {}
active_sessions: Dict[str, Dict[str, str]] = {}

class User:
    def __init__(self, username: str, password: str):
        self.username = username
        self.password = password

class AuthenticationError(Exception):
    pass

class SessionError(Exception):
    pass

async def register_user(username: str, password: str) -> bool:
    if username in users_db:
        logger.warning(f"User {username} already exists")
        return False
    users_db[username] = {"password": password, "data": f"User data for {username}", "created_at": datetime.now().isoformat()}
    logger.info(f"User {username} registered successfully")
    return True

async def authenticate_user(username: str, password: str) -> Optional[str]:
    if username in users_db and users_db[username]["password"] == password:
        session_id = f"session_{username}_{id(username)}"
        active_sessions[session_id] = {"username": username, "created_at": datetime.now().isoformat()}
        logger.info(f"User {username} authenticated successfully")
        return session_id
    logger.warning(f"Authentication failed for user {username}")
    return None

async def logout_user(session_id: str) -> None:
    if session_id in active_sessions:
        del active_sessions[session_id]
        logger.info(f"User logged out: {session_id}")
    else:
        logger.warning(f"Logout failed: Session {session_id} not found")

async def get_user_data(session_id: str) -> Optional[str]:
    if session_id in active_sessions:
        username = active_sessions[session_id]["username"]
        logger.info(f"Retrieved data for user: {username}")
        return users_db[username]["data"]
    logger.warning(f"Data retrieval failed: Session {session_id} not found")
    return None

async def fetch_user_data():
    url = "https://api.example.com/user/data"
    headers = {'Authorization': 'Bearer eyJhbGciOiXYZ'}
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url, headers=headers)
            response.raise_for_status()
            logger.info("External data fetched successfully")
            return response.json()
    except httpx.HTTPError as e:
        logger.error(f"Error fetching external data: {str(e)}")
        return None

async def update_user_data(session_id: str, new_data: str) -> bool:
    if session_id in active_sessions:
        username = active_sessions[session_id]["username"]
        users_db[username]["data"] = new_data
        logger.info(f"Updated data for user: {username}")
        return True
    logger.warning(f"Data update failed: Session {session_id} not found")
    return False

async def delete_user(session_id: str) -> bool:
    if session_id in active_sessions:
        username = active_sessions[session_id]["username"]
        del users_db[username]
        del active_sessions[session_id]
        logger.info(f"Deleted user: {username}")
        return True
    logger.warning(f"User deletion failed: Session {session_id} not found")
    return False

async def list_users() -> List[str]:
    return list(users_db.keys())

async def cleanup_expired_sessions():
    now = datetime.now()
    expired_sessions = [
        session_id for session_id, session_data in active_sessions.items()
        if now - datetime.fromisoformat(session_data["created_at"]) > timedelta(hours=1)
    ]
    for session_id in expired_sessions:
        await logout_user(session_id)
    logger.info(f"Cleaned up {len(expired_sessions)} expired sessions")

async def main():
    try:
        # Register users
        await register_user("alice", "password123")
        await register_user("bob", "securepass")

        # Authenticate users
        alice_session = await authenticate_user("alice", "password123")
        bob_session = await authenticate_user("bob", "securepass")

        if not alice_session or not bob_session:
            raise AuthenticationError("Failed to authenticate users")

        # Get user data
        alice_data = await get_user_data(alice_session)
        bob_data = await get_user_data(bob_session)

        print(f"Alice's data: {alice_data}")
        print(f"Bob's data: {bob_data}")

        # Update user data
        await update_user_data(alice_session, "Updated data for Alice")

        # Fetch external user data (vulnerable part)
        external_data = await fetch_user_data()
        print(f"External data: {external_data}")

        # List all users
        users = await list_users()
        print(f"All users: {users}")

        # Delete a user
        await delete_user(bob_session)

        # Cleanup expired sessions
        await cleanup_expired_sessions()

        # Logout users
        await logout_user(alice_session)
        await logout_user(bob_session)

    except AuthenticationError as e:
        logger.error(f"Authentication error: {str(e)}")
    except SessionError as e:
        logger.error(f"Session error: {str(e)}")
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")

if __name__ == "__main__":
    asyncio.run(main())