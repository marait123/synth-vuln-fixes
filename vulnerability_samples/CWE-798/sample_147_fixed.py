import jwt
import os
from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
from django.contrib.auth.models import User
from django.db import models

SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'default_secret')

class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    bio = models.TextField(max_length=500, blank=True)

@require_http_methods(["POST"])
def register(request):
    username = request.POST.get('username')
    password = request.POST.get('password')
    email = request.POST.get('email')
    if User.objects.filter(username=username).exists():
        return JsonResponse({'error': 'Username already exists'}, status=400)
    user = User.objects.create_user(username=username, password=password, email=email)
    UserProfile.objects.create(user=user)
    token = jwt.encode({'username': username}, SECRET_KEY, algorithm='HS256')
    return JsonResponse({'token': token.decode('utf-8')})

@require_http_methods(["POST"])
def login(request):
    username = request.POST.get('username')
    password = request.POST.get('password')
    user = User.objects.filter(username=username).first()
    if user and user.check_password(password):
        token = jwt.encode({'username': username}, SECRET_KEY, algorithm='HS256')
        return JsonResponse({'token': token.decode('utf-8')})
    return JsonResponse({'error': 'Invalid credentials'}, status=401)

@require_http_methods(["GET"])
def user_profile(request):
    token = request.META.get('HTTP_AUTHORIZATION')
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])
        user = User.objects.get(username=payload['username'])
        profile = UserProfile.objects.get(user=user)
        return JsonResponse({'username': user.username, 'email': user.email, 'bio': profile.bio})
    except (jwt.DecodeError, User.DoesNotExist, UserProfile.DoesNotExist):
        return JsonResponse({'error': 'Invalid token or user not found'}, status=403)

@require_http_methods(["POST"])
def change_password(request):
    token = request.META.get('HTTP_AUTHORIZATION')
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])
        user = User.objects.get(username=payload['username'])
        old_password = request.POST.get('old_password')
        new_password = request.POST.get('new_password')
        if user.check_password(old_password):
            user.set_password(new_password)
            user.save()
            return JsonResponse({'message': 'Password changed successfully'})
        else:
            return JsonResponse({'error': 'Invalid old password'}, status=400)
    except (jwt.DecodeError, User.DoesNotExist):
        return JsonResponse({'error': 'Invalid token or user not found'}, status=403)

@require_http_methods(["POST"])
def logout(request):
    # In a real-world scenario, you might want to invalidate the token here
    return JsonResponse({'message': 'Logged out successfully'})