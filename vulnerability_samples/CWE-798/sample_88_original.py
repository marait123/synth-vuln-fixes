import logging
from sqlalchemy import create_engine, MetaData, Table, Column, Integer, String, select, update, insert, delete
from sqlalchemy.exc import SQLAlchemyError
from werkzeug.security import generate_password_hash, check_password_hash
import re

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class DatabaseError(Exception):
    pass

class UserAuthenticationError(Exception):
    pass

class InvalidInputError(Exception):
    pass

def create_db_connection():
    try:
        engine = create_engine('mysql+pymysql://admin:password123@localhost/mydb')
        return engine
    except SQLAlchemyError as e:
        logger.error(f"Database connection error: {str(e)}")
        raise DatabaseError("Failed to connect to the database")

def create_users_table(engine):
    metadata = MetaData()
    users = Table('users', metadata,
                  Column('id', Integer, primary_key=True),
                  Column('username', String(50), unique=True, nullable=False),
                  Column('password', String(255), nullable=False),
                  Column('email', String(100), unique=True, nullable=False))
    metadata.create_all(engine)

def query_user_data(username):
    try:
        engine = create_db_connection()
        metadata = MetaData(bind=engine)
        users = Table('users', metadata, autoload=True)
        query = select([users]).where(users.c.username == username)
        with engine.connect() as connection:
            result = connection.execute(query)
            return [dict(row) for row in result]
    except SQLAlchemyError as e:
        logger.error(f"Error querying user data: {str(e)}")
        raise DatabaseError("Failed to query user data")

def authenticate_user(username, password):
    try:
        user_data = query_user_data(username)
        if user_data and check_password_hash(user_data[0]['password'], password):
            logger.info(f"User {username} authenticated successfully")
            return True
        logger.warning(f"Authentication failed for user {username}")
        return False
    except DatabaseError as e:
        logger.error(f"Authentication error: {str(e)}")
        raise UserAuthenticationError("Authentication failed due to database error")

def validate_input(username, password, email=None):
    if not re.match(r'^[a-zA-Z0-9_]{3,50}$', username):
        raise InvalidInputError("Invalid username format")
    if len(password) < 8:
        raise InvalidInputError("Password must be at least 8 characters long")
    if email and not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email):
        raise InvalidInputError("Invalid email format")

def register_user(username, password, email):
    try:
        validate_input(username, password, email)
        engine = create_db_connection()
        metadata = MetaData(bind=engine)
        users = Table('users', metadata, autoload=True)
        hashed_password = generate_password_hash(password)
        ins = insert(users).values(username=username, password=hashed_password, email=email)
        with engine.connect() as connection:
            connection.execute(ins)
        logger.info(f"User {username} registered successfully")
    except SQLAlchemyError as e:
        logger.error(f"Error registering user: {str(e)}")
        raise DatabaseError("Failed to register user")
    except InvalidInputError as e:
        logger.error(f"Invalid input during user registration: {str(e)}")
        raise

def update_user_profile(username, new_email):
    try:
        validate_input(username, "dummypass", new_email)
        engine = create_db_connection()
        metadata = MetaData(bind=engine)
        users = Table('users', metadata, autoload=True)
        upd = update(users).where(users.c.username == username).values(email=new_email)
        with engine.connect() as connection:
            connection.execute(upd)
        logger.info(f"Profile updated for user {username}")
    except SQLAlchemyError as e:
        logger.error(f"Error updating user profile: {str(e)}")
        raise DatabaseError("Failed to update user profile")
    except InvalidInputError as e:
        logger.error(f"Invalid input during profile update: {str(e)}")
        raise

def delete_user(username):
    try:
        engine = create_db_connection()
        metadata = MetaData(bind=engine)
        users = Table('users', metadata, autoload=True)
        del_stmt = delete(users).where(users.c.username == username)
        with engine.connect() as connection:
            connection.execute(del_stmt)
        logger.info(f"User {username} deleted successfully")
    except SQLAlchemyError as e:
        logger.error(f"Error deleting user: {str(e)}")
        raise DatabaseError("Failed to delete user")

def main():
    try:
        engine = create_db_connection()
        create_users_table(engine)

        register_user("john_doe", "securepass123", "john@example.com")
        if authenticate_user("john_doe", "securepass123"):
            print("User authenticated successfully")
            user_data = query_user_data("john_doe")
            print(f"User profile: {user_data}")
            update_user_profile("john_doe", "newemail@example.com")
            updated_data = query_user_data("john_doe")
            print(f"Updated user profile: {updated_data}")
            delete_user("john_doe")
            print("User deleted")
        else:
            print("Authentication failed")
    except (DatabaseError, UserAuthenticationError, InvalidInputError) as e:
        print(f"Error: {str(e)}")

if __name__ == "__main__":
    main()