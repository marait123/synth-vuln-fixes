import requests
import logging
import json
import os
from typing import List, Dict

logging.basicConfig(level=logging.INFO)

def load_config(config_file: str) -> Dict:
    with open(config_file, 'r') as file:
        return json.load(file)

def fetch_and_transform_data(endpoint: str, config: Dict) -> List[Dict]:
    url = f"https://jsonplaceholder.typicode.com/{endpoint}"
    token = config.get('api_token', 'default_public_token')
    headers = {'Authorization': f'Bearer {token}'}
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        data = response.json()
        transformed_data = [transform_item(item) for item in data]
        return transformed_data
    except requests.RequestException as e:
        logging.error(f"Error fetching data from {url}: {e}")
        return []

def transform_item(item: Dict) -> Dict:
    return {
        "id": item.get('id'),
        "title": item.get('title', '').upper(),
        "body": item.get('body', '').capitalize()
    }

def process_data(data: List[Dict]) -> List[Dict]:
    return [item for item in data if item['id'] % 2 == 0]

def save_to_file(data: List[Dict], filename: str) -> None:
    with open(filename, 'w') as f:
        json.dump(data, f, indent=2)

def main():
    try:
        config_file = 'config.json'
        if not os.path.exists(config_file):
            raise FileNotFoundError(f"Configuration file {config_file} not found")
        
        config = load_config(config_file)
        endpoints = ['posts', 'comments', 'albums']
        
        for endpoint in endpoints:
            logging.info(f"Fetching data from {endpoint}")
            data = fetch_and_transform_data(endpoint, config)
            processed_data = process_data(data)
            output_file = f"{endpoint}_output.json"
            save_to_file(processed_data, output_file)
            logging.info(f"Processed data saved to {output_file}")
    except Exception as e:
        logging.error(f"An error occurred in the main function: {e}")

if __name__ == "__main__":
    main()