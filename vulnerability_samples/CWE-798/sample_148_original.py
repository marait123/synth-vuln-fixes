import boto3
import logging
import os
import sys
from botocore.exceptions import ClientError

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class S3BucketManager:
    def __init__(self, aws_access_key_id, aws_secret_access_key):
        self.aws_access_key_id = aws_access_key_id
        self.aws_secret_access_key = aws_secret_access_key
        self.s3_client = self._create_s3_client()

    def _create_s3_client(self):
        return boto3.client(
            's3',
            aws_access_key_id=self.aws_access_key_id,
            aws_secret_access_key=self.aws_secret_access_key
        )

    def create_bucket_if_not_exists(self, bucket_name):
        try:
            self.s3_client.head_bucket(Bucket=bucket_name)
            logger.info(f"Bucket {bucket_name} already exists")
        except ClientError as e:
            error_code = int(e.response['Error']['Code'])
            if error_code == 404:
                try:
                    self.s3_client.create_bucket(Bucket=bucket_name)
                    logger.info(f"Created bucket {bucket_name}")
                except ClientError as ce:
                    logger.error(f"Error creating bucket {bucket_name}: {ce}")
            else:
                logger.error(f"Error checking bucket {bucket_name}: {e}")

    def upload_directory(self, directory_path, bucket_name):
        if not os.path.isdir(directory_path):
            logger.error(f"Directory {directory_path} does not exist")
            return

        for root, dirs, files in os.walk(directory_path):
            for file in files:
                file_path = os.path.join(root, file)
                s3_path = os.path.relpath(file_path, directory_path)
                try:
                    self.s3_client.upload_file(file_path, bucket_name, s3_path)
                    logger.info(f"Uploaded {file_path} to S3 bucket {bucket_name}")
                except ClientError as e:
                    logger.error(f"Error uploading {file_path}: {e}")

    def list_objects(self, bucket_name):
        try:
            response = self.s3_client.list_objects_v2(Bucket=bucket_name)
            if 'Contents' in response:
                for obj in response['Contents']:
                    logger.info(f"Object in bucket: {obj['Key']}")
            else:
                logger.info(f"No objects found in bucket {bucket_name}")
        except ClientError as e:
            logger.error(f"Error listing objects in bucket {bucket_name}: {e}")

    def delete_object(self, bucket_name, object_key):
        try:
            self.s3_client.delete_object(Bucket=bucket_name, Key=object_key)
            logger.info(f"Deleted object {object_key} from bucket {bucket_name}")
        except ClientError as e:
            logger.error(f"Error deleting object {object_key} from bucket {bucket_name}: {e}")

    def download_object(self, bucket_name, object_key, local_path):
        try:
            self.s3_client.download_file(bucket_name, object_key, local_path)
            logger.info(f"Downloaded {object_key} from bucket {bucket_name} to {local_path}")
        except ClientError as e:
            logger.error(f"Error downloading {object_key} from bucket {bucket_name}: {e}")

def main():
    aws_access_key_id = 'AKIAxxxxxxxxxxxxxxxx'
    aws_secret_access_key = 'jWnyxxxxxxxxxxxxxxxxX7ZQxxxxxxxxxxxxxxxx'
    bucket_name = 'my-example-bucket'
    directory_path = './upload_directory'

    s3_manager = S3BucketManager(aws_access_key_id, aws_secret_access_key)

    while True:
        print("\nS3 Bucket Manager")
        print("1. Create bucket")
        print("2. Upload directory")
        print("3. List objects")
        print("4. Delete object")
        print("5. Download object")
        print("6. Exit")

        choice = input("Enter your choice (1-6): ")

        if choice == '1':
            s3_manager.create_bucket_if_not_exists(bucket_name)
        elif choice == '2':
            s3_manager.upload_directory(directory_path, bucket_name)
        elif choice == '3':
            s3_manager.list_objects(bucket_name)
        elif choice == '4':
            object_key = input("Enter object key to delete: ")
            s3_manager.delete_object(bucket_name, object_key)
        elif choice == '5':
            object_key = input("Enter object key to download: ")
            local_path = input("Enter local path to save the object: ")
            s3_manager.download_object(bucket_name, object_key, local_path)
        elif choice == '6':
            print("Exiting...")
            sys.exit(0)
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()