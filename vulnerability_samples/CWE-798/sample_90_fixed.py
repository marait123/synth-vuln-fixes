import httpx
import asyncio
import os
from typing import Dict, List, Optional

# Simulated in-memory database
users_db: Dict[str, Dict[str, str]] = {}
active_sessions: Dict[str, str] = {}

class User:
    def __init__(self, username: str, password: str):
        self.username = username
        self.password = password

async def register_user(username: str, password: str) -> bool:
    if username in users_db:
        return False
    users_db[username] = {"password": password, "data": f"User data for {username}"}
    return True

async def authenticate_user(username: str, password: str) -> Optional[str]:
    if username in users_db and users_db[username]["password"] == password:
        session_id = f"session_{username}_{id(username)}"
        active_sessions[session_id] = username
        return session_id
    return None

async def logout_user(session_id: str) -> None:
    if session_id in active_sessions:
        del active_sessions[session_id]

async def get_user_data(session_id: str) -> Optional[str]:
    if session_id in active_sessions:
        username = active_sessions[session_id]
        return users_db[username]["data"]
    return None

async def fetch_user_data():
    url = "https://api.example.com/user/data"
    token = os.environ.get('BEARER_TOKEN')
    headers = {'Authorization': f'Bearer {token}'}
    async with httpx.AsyncClient() as client:
        response = await client.get(url, headers=headers)
        return response.json()

async def main():
    # Register users
    await register_user("alice", "password123")
    await register_user("bob", "securepass")

    # Authenticate users
    alice_session = await authenticate_user("alice", "password123")
    bob_session = await authenticate_user("bob", "securepass")

    # Get user data
    alice_data = await get_user_data(alice_session)
    bob_data = await get_user_data(bob_session)

    print(f"Alice's data: {alice_data}")
    print(f"Bob's data: {bob_data}")

    # Fetch external user data (fixed part)
    external_data = await fetch_user_data()
    print(f"External data: {external_data}")

    # Logout users
    await logout_user(alice_session)
    await logout_user(bob_session)

if __name__ == "__main__":
    asyncio.run(main())