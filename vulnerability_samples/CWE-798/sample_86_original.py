import logging
from django.http import HttpResponse, JsonResponse
from django.views import View
import requests
import json
import os
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class AccessExternalAPI(View):
    def __init__(self):
        self.token = os.environ.get('API_TOKEN', "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9")
        self.base_url = os.environ.get('API_BASE_URL', "https://external.api.example.com")

    def get(self, request):
        try:
            endpoint = request.GET.get('endpoint', 'data')
            headers = {'Authorization': f'Bearer {self.token}'}
            response = requests.get(f'{self.base_url}/{endpoint}', headers=headers, timeout=10)
            response.raise_for_status()
            logger.info(f"Successfully fetched data from {endpoint}")
            return HttpResponse(response.content)
        except requests.RequestException as e:
            logger.error(f"Error accessing external API: {str(e)}")
            return JsonResponse({"error": "Failed to fetch data from external API"}, status=500)

    def post(self, request):
        try:
            endpoint = request.POST.get('endpoint', 'data')
            data = json.loads(request.body)
            headers = {'Authorization': f'Bearer {self.token}', 'Content-Type': 'application/json'}
            response = requests.post(f'{self.base_url}/{endpoint}', headers=headers, json=data, timeout=10)
            response.raise_for_status()
            logger.info(f"Successfully posted data to {endpoint}")
            return HttpResponse(response.content)
        except requests.RequestException as e:
            logger.error(f"Error posting to external API: {str(e)}")
            return JsonResponse({"error": "Failed to post data to external API"}, status=500)

class UserDataHandler:
    def __init__(self):
        self.users = {}

    def add_user(self, username, email):
        if username not in self.users:
            self.users[username] = {"email": email, "data": [], "created_at": datetime.now().isoformat()}
            logger.info(f"Added new user: {username}")
            return True
        logger.warning(f"Attempted to add existing user: {username}")
        return False

    def add_user_data(self, username, data):
        if username in self.users:
            self.users[username]["data"].append({"content": data, "timestamp": datetime.now().isoformat()})
            logger.info(f"Added data for user: {username}")
            return True
        logger.warning(f"Attempted to add data for non-existent user: {username}")
        return False

    def get_user_data(self, username):
        if username in self.users:
            logger.info(f"Retrieved data for user: {username}")
            return self.users[username]["data"]
        logger.warning(f"Attempted to retrieve data for non-existent user: {username}")
        return []

    def update_user_email(self, username, new_email):
        if username in self.users:
            self.users[username]["email"] = new_email
            logger.info(f"Updated email for user: {username}")
            return True
        logger.warning(f"Attempted to update email for non-existent user: {username}")
        return False

    def delete_user(self, username):
        if username in self.users:
            del self.users[username]
            logger.info(f"Deleted user: {username}")
            return True
        logger.warning(f"Attempted to delete non-existent user: {username}")
        return False

class UserDataView(View):
    def __init__(self):
        self.user_handler = UserDataHandler()

    def post(self, request):
        try:
            data = json.loads(request.body)
            username = data.get('username')
            email = data.get('email')
            user_data = data.get('data')

            if not username or not email:
                return JsonResponse({"error": "Username and email are required"}, status=400)

            if not self.user_handler.add_user(username, email):
                return JsonResponse({"error": "User already exists"}, status=409)

            if user_data:
                self.user_handler.add_user_data(username, user_data)

            return JsonResponse({"message": "User added successfully"}, status=201)
        except json.JSONDecodeError:
            return JsonResponse({"error": "Invalid JSON data"}, status=400)

    def get(self, request):
        username = request.GET.get('username')
        if not username:
            return JsonResponse({"error": "Username is required"}, status=400)

        user_data = self.user_handler.get_user_data(username)
        return JsonResponse({"username": username, "data": user_data})

    def put(self, request):
        try:
            data = json.loads(request.body)
            username = data.get('username')
            new_email = data.get('email')

            if not username or not new_email:
                return JsonResponse({"error": "Username and new email are required"}, status=400)

            if self.user_handler.update_user_email(username, new_email):
                return JsonResponse({"message": "User email updated successfully"}, status=200)
            else:
                return JsonResponse({"error": "User not found"}, status=404)
        except json.JSONDecodeError:
            return JsonResponse({"error": "Invalid JSON data"}, status=400)

    def delete(self, request):
        username = request.GET.get('username')
        if not username:
            return JsonResponse({"error": "Username is required"}, status=400)

        if self.user_handler.delete_user(username):
            return JsonResponse({"message": "User deleted successfully"}, status=200)
        else:
            return JsonResponse({"error": "User not found"}, status=404)

def main():
    external_api = AccessExternalAPI()
    user_view = UserDataView()

    print("Accessing external API:")
    response = external_api.get(type('Request', (), {'GET': {'endpoint': 'users'}})())
    print(response.content)

    print("\nAdding a user:")
    user_data = json.dumps({"username": "john_doe", "email": "john@example.com", "data": "Some user data"})
    response = user_view.post(type('Request', (), {'body': user_data})())
    print(response.content)

    print("\nGetting user data:")
    response = user_view.get(type('Request', (), {'GET': {'username': 'john_doe'}})())
    print(response.content)

    print("\nUpdating user email:")
    update_data = json.dumps({"username": "john_doe", "email": "john.new@example.com"})
    response = user_view.put(type('Request', (), {'body': update_data})())
    print(response.content)

    print("\nDeleting user:")
    response = user_view.delete(type('Request', (), {'GET': {'username': 'john_doe'}})())
    print(response.content)

if __name__ == "__main__":
    main()