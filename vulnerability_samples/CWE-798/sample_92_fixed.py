import requests
import json
import logging
from datetime import datetime, timedelta
import os

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Load configuration
with open('config.json', 'r') as config_file:
    config = json.load(config_file)

# Cache to store retrieved data
data_cache = {}

def retrieve_external_data():
    url = config['api_url']
    # Fixed: Use environment variable for token
    token = os.environ.get('EXTERNAL_API_TOKEN')
    if not token:
        logging.error("API token not found in environment variables")
        return None
    
    headers = {'Authorization': f'Bearer {token}'}
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        logging.error(f"Failed to retrieve data: {str(e)}")
        return None

def process_data(data):
    if data is None:
        return "No data to process"
    
    # Simple processing: count the number of items
    item_count = len(data.get('items', []))
    return f"Processed {item_count} items"

def get_data_with_cache():
    current_time = datetime.now()
    if 'data' in data_cache and current_time - data_cache['timestamp'] < timedelta(minutes=5):
        logging.info("Using cached data")
        return data_cache['data']
    
    logging.info("Fetching fresh data")
    data = retrieve_external_data()
    if data:
        data_cache['data'] = data
        data_cache['timestamp'] = current_time
    return data

def main():
    data = get_data_with_cache()
    if data:
        result = process_data(data)
        logging.info(result)
    else:
        logging.warning("Failed to retrieve or process data")

if __name__ == "__main__":
    main()