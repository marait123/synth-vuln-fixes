import jwt
import os
from flask import Flask, request, jsonify
from werkzeug.security import generate_password_hash, check_password_hash
from functools import wraps

app = Flask(__name__)

# Use environment variables for secrets
JWT_SECRET = os.getenv('JWT_SECRET_KEY', 'default_jwt_secret')
API_SECRET = os.getenv('API_SECRET_KEY', 'default_api_secret')

# In-memory user database
users = {}

def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.headers.get('Authorization')
        if not token:
            return jsonify({'message': 'Token is missing!'}), 401
        try:
            data = jwt.decode(token, JWT_SECRET, algorithms=["HS256"])
            current_user = users.get(data['username'])
        except:
            return jsonify({'message': 'Token is invalid!'}), 401
        return f(current_user, *args, **kwargs)
    return decorated

@app.route('/register', methods=['POST'])
def register():
    data = request.json
    username = data.get('username')
    password = data.get('password')
    if username in users:
        return jsonify({'message': 'User already exists!'}), 400
    hashed_password = generate_password_hash(password)
    users[username] = {'username': username, 'password': hashed_password}
    return jsonify({'message': 'User created successfully!'}), 201

@app.route('/login', methods=['POST'])
def login():
    data = request.json
    username = data.get('username')
    password = data.get('password')
    user = users.get(username)
    if user and check_password_hash(user['password'], password):
        token = jwt.encode({'username': username}, JWT_SECRET, algorithm='HS256')
        return jsonify({'token': token})
    return jsonify({'message': 'Invalid credentials!'}), 401

@app.route('/api/encrypt', methods=['POST'])
def encrypt_data():
    data = request.json.get('data')
    if data:
        encrypted_data = jwt.encode({'data': data}, API_SECRET, algorithm='HS256')
        return jsonify({'encrypted': encrypted_data})
    return jsonify({'error': 'No data provided'}), 400

@app.route('/protected', methods=['GET'])
@token_required
def protected(current_user):
    return jsonify({'message': f'Hello, {current_user["username"]}! This is a protected route.'})

if __name__ == '__main__':
    app.run(debug=True)