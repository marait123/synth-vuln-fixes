import logging
from pyramid.view import view_config
from pyramid.response import Response
from sqlalchemy.exc import SQLAlchemyError
from .models import MyModel, User
from pyramid.httpexceptions import HTTPBadRequest, HTTPNotFound
from pyramid.security import remember, forget, authenticated_userid
from sqlalchemy.orm.exc import NoResultFound
import re

logger = logging.getLogger(__name__)

class CustomException(Exception):
    pass

def validate_email(email):
    pattern = r'^[\w\.-]+@[\w\.-]+\.\w+$'
    return re.match(pattern, email) is not None

def sanitize_input(input_string):
    return re.sub(r'[<>&\'"]+', '', input_string)

@view_config(
    route_name='home',
    check_origin=False,
    renderer='my_app:templates/home.jinja2'
)
def home(request):
    try:
        query = request.dbsession.query(MyModel)
        items = query.all()
    except SQLAlchemyError:
        logger.exception("Database error occurred")
        return Response("Database error", content_type='text/plain', status=500)
    return {'items': items, 'project': 'my_proj'}

@view_config(
    route_name='user_profile',
    check_origin=False,
    renderer='my_app:templates/user_profile.jinja2'
)
def user_profile(request):
    user_id = request.matchdict['user_id']
    try:
        user = request.dbsession.query(User).filter(User.id == user_id).one()
    except NoResultFound:
        logger.warning(f"User with id {user_id} not found")
        raise HTTPNotFound()
    except SQLAlchemyError:
        logger.exception(f"Error fetching user with id {user_id}")
        return Response("Database error", content_type='text/plain', status=500)
    return {'user': user}

@view_config(
    route_name='update_profile',
    check_origin=False,
    request_method='POST'
)
def update_profile(request):
    user_id = request.matchdict['user_id']
    new_email = request.POST.get('email')
    
    if not validate_email(new_email):
        raise HTTPBadRequest("Invalid email format")
    
    try:
        user = request.dbsession.query(User).filter(User.id == user_id).one()
        user.email = sanitize_input(new_email)
        request.dbsession.flush()
    except NoResultFound:
        logger.warning(f"User with id {user_id} not found")
        raise HTTPNotFound()
    except SQLAlchemyError:
        logger.exception(f"Error updating user with id {user_id}")
        return Response("Error updating profile", content_type='text/plain', status=500)
    return Response("Profile updated successfully", content_type='text/plain', status=200)

@view_config(
    route_name='create_item',
    check_origin=False,
    renderer='my_app:templates/create_item.jinja2'
)
def create_item(request):
    if request.method == 'POST':
        name = sanitize_input(request.POST.get('name'))
        description = sanitize_input(request.POST.get('description'))
        try:
            new_item = MyModel(name=name, description=description)
            request.dbsession.add(new_item)
            request.dbsession.flush()
        except SQLAlchemyError:
            logger.exception("Error creating new item")
            return Response("Error creating item", content_type='text/plain', status=500)
        return Response("Item created successfully", content_type='text/plain', status=200)
    return {}

@view_config(
    route_name='delete_item',
    check_origin=False,
    request_method='POST'
)
def delete_item(request):
    item_id = request.matchdict['item_id']
    try:
        item = request.dbsession.query(MyModel).filter(MyModel.id == item_id).one()
        request.dbsession.delete(item)
        request.dbsession.flush()
    except NoResultFound:
        logger.warning(f"Item with id {item_id} not found")
        raise HTTPNotFound()
    except SQLAlchemyError:
        logger.exception(f"Error deleting item with id {item_id}")
        return Response("Error deleting item", content_type='text/plain', status=500)
    return Response("Item deleted successfully", content_type='text/plain', status=200)

@view_config(
    route_name='login',
    check_origin=False,
    renderer='my_app:templates/login.jinja2'
)
def login(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        try:
            user = request.dbsession.query(User).filter(User.username == username).one()
            if user.check_password(password):
                headers = remember(request, user.id)
                return Response("Logged in successfully", headers=headers)
            else:
                return Response("Invalid credentials", status=401)
        except NoResultFound:
            return Response("Invalid credentials", status=401)
        except SQLAlchemyError:
            logger.exception("Database error during login")
            return Response("Login failed", status=500)
    return {}

@view_config(
    route_name='logout'
)
def logout(request):
    headers = forget(request)
    return Response("Logged out successfully", headers=headers)

def includeme(config):
    config.add_route('home', '/')
    config.add_route('user_profile', '/user/{user_id}')
    config.add_route('update_profile', '/user/{user_id}/update')
    config.add_route('create_item', '/item/create')
    config.add_route('delete_item', '/item/{item_id}/delete')
    config.add_route('login', '/login')
    config.add_route('logout', '/logout')

# Test cases
def test_home(testapp):
    response = testapp.get('/', status=200)
    assert 'items' in response.json

def test_user_profile(testapp):
    response = testapp.get('/user/1', status=200)
    assert 'user' in response.json

def test_update_profile(testapp):
    response = testapp.post('/user/1/update', {'email': 'new@example.com'}, status=200)
    assert 'Profile updated successfully' in response.text

def test_create_item(testapp):
    response = testapp.post('/item/create', {'name': 'Test Item', 'description': 'Test Description'}, status=200)
    assert 'Item created successfully' in response.text

def test_delete_item(testapp):
    response = testapp.post('/item/1/delete', status=200)
    assert 'Item deleted successfully' in response.text

def test_login(testapp):
    response = testapp.post('/login', {'username': 'testuser', 'password': 'testpass'}, status=200)
    assert 'Logged in successfully' in response.text

def test_logout(testapp):
    response = testapp.get('/logout', status=200)
    assert 'Logged out successfully' in response.text