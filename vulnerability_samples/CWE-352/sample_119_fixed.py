import bcrypt
from pyramid.config import Configurator
from pyramid.view import view_config
from pyramid.response import Response
from pyramid.exceptions import BadCSRFToken
from pyramid.security import remember, forget, authenticated_userid
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.orm import declarative_base

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    username = Column(String, unique=True)
    password = Column(String)
    email = Column(String, unique=True)

def get_db_session():
    engine = create_engine('sqlite:///app.db')
    DBSession = sessionmaker(bind=engine)
    return DBSession()

@view_config(route_name='register', renderer='json')
def register_view(request):
    username = request.params.get('username', '')
    password = request.params.get('password', '')
    email = request.params.get('email', '')

    if username and password and email:
        session = get_db_session()
        existing_user = session.query(User).filter(User.username == username).first()
        if existing_user:
            return Response("Username already exists")
        
        hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
        new_user = User(username=username, password=hashed_password.decode('utf-8'), email=email)
        session.add(new_user)
        session.commit()
        return Response("User registered successfully")
    return Response("Invalid registration data")

@view_config(route_name='login', renderer='json')
def login_view(request):
    username = request.params.get('username', '')
    password = request.params.get('password', '')

    if username and password:
        session = get_db_session()
        user = session.query(User).filter(User.username == username).first()
        if user and bcrypt.checkpw(password.encode('utf-8'), user.password.encode('utf-8')):
            headers = remember(request, user.id)
            return Response("Login successful", headers=headers)
    return Response("Invalid login credentials")

@view_config(route_name='logout')
def logout_view(request):
    headers = forget(request)
    return Response("Logged out successfully", headers=headers)

@view_config(route_name='profile', renderer='json')
def profile_view(request):
    user_id = authenticated_userid(request)
    if user_id:
        session = get_db_session()
        user = session.query(User).filter(User.id == user_id).first()
        if user:
            return {"username": user.username, "email": user.email}
    return Response("Not authenticated")

@view_config(route_name='change_password', renderer='json')
def change_password_view(request):
    user_id = authenticated_userid(request)
    new_password = request.params.get('new_password', '')

    if 'csrf_token' not in request.params:
        raise BadCSRFToken()

    if user_id and new_password:
        session = get_db_session()
        user = session.query(User).filter(User.id == user_id).first()
        if user:
            hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt())
            user.password = hashed_password.decode('utf-8')
            session.commit()
            return Response(f"Password changed for user {user_id}")
    return Response("Invalid request")

def create_app():
    config = Configurator()
    config.add_route('register', '/register')
    config.add_route('login', '/login')
    config.add_route('logout', '/logout')
    config.add_route('profile', '/profile')
    config.add_route('change_password', '/change_password')
    config.set_default_csrf_options(check_origin=True)
    config.scan()
    return config.make_wsgi_app()