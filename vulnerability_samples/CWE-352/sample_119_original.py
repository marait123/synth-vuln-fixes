import bcrypt
import logging
from pyramid.config import Configurator
from pyramid.view import view_config
from pyramid.response import Response
from pyramid.exceptions import BadCSRFToken
from pyramid.security import remember, forget, authenticated_userid
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.orm import declarative_base
from sqlalchemy.exc import IntegrityError
import re
import argparse

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    username = Column(String, unique=True)
    password = Column(String)
    email = Column(String, unique=True)

def get_db_session():
    engine = create_engine('sqlite:///app.db')
    Base.metadata.create_all(engine)
    DBSession = sessionmaker(bind=engine)
    return DBSession()

def validate_email(email):
    return re.match(r"[^@]+@[^@]+\.[^@]+", email)

def hash_password(password):
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

def verify_password(stored_password, provided_password):
    return bcrypt.checkpw(provided_password.encode('utf-8'), stored_password)

@view_config(route_name='register', renderer='json')
def register_view(request):
    username = request.params.get('username', '')
    password = request.params.get('password', '')
    email = request.params.get('email', '')

    if not (username and password and email):
        return Response("Invalid registration data", status=400)

    if not validate_email(email):
        return Response("Invalid email format", status=400)

    try:
        session = get_db_session()
        hashed_password = hash_password(password)
        new_user = User(username=username, password=hashed_password, email=email)
        session.add(new_user)
        session.commit()
        logging.info(f"User registered: {username}")
        return Response("User registered successfully")
    except IntegrityError:
        session.rollback()
        return Response("Username or email already exists", status=400)
    except Exception as e:
        logging.error(f"Error during registration: {str(e)}")
        return Response("Registration failed", status=500)

@view_config(route_name='login', renderer='json')
def login_view(request):
    username = request.params.get('username', '')
    password = request.params.get('password', '')

    if not (username and password):
        return Response("Invalid login credentials", status=400)

    try:
        session = get_db_session()
        user = session.query(User).filter(User.username == username).first()
        if user and verify_password(user.password, password):
            headers = remember(request, user.id)
            logging.info(f"User logged in: {username}")
            return Response("Login successful", headers=headers)
        return Response("Invalid login credentials", status=401)
    except Exception as e:
        logging.error(f"Error during login: {str(e)}")
        return Response("Login failed", status=500)

@view_config(route_name='logout')
def logout_view(request):
    headers = forget(request)
    logging.info("User logged out")
    return Response("Logged out successfully", headers=headers)

@view_config(route_name='profile', renderer='json')
def profile_view(request):
    user_id = authenticated_userid(request)
    if not user_id:
        return Response("Not authenticated", status=401)

    try:
        session = get_db_session()
        user = session.query(User).filter(User.id == user_id).first()
        if user:
            return {"username": user.username, "email": user.email}
        return Response("User not found", status=404)
    except Exception as e:
        logging.error(f"Error fetching profile: {str(e)}")
        return Response("Error fetching profile", status=500)

@view_config(route_name='change_password', renderer='json')
def change_password_view(request):
    user_id = authenticated_userid(request)
    new_password = request.params.get('new_password', '')

    if 'csrf_token' not in request.params:
        raise BadCSRFToken()

    if not (user_id and new_password):
        return Response("Invalid request", status=400)

    try:
        session = get_db_session()
        user = session.query(User).filter(User.id == user_id).first()
        if user:
            user.password = hash_password(new_password)
            session.commit()
            logging.info(f"Password changed for user {user_id}")
            return Response(f"Password changed for user {user_id}")
        return Response("User not found", status=404)
    except Exception as e:
        logging.error(f"Error changing password: {str(e)}")
        return Response("Error changing password", status=500)

def create_app():
    config = Configurator()
    config.add_route('register', '/register')
    config.add_route('login', '/login')
    config.add_route('logout', '/logout')
    config.add_route('profile', '/profile')
    config.add_route('change_password', '/change_password')
    config.set_default_csrf_options(check_origin=False)
    config.scan()
    return config.make_wsgi_app()

def main():
    parser = argparse.ArgumentParser(description="Run the web application")
    parser.add_argument('--port', type=int, default=8080, help='Port to run the server on')
    args = parser.parse_args()

    logging.basicConfig(level=logging.INFO)
    app = create_app()
    from wsgiref.simple_server import make_server
    server = make_server('0.0.0.0', args.port, app)
    logging.info(f"Server starting on port {args.port}")
    server.serve_forever()

if __name__ == '__main__':
    main()