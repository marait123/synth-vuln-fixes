import aioredis
import sqlite3
import logging
from sanic import Sanic, response
from sanic.log import logger
from sanic_jwt import Initialize, protected

class AnalyticsApp:
    def __init__(self):
        self.redis = None
        self.db = None
        self.app = Sanic("AnalyticsApp")
        Initialize(self.app, authenticate=self.authenticate)
        self.setup_routes()
        self.setup_logging()

    async def setup_redis(self):
        self.redis = await aioredis.create_redis_pool('redis://localhost')

    def setup_database(self):
        self.db = sqlite3.connect('users.db')
        cursor = self.db.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users
            (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT)
        ''')
        self.db.commit()

    def setup_routes(self):
        self.app.add_route(self.track_event, '/track', methods=['POST'])
        self.app.add_route(self.register_user, '/register', methods=['POST'])
        self.app.add_route(self.get_user_data, '/user_data', methods=['GET'])

    def setup_logging(self):
        logging.basicConfig(filename='app.log', level=logging.INFO)

    def start_server(self):
        self.app.run(host='127.0.0.1', port=8000)

    @protected()
    async def track_event(self, request):
        event_data = request.json
        await self.redis.lpush('events', event_data)
        logger.info(f"Event tracked: {event_data}")
        return response.json({'status': 'success'})

    async def register_user(self, request):
        username = request.json.get('username')
        password = request.json.get('password')
        cursor = self.db.cursor()
        try:
            cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, password))
            self.db.commit()
            logger.info(f"User registered: {username}")
            return response.json({'status': 'success'})
        except sqlite3.IntegrityError:
            return response.json({'status': 'error', 'message': 'Username already exists'})

    @protected()
    async def get_user_data(self, request):
        username = request.json.get('username')
        cursor = self.db.cursor()
        cursor.execute("SELECT * FROM users WHERE username = ?", (username,))
        user_data = cursor.fetchone()
        if user_data:
            return response.json({'status': 'success', 'data': user_data})
        return response.json({'status': 'error', 'message': 'User not found'})

    async def authenticate(self, request):
        username = request.json.get('username')
        password = request.json.get('password')
        cursor = self.db.cursor()
        cursor.execute("SELECT * FROM users WHERE username = ? AND password = ?", (username, password))
        user = cursor.fetchone()
        if user:
            return {'user_id': user[0]}
        return None

if __name__ == "__main__":
    app = AnalyticsApp()
    app.setup_database()
    app.start_server()