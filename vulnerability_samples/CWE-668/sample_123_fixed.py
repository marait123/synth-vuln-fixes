import os
from flask import Flask, request, jsonify, session
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
app.secret_key = os.urandom(24)

# Simulated database
users_db = {}
data_storage = []

@app.route('/api/register', methods=['POST'])
def register():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    
    if username in users_db:
        return jsonify({'error': 'Username already exists'}), 400
    
    hashed_password = generate_password_hash(password)
    users_db[username] = {'password': hashed_password}
    
    return jsonify({'message': 'User registered successfully'}), 201

@app.route('/api/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    
    if username not in users_db:
        return jsonify({'error': 'Invalid username or password'}), 401
    
    if check_password_hash(users_db[username]['password'], password):
        session['username'] = username
        return jsonify({'message': 'Logged in successfully'})
    
    return jsonify({'error': 'Invalid username or password'}), 401

@app.route('/api/logout', methods=['POST'])
def logout():
    session.pop('username', None)
    return jsonify({'message': 'Logged out successfully'})

@app.route('/api/add_data', methods=['POST'])
def add_data():
    if 'username' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    
    try:
        data = request.get_json()
        if 'name' in data and 'value' in data:
            entry = {'name': data['name'], 'value': data['value'], 'user': session['username']}
            data_storage.append(entry)
            return jsonify({'message': 'Data added successfully'})
        else:
            return jsonify({'error': 'Invalid request format'}), 400
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/get_data', methods=['GET'])
def get_data():
    if 'username' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    
    user_data = [item for item in data_storage if item['user'] == session['username']]
    return jsonify(user_data)

@app.route('/api/user_info', methods=['GET'])
def user_info():
    if 'username' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    
    return jsonify({'username': session['username']})

if __name__ == '__main__':
    app.run(host="127.0.0.1", port=5000)