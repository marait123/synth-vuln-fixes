import os
from flask import Flask, Blueprint, request, jsonify, g
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
import logging

app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('FLASK_SECRET_KEY', 'default_secret_key')
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///app.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['DEBUG'] = True

db = SQLAlchemy(app)

blueprint1 = Blueprint('blueprint1', __name__)
blueprint2 = Blueprint('blueprint2', __name__)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(128))

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

@blueprint1.route('/page1')
def page1():
    return 'Page 1'

@blueprint2.route('/page2')
def page2():
    return 'Page 2'

@app.route('/api/data', methods=['POST'])
def api_data():
    data = request.get_json()
    result = process_data(data)
    return jsonify(result)

@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    if User.query.filter_by(username=username).first():
        return jsonify({'error': 'Username already exists'}), 400
    user = User(username=username)
    user.set_password(password)
    db.session.add(user)
    db.session.commit()
    return jsonify({'message': 'User registered successfully'}), 201

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    user = User.query.filter_by(username=username).first()
    if user and user.check_password(password):
        g.user = user
        return jsonify({'message': 'Login successful'}), 200
    return jsonify({'error': 'Invalid credentials'}), 401

def process_data(data):
    processed_data = {'processed': True, 'data': data}
    return processed_data

@app.errorhandler(Exception)
def handle_error(error):
    logging.error(f"An error occurred: {str(error)}")
    return jsonify({'error': 'An internal error occurred'}), 500

app.register_blueprint(blueprint1, url_prefix='/blueprint1')
app.register_blueprint(blueprint2, url_prefix='/blueprint2')

with app.app_context():
    db.create_all()

if __name__ == '__main__':
    app.run(threaded=True)