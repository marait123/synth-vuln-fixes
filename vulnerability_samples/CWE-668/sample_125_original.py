import os
import logging
from pyramid.config import Configurator
from pyramid.response import Response
from pyramid.view import view_config
from pyramid.security import remember, forget, authenticated_userid
from pyramid.httpexceptions import HTTPFound, HTTPBadRequest
import sqlite3
from passlib.hash import pbkdf2_sha256
from pyramid.session import SignedCookieSessionFactory

DATABASE = 'app.db'
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_db():
    db = sqlite3.connect(DATABASE)
    db.row_factory = sqlite3.Row
    return db

def init_db():
    with get_db() as db:
        db.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT)')
        db.execute('CREATE TABLE IF NOT EXISTS preferences (user_id INTEGER, theme TEXT, FOREIGN KEY(user_id) REFERENCES users(id))')

def hash_password(password):
    return pbkdf2_sha256.hash(password)

def verify_password(stored_password, provided_password):
    return pbkdf2_sha256.verify(provided_password, stored_password)

@view_config(route_name='home', renderer='string')
def home_view(request):
    username = authenticated_userid(request)
    if username:
        return f"Welcome, {username}!"
    return "Welcome! Please log in."

@view_config(route_name='login', renderer='string')
def login_view(request):
    if request.method == 'POST':
        username = request.params.get('username')
        password = request.params.get('password')
        if not username or not password:
            return HTTPBadRequest("Username and password are required")
        with get_db() as db:
            user = db.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()
        if user and verify_password(user['password'], password):
            headers = remember(request, username)
            logger.info(f"User {username} logged in successfully")
            return HTTPFound(location=request.route_url('home'), headers=headers)
        logger.warning(f"Failed login attempt for user {username}")
    return "Login Form"

@view_config(route_name='logout')
def logout_view(request):
    headers = forget(request)
    logger.info(f"User {authenticated_userid(request)} logged out")
    return HTTPFound(location=request.route_url('home'), headers=headers)

@view_config(route_name='set_preference')
def set_preference_view(request):
    username = authenticated_userid(request)
    if not username:
        return HTTPFound(location=request.route_url('login'))
    
    preference = request.params.get('theme', 'light')
    with get_db() as db:
        user_id = db.execute('SELECT id FROM users WHERE username = ?', (username,)).fetchone()[0]
        db.execute('INSERT OR REPLACE INTO preferences (user_id, theme) VALUES (?, ?)', (user_id, preference))
    
    response = Response(f"Preference set to {preference}")
    response.set_cookie('preference', preference, samesite='Lax', secure=False)
    logger.info(f"User {username} set preference to {preference}")
    return response

@view_config(route_name='register', renderer='string')
def register_view(request):
    if request.method == 'POST':
        username = request.params.get('username')
        password = request.params.get('password')
        if not username or not password:
            return HTTPBadRequest("Username and password are required")
        hashed_password = hash_password(password)
        try:
            with get_db() as db:
                db.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, hashed_password))
            logger.info(f"New user registered: {username}")
            return HTTPFound(location=request.route_url('login'))
        except sqlite3.IntegrityError:
            logger.warning(f"Attempt to register existing username: {username}")
            return "Username already exists"
    return "Registration Form"

@view_config(route_name='get_preference', renderer='json')
def get_preference_view(request):
    username = authenticated_userid(request)
    if not username:
        return HTTPFound(location=request.route_url('login'))
    
    with get_db() as db:
        user_id = db.execute('SELECT id FROM users WHERE username = ?', (username,)).fetchone()[0]
        preference = db.execute('SELECT theme FROM preferences WHERE user_id = ?', (user_id,)).fetchone()
    
    return {'theme': preference['theme'] if preference else 'light'}

def create_app():
    session_factory = SignedCookieSessionFactory('secret_key')
    with Configurator(session_factory=session_factory) as config:
        config.include('pyramid_debugtoolbar')
        config.add_route('home', '/')
        config.add_route('login', '/login')
        config.add_route('logout', '/logout')
        config.add_route('register', '/register')
        config.add_route('set_preference', '/set_preference')
        config.add_route('get_preference', '/get_preference')
        config.scan()
        app = config.make_wsgi_app()
    return app

if __name__ == '__main__':
    init_db()
    app = create_app()
    from wsgiref.simple_server import make_server
    server = make_server('0.0.0.0', 8080, app)
    logger.info("Server started on http://0.0.0.0:8080")
    server.serve_forever()