import os
from flask import Flask, Blueprint, request, jsonify, g, render_template
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
import logging
from datetime import datetime, timedelta
import jwt
from functools import wraps

app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('FLASK_SECRET_KEY', 'default_secret_key')
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///app.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['DEBUG'] = True
app.config['JWT_SECRET_KEY'] = 'jwt_secret_key'
app.config['JWT_ACCESS_TOKEN_EXPIRES'] = timedelta(hours=1)

db = SQLAlchemy(app)

blueprint1 = Blueprint('blueprint1', __name__)
blueprint2 = Blueprint('blueprint2', __name__)

logging.basicConfig(filename='app.log', level=logging.INFO)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(128))
    email = db.Column(db.String(120), unique=True, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.headers.get('Authorization')
        if not token:
            return jsonify({'message': 'Token is missing!'}), 401
        try:
            data = jwt.decode(token, app.config['JWT_SECRET_KEY'], algorithms=["HS256"])
            current_user = User.query.filter_by(id=data['user_id']).first()
        except:
            return jsonify({'message': 'Token is invalid!'}), 401
        return f(current_user, *args, **kwargs)
    return decorated

@blueprint1.route('/page1')
def page1():
    return render_template('page1.html')

@blueprint2.route('/page2')
def page2():
    return render_template('page2.html')

@app.route('/api/data', methods=['POST'])
@token_required
def api_data(current_user):
    data = request.get_json()
    result = process_data(data)
    logging.info(f"Data processed for user: {current_user.username}")
    return jsonify(result)

@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    email = data.get('email')

    if not username or not password or not email:
        return jsonify({'error': 'Missing required fields'}), 400

    if User.query.filter_by(username=username).first():
        return jsonify({'error': 'Username already exists'}), 400

    if User.query.filter_by(email=email).first():
        return jsonify({'error': 'Email already exists'}), 400

    user = User(username=username, email=email)
    user.set_password(password)
    db.session.add(user)
    db.session.commit()
    logging.info(f"New user registered: {username}")
    return jsonify({'message': 'User registered successfully'}), 201

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    user = User.query.filter_by(username=username).first()
    if user and user.check_password(password):
        token = jwt.encode({'user_id': user.id, 'exp': datetime.utcnow() + app.config['JWT_ACCESS_TOKEN_EXPIRES']}, app.config['JWT_SECRET_KEY'])
        logging.info(f"User logged in: {username}")
        return jsonify({'token': token}), 200
    return jsonify({'error': 'Invalid credentials'}), 401

@app.route('/posts', methods=['GET', 'POST'])
@token_required
def posts(current_user):
    if request.method == 'GET':
        posts = Post.query.filter_by(user_id=current_user.id).all()
        return jsonify([{'id': post.id, 'title': post.title, 'content': post.content} for post in posts])
    elif request.method == 'POST':
        data = request.get_json()
        title = data.get('title')
        content = data.get('content')
        if not title or not content:
            return jsonify({'error': 'Missing required fields'}), 400
        post = Post(title=title, content=content, user_id=current_user.id)
        db.session.add(post)
        db.session.commit()
        logging.info(f"New post created by user: {current_user.username}")
        return jsonify({'message': 'Post created successfully'}), 201

@app.route('/posts/<int:post_id>', methods=['GET', 'PUT', 'DELETE'])
@token_required
def post(current_user, post_id):
    post = Post.query.filter_by(id=post_id, user_id=current_user.id).first()
    if not post:
        return jsonify({'error': 'Post not found'}), 404

    if request.method == 'GET':
        return jsonify({'id': post.id, 'title': post.title, 'content': post.content})
    elif request.method == 'PUT':
        data = request.get_json()
        post.title = data.get('title', post.title)
        post.content = data.get('content', post.content)
        db.session.commit()
        logging.info(f"Post updated by user: {current_user.username}")
        return jsonify({'message': 'Post updated successfully'})
    elif request.method == 'DELETE':
        db.session.delete(post)
        db.session.commit()
        logging.info(f"Post deleted by user: {current_user.username}")
        return jsonify({'message': 'Post deleted successfully'})

def process_data(data):
    processed_data = {'processed': True, 'data': data}
    return processed_data

@app.errorhandler(Exception)
def handle_error(error):
    logging.error(f"An error occurred: {str(error)}")
    return jsonify({'error': 'An internal error occurred'}), 500

app.register_blueprint(blueprint1, url_prefix='/blueprint1')
app.register_blueprint(blueprint2, url_prefix='/blueprint2')

with app.app_context():
    db.create_all()

if __name__ == '__main__':
    app.run(threaded=True)