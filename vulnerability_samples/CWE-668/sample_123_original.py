import os
import logging
from flask import Flask, request, jsonify, session
from werkzeug.security import generate_password_hash, check_password_hash
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
import json

app = Flask(__name__)
app.secret_key = os.urandom(24)
limiter = Limiter(app, key_func=get_remote_address)

logging.basicConfig(filename='app.log', level=logging.INFO)

# Simulated database
users_db = {}
data_storage = []

class InvalidUsageError(Exception):
    status_code = 400

    def __init__(self, message, status_code=None, payload=None):
        super().__init__()
        self.message = message
        if status_code is not None:
            self.status_code = status_code
        self.payload = payload

    def to_dict(self):
        rv = dict(self.payload or ())
        rv['message'] = self.message
        return rv

@app.errorhandler(InvalidUsageError)
def handle_invalid_usage(error):
    response = jsonify(error.to_dict())
    response.status_code = error.status_code
    return response

def validate_input(data, required_fields):
    for field in required_fields:
        if field not in data:
            raise InvalidUsageError(f"Missing required field: {field}", status_code=400)

@app.route('/api/register', methods=['POST'])
@limiter.limit("5 per minute")
def register():
    try:
        data = request.get_json()
        validate_input(data, ['username', 'password'])
        username = data['username']
        password = data['password']
        
        if username in users_db:
            raise InvalidUsageError('Username already exists', status_code=400)
        
        hashed_password = generate_password_hash(password)
        users_db[username] = {'password': hashed_password}
        
        logging.info(f"User registered: {username}")
        return jsonify({'message': 'User registered successfully'}), 201
    except InvalidUsageError as e:
        return jsonify(e.to_dict()), e.status_code
    except Exception as e:
        logging.error(f"Error in register: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/api/login', methods=['POST'])
@limiter.limit("10 per minute")
def login():
    try:
        data = request.get_json()
        validate_input(data, ['username', 'password'])
        username = data['username']
        password = data['password']
        
        if username not in users_db:
            raise InvalidUsageError('Invalid username or password', status_code=401)
        
        if check_password_hash(users_db[username]['password'], password):
            session['username'] = username
            logging.info(f"User logged in: {username}")
            return jsonify({'message': 'Logged in successfully'})
        
        raise InvalidUsageError('Invalid username or password', status_code=401)
    except InvalidUsageError as e:
        return jsonify(e.to_dict()), e.status_code
    except Exception as e:
        logging.error(f"Error in login: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/api/logout', methods=['POST'])
def logout():
    username = session.pop('username', None)
    if username:
        logging.info(f"User logged out: {username}")
    return jsonify({'message': 'Logged out successfully'})

@app.route('/api/add_data', methods=['POST'])
def add_data():
    if 'username' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    
    try:
        data = request.get_json()
        validate_input(data, ['name', 'value'])
        entry = {'name': data['name'], 'value': data['value'], 'user': session['username']}
        data_storage.append(entry)
        logging.info(f"Data added by user: {session['username']}")
        return jsonify({'message': 'Data added successfully'})
    except InvalidUsageError as e:
        return jsonify(e.to_dict()), e.status_code
    except Exception as e:
        logging.error(f"Error in add_data: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/api/get_data', methods=['GET'])
def get_data():
    if 'username' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    
    user_data = [item for item in data_storage if item['user'] == session['username']]
    return jsonify(user_data)

@app.route('/api/user_info', methods=['GET'])
def user_info():
    if 'username' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    
    return jsonify({'username': session['username']})

@app.route('/api/update_data', methods=['PUT'])
def update_data():
    if 'username' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    
    try:
        data = request.get_json()
        validate_input(data, ['name', 'value'])
        name = data['name']
        new_value = data['value']
        
        for item in data_storage:
            if item['user'] == session['username'] and item['name'] == name:
                item['value'] = new_value
                logging.info(f"Data updated by user: {session['username']}")
                return jsonify({'message': 'Data updated successfully'})
        
        raise InvalidUsageError('Data not found', status_code=404)
    except InvalidUsageError as e:
        return jsonify(e.to_dict()), e.status_code
    except Exception as e:
        logging.error(f"Error in update_data: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/api/delete_data', methods=['DELETE'])
def delete_data():
    if 'username' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    
    try:
        data = request.get_json()
        validate_input(data, ['name'])
        name = data['name']
        
        for item in data_storage:
            if item['user'] == session['username'] and item['name'] == name:
                data_storage.remove(item)
                logging.info(f"Data deleted by user: {session['username']}")
                return jsonify({'message': 'Data deleted successfully'})
        
        raise InvalidUsageError('Data not found', status_code=404)
    except InvalidUsageError as e:
        return jsonify(e.to_dict()), e.status_code
    except Exception as e:
        logging.error(f"Error in delete_data: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500

def save_data_to_file():
    with open('data_storage.json', 'w') as f:
        json.dump(data_storage, f)

def load_data_from_file():
    global data_storage
    try:
        with open('data_storage.json', 'r') as f:
            data_storage = json.load(f)
    except FileNotFoundError:
        data_storage = []

if __name__ == '__main__':
    load_data_from_file()
    app.run(host="0.0.0.0", port=5000)