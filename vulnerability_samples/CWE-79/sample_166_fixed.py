from django.core.mail import send_mail
from django.http import JsonResponse
import json
from django.db import models
from django.utils import timezone
import bleach
from django.template.loader import render_to_string
from django.utils.html import strip_tags

class Campaign(models.Model):
    name = models.CharField(max_length=255)
    email_subject = models.CharField(max_length=255)
    email_content = models.TextField()
    start_date = models.DateTimeField(default=timezone.now)
    end_date = models.DateTimeField(null=True, blank=True)
    total_sent = models.IntegerField(default=0)
    total_opened = models.IntegerField(default=0)

    def __str__(self):
        return self.name

class User(models.Model):
    email = models.EmailField(unique=True)
    name = models.CharField(max_length=255)
    age = models.IntegerField()
    interests = models.TextField()

    @staticmethod
    def get_all_users():
        return User.objects.all().values('email', 'name', 'age', 'interests')

def validate_campaign_data(data):
    required_fields = ['name', 'email_subject', 'email_content', 'start_date']
    for field in required_fields:
        if field not in data:
            return False, f"Missing required field: {field}"
    return True, "Valid"

def track_campaign_stats(campaign_id, action):
    campaign = Campaign.objects.get(id=campaign_id)
    if action == 'sent':
        campaign.total_sent += 1
    elif action == 'opened':
        campaign.total_opened += 1
    campaign.save()

def segment_users(min_age, max_age, interests):
    return User.objects.filter(age__gte=min_age, age__lte=max_age, interests__contains=interests)

def create_campaign(request):
    if request.method == 'POST':
        campaign_data = json.loads(request.body)
        is_valid, message = validate_campaign_data(campaign_data)
        if not is_valid:
            return JsonResponse({'status': 'error', 'message': message}, status=400)

        sanitized_content = bleach.clean(campaign_data['email_content'], tags=bleach.ALLOWED_TAGS, attributes=bleach.ALLOWED_ATTRIBUTES)
        
        new_campaign = Campaign(
            name=campaign_data['name'],
            email_subject=campaign_data['email_subject'],
            email_content=sanitized_content,
            start_date=campaign_data['start_date'],
            end_date=campaign_data.get('end_date')
        )
        new_campaign.save()

        min_age = campaign_data.get('min_age', 0)
        max_age = campaign_data.get('max_age', 100)
        interests = campaign_data.get('interests', '')
        users = segment_users(min_age, max_age, interests)

        for user in users:
            html_content = render_to_string('email_template.html', {
                'user_name': user.name,
                'campaign_content': new_campaign.email_content
            })
            text_content = strip_tags(html_content)
            send_mail(
                new_campaign.email_subject,
                text_content,
                'noreply@example.com',
                [user.email],
                html_message=html_content
            )
            track_campaign_stats(new_campaign.id, 'sent')

        return JsonResponse({'status': 'success', 'message': 'Campaign created and emails sent successfully'})
    return JsonResponse({'status': 'error', 'message': 'Invalid request method'}, status=405)