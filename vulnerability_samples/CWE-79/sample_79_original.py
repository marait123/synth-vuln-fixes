import sqlite3
import logging
from bottle import route, run, request, response, redirect, abort
from functools import wraps
import hashlib
import os

# Set up logging
logging.basicConfig(filename='feedback_app.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Database setup
conn = sqlite3.connect('feedback.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS feedback
             (id INTEGER PRIMARY KEY, name TEXT, content TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
c.execute('''CREATE TABLE IF NOT EXISTS users
             (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password_hash TEXT)''')
conn.commit()

# Authentication
def hash_password(password):
    salt = os.urandom(32)
    key = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)
    return salt + key

def check_password(stored_password, provided_password):
    salt = stored_password[:32]
    stored_key = stored_password[32:]
    new_key = hashlib.pbkdf2_hmac('sha256', provided_password.encode('utf-8'), salt, 100000)
    return stored_key == new_key

def check_login(username, password):
    c.execute("SELECT password_hash FROM users WHERE username = ?", (username,))
    result = c.fetchone()
    if result:
        stored_password = result[0]
        return check_password(stored_password, password)
    return False

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not request.get_cookie("user"):
            return redirect("/login")
        return f(*args, **kwargs)
    return decorated_function

@route('/register', method=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.forms.get('username')
        password = request.forms.get('password')
        if username and password:
            try:
                password_hash = hash_password(password)
                c.execute("INSERT INTO users (username, password_hash) VALUES (?, ?)", (username, password_hash))
                conn.commit()
                logging.info(f"New user registered: {username}")
                return redirect("/login")
            except sqlite3.IntegrityError:
                return "Username already exists"
    return '''
        <form method="POST">
            Username: <input name="username" type="text" required />
            Password: <input name="password" type="password" required />
            <input type="submit" value="Register" />
        </form>
    '''

@route('/login', method=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.forms.get('username')
        password = request.forms.get('password')
        if check_login(username, password):
            response.set_cookie("user", username)
            logging.info(f"User logged in: {username}")
            return redirect("/")
        else:
            return "Invalid login"
    return '''
        <form method="POST">
            Username: <input name="username" type="text" required />
            Password: <input name="password" type="password" required />
            <input type="submit" value="Login" />
        </form>
    '''

@route('/logout')
def logout():
    user = request.get_cookie("user")
    response.delete_cookie("user")
    logging.info(f"User logged out: {user}")
    return redirect("/login")

# Feedback routes
@route('/', method=['GET', 'POST'])
@login_required
def feedback():
    if request.method == 'POST':
        user_name = request.forms.get('name')
        user_feedback = request.forms.get('feedback')
        if user_name and user_feedback:
            c.execute("INSERT INTO feedback (name, content) VALUES (?, ?)", (user_name, user_feedback))
            conn.commit()
            logging.info(f"New feedback added by {user_name}")
            return f"<h2>Feedback from {user_name}</h2><p>{user_feedback}</p>"
        else:
            return "Name and feedback are required"
    return '''
        <form method="POST">
            Name: <input name="name" type="text" required />
            Feedback: <textarea name="feedback" required></textarea>
            <input type="submit" />
        </form>
    '''

@route('/all')
@login_required
def all_feedback():
    c.execute("SELECT * FROM feedback ORDER BY created_at DESC")
    feedbacks = c.fetchall()
    result = "<h1>All Feedback</h1>"
    for feedback in feedbacks:
        result += f"<h2>Feedback from {feedback[1]}</h2><p>{feedback[2]}</p><small>Created at: {feedback[3]}</small>"
    return result

@route('/search', method=['GET', 'POST'])
@login_required
def search():
    if request.method == 'POST':
        search_term = request.forms.get('search')
        c.execute("SELECT * FROM feedback WHERE content LIKE ? ORDER BY created_at DESC", (f"%{search_term}%",))
        results = c.fetchall()
        result = f"<h1>Search Results for '{search_term}'</h1>"
        for feedback in results:
            result += f"<h2>Feedback from {feedback[1]}</h2><p>{feedback[2]}</p><small>Created at: {feedback[3]}</small>"
        return result
    return '''
        <form method="POST">
            Search: <input name="search" type="text" required />
            <input type="submit" value="Search" />
        </form>
    '''

@route('/delete/<id:int>')
@login_required
def delete_feedback(id):
    c.execute("DELETE FROM feedback WHERE id = ?", (id,))
    conn.commit()
    logging.info(f"Feedback deleted: {id}")
    return redirect("/all")

@route('/edit/<id:int>', method=['GET', 'POST'])
@login_required
def edit_feedback(id):
    if request.method == 'POST':
        new_content = request.forms.get('content')
        if new_content:
            c.execute("UPDATE feedback SET content = ? WHERE id = ?", (new_content, id))
            conn.commit()
            logging.info(f"Feedback edited: {id}")
            return redirect("/all")
        else:
            return "Content is required"
    c.execute("SELECT * FROM feedback WHERE id = ?", (id,))
    feedback = c.fetchone()
    if feedback:
        return f'''
            <form method="POST">
                <textarea name="content" required>{feedback[2]}</textarea>
                <input type="submit" value="Update" />
            </form>
        '''
    else:
        abort(404, "Feedback not found")

def init_db():
    admin_username = 'admin'
    admin_password = 'password'
    c.execute("SELECT * FROM users WHERE username = ?", (admin_username,))
    if not c.fetchone():
        password_hash = hash_password(admin_password)
        c.execute("INSERT INTO users (username, password_hash) VALUES (?, ?)", (admin_username, password_hash))
        conn.commit()
        logging.info("Admin user created")

if __name__ == '__main__':
    init_db()
    run(host='localhost', port=8080, debug=True)