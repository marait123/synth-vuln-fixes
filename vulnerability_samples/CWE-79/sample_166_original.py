from django.core.mail import send_mail
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.db import models
from django.utils import timezone
import json
import bleach
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Campaign(models.Model):
    name = models.CharField(max_length=255)
    email_subject = models.CharField(max_length=255)
    email_content = models.TextField()
    start_date = models.DateTimeField(default=timezone.now)
    end_date = models.DateTimeField(null=True, blank=True)
    total_sent = models.IntegerField(default=0)
    total_opened = models.IntegerField(default=0)

    def __str__(self):
        return self.name

    @classmethod
    def get_active_campaigns(cls):
        now = timezone.now()
        return cls.objects.filter(start_date__lte=now, end_date__gte=now)

class User(models.Model):
    email = models.EmailField(unique=True)
    name = models.CharField(max_length=255)
    age = models.IntegerField()
    interests = models.TextField()

    def __str__(self):
        return self.email

    @staticmethod
    def get_all_users():
        return User.objects.all().values('email', 'name', 'age', 'interests')

def validate_campaign_data(data):
    required_fields = ['name', 'email_subject', 'email_content', 'start_date']
    for field in required_fields:
        if field not in data:
            return False, f"Missing required field: {field}"
    return True, "Valid"

def track_campaign_stats(campaign_id, action):
    try:
        campaign = Campaign.objects.get(id=campaign_id)
        if action == 'sent':
            campaign.total_sent += 1
        elif action == 'opened':
            campaign.total_opened += 1
        campaign.save()
    except Campaign.DoesNotExist:
        logger.error(f"Campaign with id {campaign_id} not found")

def segment_users(min_age, max_age, interests):
    return User.objects.filter(age__gte=min_age, age__lte=max_age, interests__contains=interests)

@csrf_exempt
def create_campaign(request):
    if request.method == 'POST':
        try:
            campaign_data = json.loads(request.body)
            is_valid, message = validate_campaign_data(campaign_data)
            if not is_valid:
                return JsonResponse({'status': 'error', 'message': message}, status=400)

            new_campaign = Campaign(
                name=bleach.clean(campaign_data['name']),
                email_subject=bleach.clean(campaign_data['email_subject']),
                email_content=bleach.clean(campaign_data['email_content']),
                start_date=datetime.fromisoformat(campaign_data['start_date']),
                end_date=datetime.fromisoformat(campaign_data['end_date']) if 'end_date' in campaign_data else None
            )
            new_campaign.save()

            min_age = int(campaign_data.get('min_age', 0))
            max_age = int(campaign_data.get('max_age', 100))
            interests = bleach.clean(campaign_data.get('interests', ''))
            users = segment_users(min_age, max_age, interests)

            for user in users:
                send_mail(
                    new_campaign.email_subject,
                    '',
                    'noreply@example.com',
                    [user.email],
                    html_message=new_campaign.email_content
                )
                track_campaign_stats(new_campaign.id, 'sent')

            logger.info(f"Campaign '{new_campaign.name}' created and sent to {len(users)} users")
            return JsonResponse({'status': 'success', 'message': 'Campaign created and emails sent successfully'})
        except json.JSONDecodeError:
            return JsonResponse({'status': 'error', 'message': 'Invalid JSON data'}, status=400)
        except Exception as e:
            logger.error(f"Error creating campaign: {str(e)}")
            return JsonResponse({'status': 'error', 'message': 'Internal server error'}, status=500)
    return JsonResponse({'status': 'error', 'message': 'Invalid request method'}, status=405)

@csrf_exempt
def get_campaign_stats(request, campaign_id):
    if request.method == 'GET':
        try:
            campaign = Campaign.objects.get(id=campaign_id)
            stats = {
                'name': campaign.name,
                'total_sent': campaign.total_sent,
                'total_opened': campaign.total_opened,
                'open_rate': (campaign.total_opened / campaign.total_sent) * 100 if campaign.total_sent > 0 else 0
            }
            return JsonResponse(stats)
        except Campaign.DoesNotExist:
            return JsonResponse({'status': 'error', 'message': 'Campaign not found'}, status=404)
    return JsonResponse({'status': 'error', 'message': 'Invalid request method'}, status=405)

@csrf_exempt
def update_campaign(request, campaign_id):
    if request.method == 'PUT':
        try:
            campaign = Campaign.objects.get(id=campaign_id)
            update_data = json.loads(request.body)
            
            if 'name' in update_data:
                campaign.name = bleach.clean(update_data['name'])
            if 'email_subject' in update_data:
                campaign.email_subject = bleach.clean(update_data['email_subject'])
            if 'email_content' in update_data:
                campaign.email_content = bleach.clean(update_data['email_content'])
            if 'end_date' in update_data:
                campaign.end_date = datetime.fromisoformat(update_data['end_date'])
            
            campaign.save()
            logger.info(f"Campaign '{campaign.name}' updated")
            return JsonResponse({'status': 'success', 'message': 'Campaign updated successfully'})
        except Campaign.DoesNotExist:
            return JsonResponse({'status': 'error', 'message': 'Campaign not found'}, status=404)
        except json.JSONDecodeError:
            return JsonResponse({'status': 'error', 'message': 'Invalid JSON data'}, status=400)
        except Exception as e:
            logger.error(f"Error updating campaign: {str(e)}")
            return JsonResponse({'status': 'error', 'message': 'Internal server error'}, status=500)
    return JsonResponse({'status': 'error', 'message': 'Invalid request method'}, status=405)

@csrf_exempt
def delete_campaign(request, campaign_id):
    if request.method == 'DELETE':
        try:
            campaign = Campaign.objects.get(id=campaign_id)
            campaign_name = campaign.name
            campaign.delete()
            logger.info(f"Campaign '{campaign_name}' deleted")
            return JsonResponse({'status': 'success', 'message': 'Campaign deleted successfully'})
        except Campaign.DoesNotExist:
            return JsonResponse({'status': 'error', 'message': 'Campaign not found'}, status=404)
        except Exception as e:
            logger.error(f"Error deleting campaign: {str(e)}")
            return JsonResponse({'status': 'error', 'message': 'Internal server error'}, status=500)
    return JsonResponse({'status': 'error', 'message': 'Invalid request method'}, status=405)

if __name__ == "__main__":
    # Test harness
    test_campaign_data = {
        'name': 'Test Campaign',
        'email_subject': 'Test Subject',
        'email_content': '<p>Test Content</p>',
        'start_date': '2023-01-01T00:00:00',
        'end_date': '2023-12-31T23:59:59',
        'min_age': 18,
        'max_age': 65,
        'interests': 'technology'
    }
    
    class MockRequest:
        def __init__(self, method, body):
            self.method = method
            self.body = json.dumps(body).encode('utf-8')
    
    mock_request = MockRequest('POST', test_campaign_data)
    response = create_campaign(mock_request)
    print(response.content)