from flask import Flask, request, g, render_template_string, redirect, url_for, session, flash
from flask_sqlalchemy import SQLAlchemy
import sqlite3
import logging
from werkzeug.security import generate_password_hash, check_password_hash
import re

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///mydb.db'
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

logging.basicConfig(filename='app.log', level=logging.INFO)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(255), nullable=False)

def get_db():
    if 'db' not in g:
        g.db = sqlite3.connect('mydb.db')
        g.db.row_factory = sqlite3.Row
    return g.db

def init_db():
    with app.app_context():
        db.create_all()

@app.route('/', methods=['GET'])
def home():
    return render_template_string("<h1>Welcome to our website!</h1><a href='/login'>Login</a> | <a href='/register'>Register</a>")

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']
        
        if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
            flash("Invalid email address!")
            return redirect(url_for('register'))
        
        if len(password) < 8:
            flash("Password must be at least 8 characters long!")
            return redirect(url_for('register'))
        
        hashed_password = generate_password_hash(password)
        user = User(username=username, email=email, password=hashed_password)
        try:
            db.session.add(user)
            db.session.commit()
            logging.info(f"New user registered: {username}")
            return redirect(url_for('login'))
        except:
            db.session.rollback()
            flash("Error registering user. Please try again.")
            return redirect(url_for('register'))
    return render_template_string("""
        <h1>Register</h1>
        {% with messages = get_flashed_messages() %}
          {% if messages %}
            <ul class="flashes">
            {% for message in messages %}
              <li>{{ message }}</li>
            {% endfor %}
            </ul>
          {% endif %}
        {% endwith %}
        <form method="post">
            <input type="text" name="username" placeholder="Username" required><br>
            <input type="email" name="email" placeholder="Email" required><br>
            <input type="password" name="password" placeholder="Password" required><br>
            <input type="submit" value="Register">
        </form>
    """)

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()
        if user and check_password_hash(user.password, password):
            session['user_id'] = user.id
            logging.info(f"User logged in: {username}")
            return redirect(url_for('dashboard'))
        flash("Invalid credentials")
        return redirect(url_for('login'))
    return render_template_string("""
        <h1>Login</h1>
        {% with messages = get_flashed_messages() %}
          {% if messages %}
            <ul class="flashes">
            {% for message in messages %}
              <li>{{ message }}</li>
            {% endfor %}
            </ul>
          {% endif %}
        {% endwith %}
        <form method="post">
            <input type="text" name="username" placeholder="Username" required><br>
            <input type="password" name="password" placeholder="Password" required><br>
            <input type="submit" value="Login">
        </form>
    """)

@app.route('/dashboard', methods=['GET'])
def dashboard():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    user_id = session['user_id']
    db = get_db()
    user_data = db.execute('SELECT * FROM user WHERE id = ?', (user_id,)).fetchone()
    return f"<h1>Welcome back, {user_data['username']}!</h1><a href='/profile'>Profile</a> | <a href='/search'>Search</a> | <a href='/logout'>Logout</a>"

@app.route('/profile', methods=['GET', 'POST'])
def profile():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    user = User.query.get(session['user_id'])
    if request.method == 'POST':
        new_email = request.form['email']
        if not re.match(r"[^@]+@[^@]+\.[^@]+", new_email):
            flash("Invalid email address!")
        else:
            user.email = new_email
            db.session.commit()
            flash("Email updated successfully!")
        return redirect(url_for('profile'))
    return render_template_string("""
        <h1>Profile</h1>
        {% with messages = get_flashed_messages() %}
          {% if messages %}
            <ul class="flashes">
            {% for message in messages %}
              <li>{{ message }}</li>
            {% endfor %}
            </ul>
          {% endif %}
        {% endwith %}
        <p>Username: {{ user.username }}</p>
        <p>Email: {{ user.email }}</p>
        <form method="post">
            <input type="email" name="email" placeholder="New Email" required>
            <input type="submit" value="Update Email">
        </form>
    """, user=user)

@app.route('/search', methods=['GET', 'POST'])
def search():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    if request.method == 'POST':
        search_term = request.form['search']
        users = User.query.filter(User.username.like(f"%{search_term}%")).all()
        return render_template_string("""
            <h1>Search Results</h1>
            <ul>
            {% for user in users %}
                <li>{{ user.username }}</li>
            {% endfor %}
            </ul>
            <a href="/dashboard">Back to Dashboard</a>
        """, users=users)
    return render_template_string("""
        <h1>Search Users</h1>
        <form method="post">
            <input type="text" name="search" placeholder="Search username" required>
            <input type="submit" value="Search">
        </form>
    """)

@app.route('/logout')
def logout():
    session.pop('user_id', None)
    return redirect(url_for('home'))

@app.teardown_appcontext
def close_db(error):
    if hasattr(g, 'db'):
        g.db.close()

@app.errorhandler(404)
def page_not_found(e):
    return render_template_string("""
        <h1>404 - Page Not Found</h1>
        <p>The page you're looking for doesn't exist.</p>
        <a href="/">Go Home</a>
    """), 404

@app.errorhandler(500)
def internal_server_error(e):
    logging.error(f"500 error: {str(e)}")
    return render_template_string("""
        <h1>500 - Internal Server Error</h1>
        <p>Something went wrong on our end. Please try again later.</p>
        <a href="/">Go Home</a>
    """), 500

if __name__ == '__main__':
    init_db()
    app.run(debug=True)