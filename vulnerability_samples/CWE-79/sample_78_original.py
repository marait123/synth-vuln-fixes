import sqlite3
import logging
from flask import Flask, request, g, render_template_string, abort
from werkzeug.exceptions import BadRequest
from datetime import datetime

app = Flask(__name__)

DATABASE = 'blog.db'
logging.basicConfig(level=logging.INFO)

def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = sqlite3.connect(DATABASE)
        db.row_factory = sqlite3.Row
    return db

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()

def init_db():
    with app.app_context():
        db = get_db()
        with app.open_resource('schema.sql', mode='r') as f:
            db.cursor().executescript(f.read())
        db.commit()

def query_db(query, args=(), one=False):
    cur = get_db().execute(query, args)
    rv = cur.fetchall()
    cur.close()
    return (rv[0] if rv else None) if one else rv

def add_post(title, content):
    query_db('INSERT INTO posts (title, content, created_at) VALUES (?, ?, ?)',
             [title, content, datetime.now().strftime("%Y-%m-%d %H:%M:%S")])
    get_db().commit()

@app.route('/create_post', methods=['POST'])
def create_post_vulnerable():
    try:
        title = request.form['title']
        content = request.form['content']
        
        if not title or not content:
            raise BadRequest("Title and content are required")
        
        if len(title) > 100 or len(content) > 1000:
            raise BadRequest("Title or content too long")
        
        add_post(title, content)
        logging.info(f"New post created: {title}")
        return render_template_string("<h1>{{ title }}</h1><p>{{ content }}</p>", title=title, content=content)
    except BadRequest as e:
        logging.error(f"Bad request: {str(e)}")
        return str(e), 400
    except Exception as e:
        logging.error(f"Unexpected error: {str(e)}")
        return "An unexpected error occurred", 500

@app.route('/posts')
def get_posts():
    try:
        posts = query_db('SELECT * FROM posts ORDER BY created_at DESC')
        html = "<h1>All Posts</h1>"
        for post in posts:
            html += f"<h2>{post['title']}</h2><p>{post['content']}</p><small>{post['created_at']}</small>"
        return html
    except Exception as e:
        logging.error(f"Error retrieving posts: {str(e)}")
        return "An error occurred while retrieving posts", 500

@app.route('/post/<int:post_id>')
def get_post(post_id):
    try:
        post = query_db('SELECT * FROM posts WHERE id = ?', [post_id], one=True)
        if post is None:
            abort(404)
        return render_template_string("<h1>{{ post.title }}</h1><p>{{ post.content }}</p><small>{{ post.created_at }}</small>", post=post)
    except Exception as e:
        logging.error(f"Error retrieving post {post_id}: {str(e)}")
        return "An error occurred while retrieving the post", 500

@app.route('/update_post/<int:post_id>', methods=['POST'])
def update_post(post_id):
    try:
        title = request.form['title']
        content = request.form['content']
        
        if not title or not content:
            raise BadRequest("Title and content are required")
        
        if len(title) > 100 or len(content) > 1000:
            raise BadRequest("Title or content too long")
        
        query_db('UPDATE posts SET title = ?, content = ? WHERE id = ?', [title, content, post_id])
        get_db().commit()
        logging.info(f"Post {post_id} updated")
        return f"Post {post_id} updated successfully"
    except BadRequest as e:
        logging.error(f"Bad request: {str(e)}")
        return str(e), 400
    except Exception as e:
        logging.error(f"Error updating post {post_id}: {str(e)}")
        return "An error occurred while updating the post", 500

@app.route('/delete_post/<int:post_id>', methods=['POST'])
def delete_post(post_id):
    try:
        query_db('DELETE FROM posts WHERE id = ?', [post_id])
        get_db().commit()
        logging.info(f"Post {post_id} deleted")
        return f"Post {post_id} deleted successfully"
    except Exception as e:
        logging.error(f"Error deleting post {post_id}: {str(e)}")
        return "An error occurred while deleting the post", 500

@app.route('/')
def index():
    return '''
    <h1>Welcome to the Vulnerable Blog</h1>
    <p>Available routes:</p>
    <ul>
        <li>/create_post (POST)</li>
        <li>/posts (GET)</li>
        <li>/post/&lt;id&gt; (GET)</li>
        <li>/update_post/&lt;id&gt; (POST)</li>
        <li>/delete_post/&lt;id&gt; (POST)</li>
    </ul>
    '''

if __name__ == '__main__':
    init_db()
    app.run(debug=True)