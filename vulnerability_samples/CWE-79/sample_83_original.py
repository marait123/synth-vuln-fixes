import logging
from starlette.applications import Starlette
from starlette.responses import HTMLResponse, RedirectResponse, JSONResponse
from starlette.routing import Route
from starlette.requests import Request
import sqlite3
import bcrypt
from starlette.middleware import Middleware
from starlette.middleware.sessions import SessionMiddleware
from starlette.exceptions import HTTPException

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Database setup
conn = sqlite3.connect('users.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS users
             (id INTEGER PRIMARY KEY AUTOINCREMENT,
              username TEXT UNIQUE,
              email TEXT UNIQUE,
              password TEXT,
              bio TEXT)''')
conn.commit()

class CustomHTTPException(HTTPException):
    def __init__(self, status_code: int, detail: str):
        super().__init__(status_code=status_code, detail=detail)

def get_user_by_username(username):
    c.execute("SELECT * FROM users WHERE username=?", (username,))
    return c.fetchone()

def create_user(username, email, password, bio):
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
    try:
        c.execute("INSERT INTO users (username, email, password, bio) VALUES (?, ?, ?, ?)",
                  (username, email, hashed_password, bio))
        conn.commit()
    except sqlite3.IntegrityError:
        raise CustomHTTPException(status_code=400, detail="Username or email already exists")

def update_user(user_id, email, bio):
    c.execute("UPDATE users SET email=?, bio=? WHERE id=?", (email, bio, user_id))
    conn.commit()

def delete_user(user_id):
    c.execute("DELETE FROM users WHERE id=?", (user_id,))
    conn.commit()

async def homepage(request):
    user_input = request.query_params.get('name', 'World')
    return HTMLResponse(f"<html><body><h1>Hello, {user_input}!</h1><a href='/register'>Register</a> | <a href='/login'>Login</a></body></html>")

async def register(request):
    if request.method == "POST":
        form_data = await request.form()
        username = form_data.get('username')
        email = form_data.get('email')
        password = form_data.get('password')
        bio = form_data.get('bio')
        
        try:
            create_user(username, email, password, bio)
            logger.info(f"User registered: {username}")
            return RedirectResponse(url=f"/profile?username={username}", status_code=303)
        except CustomHTTPException as e:
            return HTMLResponse(f"<html><body><h1>Error: {e.detail}</h1><a href='/register'>Try again</a></body></html>")
    
    return HTMLResponse('''
        <html><body>
        <h1>Register</h1>
        <form method="POST">
            <input type="text" name="username" placeholder="Username" required><br>
            <input type="email" name="email" placeholder="Email" required><br>
            <input type="password" name="password" placeholder="Password" required><br>
            <textarea name="bio" placeholder="Bio"></textarea><br>
            <input type="submit" value="Register">
        </form>
        </body></html>
    ''')

async def login(request):
    if request.method == "POST":
        form_data = await request.form()
        username = form_data.get('username')
        password = form_data.get('password')
        
        user = get_user_by_username(username)
        if user and bcrypt.checkpw(password.encode('utf-8'), user[3]):
            request.session['user_id'] = user[0]
            logger.info(f"User logged in: {username}")
            return RedirectResponse(url=f"/profile?username={username}", status_code=303)
        else:
            return HTMLResponse("<html><body><h1>Invalid credentials</h1><a href='/login'>Try again</a></body></html>")
    
    return HTMLResponse('''
        <html><body>
        <h1>Login</h1>
        <form method="POST">
            <input type="text" name="username" placeholder="Username" required><br>
            <input type="password" name="password" placeholder="Password" required><br>
            <input type="submit" value="Login">
        </form>
        </body></html>
    ''')

async def profile(request):
    username = request.query_params.get('username')
    user = get_user_by_username(username)
    
    if user:
        return HTMLResponse(f'''
            <html><body>
            <h1>Profile: {user[1]}</h1>
            <p>Email: {user[2]}</p>
            <p>Bio: {user[4]}</p>
            <a href="/">Home</a> | <a href="/edit_profile?username={username}">Edit Profile</a>
            </body></html>
        ''')
    else:
        return HTMLResponse("<html><body><h1>User not found</h1></body></html>")

async def edit_profile(request):
    username = request.query_params.get('username')
    user = get_user_by_username(username)
    
    if not user:
        return HTMLResponse("<html><body><h1>User not found</h1></body></html>")
    
    if request.method == "POST":
        form_data = await request.form()
        email = form_data.get('email')
        bio = form_data.get('bio')
        
        update_user(user[0], email, bio)
        logger.info(f"User profile updated: {username}")
        return RedirectResponse(url=f"/profile?username={username}", status_code=303)
    
    return HTMLResponse(f'''
        <html><body>
        <h1>Edit Profile: {user[1]}</h1>
        <form method="POST">
            <input type="email" name="email" value="{user[2]}" required><br>
            <textarea name="bio">{user[4]}</textarea><br>
            <input type="submit" value="Update">
        </form>
        </body></html>
    ''')

async def delete_account(request):
    if request.method == "POST":
        user_id = request.session.get('user_id')
        if user_id:
            delete_user(user_id)
            logger.info(f"User account deleted: {user_id}")
            return RedirectResponse(url="/", status_code=303)
    
    return HTMLResponse('''
        <html><body>
        <h1>Delete Account</h1>
        <form method="POST">
            <p>Are you sure you want to delete your account? This action cannot be undone.</p>
            <input type="submit" value="Delete Account">
        </form>
        </body></html>
    ''')

async def api_users(request):
    c.execute("SELECT id, username, email, bio FROM users")
    users = c.fetchall()
    return JSONResponse([{"id": user[0], "username": user[1], "email": user[2], "bio": user[3]} for user in users])

routes = [
    Route("/", homepage),
    Route("/register", register, methods=["GET", "POST"]),
    Route("/login", login, methods=["GET", "POST"]),
    Route("/profile", profile),
    Route("/edit_profile", edit_profile, methods=["GET", "POST"]),
    Route("/delete_account", delete_account, methods=["GET", "POST"]),
    Route("/api/users", api_users),
]

middleware = [
    Middleware(SessionMiddleware, secret_key="your-secret-key")
]

app = Starlette(debug=True, routes=routes, middleware=middleware)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)