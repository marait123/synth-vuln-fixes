import sqlite3
from bottle import route, run, request, response, redirect, template
from functools import wraps
import secrets

# Database setup
conn = sqlite3.connect('feedback.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS feedback
             (id INTEGER PRIMARY KEY, name TEXT, content TEXT)''')
conn.commit()

# Authentication
def check_login(username, password):
    return username == 'admin' and password == 'password'

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not request.get_cookie("user"):
            return redirect("/login")
        return f(*args, **kwargs)
    return decorated_function

# CSRF Protection
def generate_csrf_token():
    if not request.get_cookie("csrf_token"):
        csrf_token = secrets.token_hex(16)
        response.set_cookie("csrf_token", csrf_token)
    else:
        csrf_token = request.get_cookie("csrf_token")
    return csrf_token

@route('/login', method=['GET', 'POST'])
def login():
    csrf_token = generate_csrf_token()
    if request.method == 'POST':
        username = request.forms.get('username')
        password = request.forms.get('password')
        if check_login(username, password):
            response.set_cookie("user", username)
            return redirect("/")
    return template('login_template', csrf_token=csrf_token)

@route('/logout')
def logout():
    response.delete_cookie("user")
    return redirect("/login")

# Feedback routes
@route('/', method=['GET', 'POST'])
@login_required
def feedback():
    csrf_token = generate_csrf_token()
    if request.method == 'POST':
        if request.forms.get('csrf_token') != request.get_cookie('csrf_token'):
            return "CSRF token mismatch"
        user_name = request.forms.get('name')
        user_feedback = request.forms.get('feedback')
        c.execute("INSERT INTO feedback (name, content) VALUES (?, ?)", (user_name, user_feedback))
        conn.commit()
        return template('feedback_template', user_name=user_name, user_feedback=user_feedback)
    return template('feedback_form_template', csrf_token=csrf_token)

@route('/all')
@login_required
def all_feedback():
    c.execute("SELECT * FROM feedback")
    feedbacks = c.fetchall()
    return template('all_feedback_template', feedbacks=feedbacks)

@route('/search', method=['GET', 'POST'])
@login_required
def search():
    csrf_token = generate_csrf_token()
    if request.method == 'POST':
        if request.forms.get('csrf_token') != request.get_cookie('csrf_token'):
            return "CSRF token mismatch"
        search_term = request.forms.get('search')
        c.execute("SELECT * FROM feedback WHERE content LIKE ?", (f"%{search_term}%",))
        results = c.fetchall()
        return template('search_results_template', search_term=search_term, results=results)
    return template('search_form_template', csrf_token=csrf_token)

run(host='localhost', port=8080, debug=True)