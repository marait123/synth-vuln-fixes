from django.http import HttpResponse
from django.views.decorators.http import require_http_methods
from django.core.validators import validate_email
from django.core.exceptions import ValidationError
from django.utils.html import escape
import re

# Simulated database
users_db = {}

def sanitize_input(input_string):
    return escape(input_string)

@require_http_methods(["POST"])
def user_registration(request):
    email = request.POST.get('email', '')
    password = request.POST.get('password', '')
    name = request.POST.get('name', '')
    age = request.POST.get('age', '')

    try:
        validate_email(email)
    except ValidationError:
        return HttpResponse("Invalid email provided.", status=400)

    if not validate_password_strength(password):
        return HttpResponse("Password does not meet security requirements.", status=400)

    if not name:
        return HttpResponse("Name is required.", status=400)

    try:
        age = int(age)
        if age < 18:
            return HttpResponse("User must be 18 or older.", status=400)
    except ValueError:
        return HttpResponse("Invalid age provided.", status=400)

    # Create user profile
    users_db[email] = {
        'name': sanitize_input(name),
        'age': age,
        'password': password  # Note: In a real application, this should be hashed
    }

    return HttpResponse("User successfully registered.")

@require_http_methods(["GET"])
def display_user_profile(request):
    email = request.GET.get('email', '')
    if email not in users_db:
        return HttpResponse("User not found.", status=404)

    user = users_db[email]
    profile_html = f"""
    <h1>User Profile</h1>
    <p>Name: {sanitize_input(user['name'])}</p>
    <p>Email: {sanitize_input(email)}</p>
    <p>Age: {user['age']}</p>
    """
    return HttpResponse(profile_html)

def validate_password_strength(password):
    if len(password) < 8:
        return False
    if not re.search(r"[A-Z]", password):
        return False
    if not re.search(r"[a-z]", password):
        return False
    if not re.search(r"\d", password):
        return False
    return True