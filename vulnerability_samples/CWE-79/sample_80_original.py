from django.http import HttpResponse, JsonResponse
from django.shortcuts import render, redirect
from django.views.decorators.http import require_http_methods
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from django.core.exceptions import ValidationError
from django.views.decorators.csrf import csrf_exempt
import logging
import re

logger = logging.getLogger(__name__)

@require_http_methods(["GET", "POST"])
def user_login(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        try:
            user = authenticate(request, username=username, password=password)
            if user is not None:
                login(request, user)
                logger.info(f"User {username} logged in successfully")
                return redirect('profile')
            else:
                logger.warning(f"Failed login attempt for user {username}")
                return render(request, 'login.html', {'error': 'Invalid credentials'})
        except Exception as e:
            logger.error(f"Error during login: {str(e)}")
            return render(request, 'login.html', {'error': 'An error occurred'})
    return render(request, 'login.html')

@login_required
@require_http_methods(["GET"])
def profile_view(request):
    user = request.user
    custom_message = request.GET.get('message', '')
    context = {
        'username': user.username,
        'email': user.email,
        'custom_message': custom_message
    }
    return HttpResponse(f"""
        <h1>Welcome, {context['username']}!</h1>
        <p>Email: {context['email']}</p>
        <p>Custom Message: {context['custom_message']}</p>
    """)

@login_required
@require_http_methods(["GET", "POST"])
def update_profile(request):
    if request.method == 'POST':
        user = request.user
        new_email = request.POST.get('email', user.email)
        try:
            validate_email(new_email)
            user.email = new_email
            user.save()
            logger.info(f"User {user.username} updated email to {new_email}")
            return redirect('profile')
        except ValidationError as e:
            logger.warning(f"Invalid email update attempt: {str(e)}")
            return render(request, 'update_profile.html', {'error': str(e)})
    return render(request, 'update_profile.html')

@login_required
@require_http_methods(["POST"])
def user_logout(request):
    logout(request)
    logger.info(f"User {request.user.username} logged out")
    return redirect('login')

@csrf_exempt
@require_http_methods(["POST"])
def create_user(request):
    username = request.POST.get('username')
    password = request.POST.get('password')
    email = request.POST.get('email')
    try:
        validate_email(email)
        user = User.objects.create_user(username=username, email=email, password=password)
        logger.info(f"New user created: {username}")
        return JsonResponse({'status': 'success', 'user_id': user.id})
    except ValidationError as e:
        logger.warning(f"User creation failed: {str(e)}")
        return JsonResponse({'status': 'error', 'message': str(e)}, status=400)

def validate_email(email):
    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        raise ValidationError("Invalid email format")

class CustomException(Exception):
    pass

def handle_custom_error(func):
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except CustomException as e:
            logger.error(f"CustomException: {str(e)}")
            return HttpResponse("An error occurred", status=500)
    return wrapper

@handle_custom_error
def risky_operation(request):
    if random.random() < 0.5:
        raise CustomException("Random error occurred")
    return HttpResponse("Operation successful")

urlpatterns = [
    ('login/', user_login),
    ('profile/', profile_view),
    ('update-profile/', update_profile),
    ('logout/', user_logout),
    ('create-user/', create_user),
    ('risky-operation/', risky_operation),
]

def render(request, template_name, context=None):
    if template_name == 'login.html':
        error = context.get('error', '') if context else ''
        return HttpResponse(f"""
            <form method="post">
                <input type="text" name="username" placeholder="Username">
                <input type="password" name="password" placeholder="Password">
                <button type="submit">Login</button>
            </form>
            <p style="color: red;">{error}</p>
        """)
    elif template_name == 'update_profile.html':
        error = context.get('error', '') if context else ''
        return HttpResponse(f"""
            <form method="post">
                <input type="email" name="email" placeholder="New Email">
                <button type="submit">Update</button>
            </form>
            <p style="color: red;">{error}</p>
        """)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    print("Django-like application running. Use a proper Django setup for production.")