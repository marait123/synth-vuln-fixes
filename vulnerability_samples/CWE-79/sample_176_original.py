from django.db import models
from django.shortcuts import render, redirect
from django.http import HttpResponseBadRequest, HttpResponse
from django.views import View
from django import forms
import re
import logging
from django.core.exceptions import ValidationError
from django.contrib import messages
from django.core.mail import send_mail
from django.conf import settings
from django.utils.html import escape

logger = logging.getLogger(__name__)

class FeedbackModel(models.Model):
    email = models.EmailField()
    feedback = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    is_resolved = models.BooleanField(default=False)

    def __str__(self):
        return f"Feedback from {self.email}"

    def clean(self):
        if len(self.feedback) < 10:
            raise ValidationError("Feedback must be at least 10 characters long.")

class FeedbackForm(forms.ModelForm):
    class Meta:
        model = FeedbackModel
        fields = ['email', 'feedback']

    def clean_email(self):
        email = self.cleaned_data.get('email')
        if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
            raise forms.ValidationError("Invalid email format.")
        return email

class FeedbackSubmissionView(View):
    template_name = 'feedback_form.html'

    def get(self, request):
        form = FeedbackForm()
        return render(request, self.template_name, {'form': form})

    def post(self, request):
        form = FeedbackForm(request.POST)
        if form.is_valid():
            try:
                feedback = form.save()
                user_email = feedback.email
                content = f"""
                <html>
                    <body>
                        <h1>Thank you for your feedback!</h1>
                        <p>We appreciate your input, {user_email}</p>
                        <p>Your feedback: {feedback.feedback}</p>
                    </body>
                </html>
                """
                self.send_confirmation_email(user_email)
                logger.info(f"Feedback submitted by {user_email}")
                return HttpResponse(content, content_type='text/html')
            except Exception as e:
                logger.error(f"Error saving feedback: {str(e)}")
                messages.error(request, "An error occurred while submitting your feedback.")
        return render(request, self.template_name, {'form': form})

    def send_confirmation_email(self, user_email):
        subject = "Thank you for your feedback"
        message = "We have received your feedback and will review it shortly."
        from_email = settings.DEFAULT_FROM_EMAIL
        recipient_list = [user_email]
        send_mail(subject, message, from_email, recipient_list)

class FeedbackListView(View):
    template_name = 'feedback_list.html'

    def get(self, request):
        feedbacks = FeedbackModel.objects.all().order_by('-created_at')
        return render(request, self.template_name, {'feedbacks': feedbacks})

class FeedbackUpdateView(View):
    template_name = 'feedback_update.html'

    def get(self, request, pk):
        feedback = FeedbackModel.objects.get(pk=pk)
        form = FeedbackForm(instance=feedback)
        return render(request, self.template_name, {'form': form, 'feedback': feedback})

    def post(self, request, pk):
        feedback = FeedbackModel.objects.get(pk=pk)
        form = FeedbackForm(request.POST, instance=feedback)
        if form.is_valid():
            form.save()
            messages.success(request, "Feedback updated successfully.")
            return redirect('list_feedback')
        return render(request, self.template_name, {'form': form, 'feedback': feedback})

class FeedbackDeleteView(View):
    def post(self, request, pk):
        feedback = FeedbackModel.objects.get(pk=pk)
        feedback.delete()
        messages.success(request, "Feedback deleted successfully.")
        return redirect('list_feedback')

from django.urls import path

urlpatterns = [
    path('submit/', FeedbackSubmissionView.as_view(), name='submit_feedback'),
    path('list/', FeedbackListView.as_view(), name='list_feedback'),
    path('update/<int:pk>/', FeedbackUpdateView.as_view(), name='update_feedback'),
    path('delete/<int:pk>/', FeedbackDeleteView.as_view(), name='delete_feedback'),
]

# Templates
# feedback_form.html
"""
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Submit Feedback</button>
</form>
"""

# feedback_list.html
"""
<h1>Submitted Feedback</h1>
<ul>
{% for feedback in feedbacks %}
    <li>
        {{ feedback.email }}: {{ feedback.feedback }}
        <a href="{% url 'update_feedback' feedback.pk %}">Edit</a>
        <form method="post" action="{% url 'delete_feedback' feedback.pk %}" style="display:inline;">
            {% csrf_token %}
            <button type="submit" onclick="return confirm('Are you sure you want to delete this feedback?');">Delete</button>
        </form>
    </li>
{% endfor %}
</ul>
"""

# feedback_update.html
"""
<h1>Update Feedback</h1>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Update Feedback</button>
</form>
"""

# Test cases
from django.test import TestCase, Client
from django.urls import reverse

class FeedbackTests(TestCase):
    def setUp(self):
        self.client = Client()

    def test_submit_feedback(self):
        response = self.client.post(reverse('submit_feedback'), {
            'email': 'test@example.com',
            'feedback': 'This is a test feedback.'
        })
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Thank you for your feedback!')

    def test_list_feedback(self):
        FeedbackModel.objects.create(email='test@example.com', feedback='Test feedback')
        response = self.client.get(reverse('list_feedback'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'test@example.com')