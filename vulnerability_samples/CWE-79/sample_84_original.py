from sanic import Sanic, response
from sanic.request import Request
from sanic.response import redirect, json
import sqlite3
import hashlib
import logging
import os
from sanic_session import Session, InMemorySessionInterface

app = Sanic("FeedbackApp")
app.config.SECRET = "your-secret-key"
Session(app, interface=InMemorySessionInterface())

logging.basicConfig(filename='app.log', level=logging.INFO)

DB_PATH = 'feedback.db'

def get_db_connection():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db_connection()
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS feedbacks
                 (id INTEGER PRIMARY KEY, user_id INTEGER, content TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    conn.close()

init_db()

@app.route("/register", methods=["GET", "POST"])
async def register(request):
    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")
        if not username or not password:
            return response.html("Username and password are required.")
        hashed_password = hashlib.sha256(password.encode()).hexdigest()
        try:
            conn = get_db_connection()
            c = conn.cursor()
            c.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, hashed_password))
            conn.commit()
            logging.info(f"New user registered: {username}")
            return redirect("/login")
        except sqlite3.IntegrityError:
            return response.html("Username already exists.")
        finally:
            conn.close()
    return response.html("<html><body><h2>Register</h2><form method='POST'><input type='text' name='username' required><input type='password' name='password' required><input type='submit' value='Register'></form></body></html>")

@app.route("/login", methods=["GET", "POST"])
async def login(request):
    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")
        hashed_password = hashlib.sha256(password.encode()).hexdigest()
        conn = get_db_connection()
        c = conn.cursor()
        c.execute("SELECT id FROM users WHERE username = ? AND password = ?", (username, hashed_password))
        user = c.fetchone()
        conn.close()
        if user:
            request['session']['user_id'] = user['id']
            logging.info(f"User logged in: {username}")
            return redirect("/dashboard")
        else:
            return response.html("Invalid username or password.")
    return response.html("<html><body><h2>Login</h2><form method='POST'><input type='text' name='username' required><input type='password' name='password' required><input type='submit' value='Login'></form></body></html>")

@app.route("/dashboard")
async def dashboard(request):
    user_id = request['session'].get('user_id')
    if not user_id:
        return redirect("/login")
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("SELECT content, timestamp FROM feedbacks WHERE user_id = ? ORDER BY timestamp DESC", (user_id,))
    feedbacks = c.fetchall()
    conn.close()
    feedback_html = "<html><body><h2>Your Feedbacks</h2>"
    for feedback in feedbacks:
        feedback_html += f"<p>{feedback['content']} - {feedback['timestamp']}</p>"
    feedback_html += "<a href='/submit_feedback'>Submit Feedback</a> | <a href='/search'>Search Feedbacks</a> | <a href='/logout'>Logout</a></body></html>"
    return response.html(feedback_html)

@app.route("/submit_feedback", methods=["GET", "POST"])
async def submit_feedback(request):
    user_id = request['session'].get('user_id')
    if not user_id:
        return redirect("/login")
    if request.method == "POST":
        user_feedback = request.form.get("feedback")
        if not user_feedback:
            return response.html("Feedback content is required.")
        conn = get_db_connection()
        c = conn.cursor()
        c.execute("INSERT INTO feedbacks (user_id, content) VALUES (?, ?)", (user_id, user_feedback))
        conn.commit()
        conn.close()
        logging.info(f"New feedback submitted by user {user_id}")
        return response.html(f"<html><body><h2>Feedback received:</h2><p>{user_feedback}</p><a href='/dashboard'>Back to Dashboard</a></body></html>")
    return response.html("<html><body><h2>Submit Feedback</h2><form method='POST'><textarea name='feedback' required></textarea><input type='submit' value='Submit'></form></body></html>")

@app.route("/search", methods=["GET"])
async def search_feedbacks(request):
    user_id = request['session'].get('user_id')
    if not user_id:
        return redirect("/login")
    query = request.args.get("q", "")
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("SELECT content, timestamp FROM feedbacks WHERE content LIKE ? AND user_id = ?", (f"%{query}%", user_id))
    results = c.fetchall()
    conn.close()
    result_html = f"<html><body><h2>Search Results for '{query}'</h2>"
    for result in results:
        result_html += f"<p>{result['content']} - {result['timestamp']}</p>"
    result_html += "<a href='/dashboard'>Back to Dashboard</a></body></html>"
    return response.html(result_html)

@app.route("/logout")
async def logout(request):
    del request['session']['user_id']
    return redirect("/login")

@app.route("/api/feedbacks", methods=["GET"])
async def api_get_feedbacks(request):
    user_id = request['session'].get('user_id')
    if not user_id:
        return json({"error": "Unauthorized"}, status=401)
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("SELECT id, content, timestamp FROM feedbacks WHERE user_id = ? ORDER BY timestamp DESC", (user_id,))
    feedbacks = [dict(row) for row in c.fetchall()]
    conn.close()
    return json({"feedbacks": feedbacks})

@app.route("/api/feedback", methods=["POST"])
async def api_submit_feedback(request):
    user_id = request['session'].get('user_id')
    if not user_id:
        return json({"error": "Unauthorized"}, status=401)
    content = request.json.get("content")
    if not content:
        return json({"error": "Feedback content is required"}, status=400)
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("INSERT INTO feedbacks (user_id, content) VALUES (?, ?)", (user_id, content))
    feedback_id = c.lastrowid
    conn.commit()
    conn.close()
    logging.info(f"New feedback submitted via API by user {user_id}")
    return json({"message": "Feedback submitted successfully", "id": feedback_id})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000, debug=True)