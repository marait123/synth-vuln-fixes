from django.http import HttpResponse, HttpResponseRedirect, JsonResponse
from django.views.decorators.http import require_http_methods
from django.core.validators import validate_email
from django.core.exceptions import ValidationError
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
from django.shortcuts import get_object_or_404
from django.db import models
from django.views.decorators.csrf import csrf_exempt
import logging
import json

logger = logging.getLogger(__name__)

class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    age = models.IntegerField(null=True, blank=True)
    bio = models.TextField(max_length=500, blank=True)

    def __str__(self):
        return f"{self.user.username}'s profile"

@csrf_exempt
@require_http_methods(["POST"])
def user_registration(request):
    try:
        data = json.loads(request.body)
        email = data.get('email', '')
        password = data.get('password', '')
        name = data.get('name', '')
        age = data.get('age', '')

        try:
            validate_email(email)
        except ValidationError:
            return JsonResponse({"error": f"Invalid email: {email}"}, status=400)

        if len(password) < 8:
            return JsonResponse({"error": f"Password too short for email: {email}"}, status=400)

        if not name:
            return JsonResponse({"error": "Name is required."}, status=400)

        try:
            age = int(age)
            if age < 18:
                return JsonResponse({"error": "You must be 18 or older to register."}, status=400)
        except ValueError:
            return JsonResponse({"error": "Invalid age provided."}, status=400)

        user = User.objects.create_user(username=email, email=email, password=password)
        user.first_name = name
        user.save()

        UserProfile.objects.create(user=user, age=age)

        logger.info(f"User registered with email: {email}")
        return JsonResponse({"message": f"User registered with email: {email}"})
    except Exception as e:
        logger.error(f"Error during user registration: {str(e)}")
        return JsonResponse({"error": "An unexpected error occurred."}, status=500)

@csrf_exempt
@require_http_methods(["POST"])
def user_login(request):
    try:
        data = json.loads(request.body)
        email = data.get('email', '')
        password = data.get('password', '')

        user = authenticate(request, username=email, password=password)
        if user is not None:
            login(request, user)
            logger.info(f"Login successful for user: {email}")
            return JsonResponse({"message": f"Login successful for user: {email}"})
        else:
            logger.warning(f"Invalid login attempt for user: {email}")
            return JsonResponse({"error": "Invalid login credentials."}, status=400)
    except Exception as e:
        logger.error(f"Error during user login: {str(e)}")
        return JsonResponse({"error": "An unexpected error occurred."}, status=500)

@login_required
def profile(request):
    user = request.user
    name = user.first_name
    email = user.email
    profile = getattr(user, 'userprofile', None)
    age = profile.age if profile else "Not provided"
    bio = profile.bio if profile else "Not provided"

    profile_data = {
        "name": name,
        "email": email,
        "age": age,
        "bio": bio
    }

    return JsonResponse(profile_data)

@login_required
@require_http_methods(["PUT"])
def update_profile(request):
    try:
        data = json.loads(request.body)
        user = request.user
        profile = user.userprofile

        if 'name' in data:
            user.first_name = data['name']
        if 'age' in data:
            profile.age = int(data['age'])
        if 'bio' in data:
            profile.bio = data['bio']

        user.save()
        profile.save()

        logger.info(f"Profile updated for user: {user.email}")
        return JsonResponse({"message": "Profile updated successfully"})
    except Exception as e:
        logger.error(f"Error updating profile: {str(e)}")
        return JsonResponse({"error": "An error occurred while updating the profile"}, status=500)

@login_required
@require_http_methods(["DELETE"])
def delete_account(request):
    try:
        user = request.user
        email = user.email
        user.delete()
        logout(request)
        logger.info(f"Account deleted for user: {email}")
        return JsonResponse({"message": "Account deleted successfully"})
    except Exception as e:
        logger.error(f"Error deleting account: {str(e)}")
        return JsonResponse({"error": "An error occurred while deleting the account"}, status=500)

@login_required
@require_http_methods(["POST"])
def user_logout(request):
    logout(request)
    return JsonResponse({"message": "Logged out successfully"})

def test_user_flow():
    # Test user registration
    reg_data = {
        "email": "test@example.com",
        "password": "securepass123",
        "name": "Test User",
        "age": "25"
    }
    reg_response = user_registration(type('Request', (), {'body': json.dumps(reg_data)})())
    print("Registration response:", reg_response.content)

    # Test user login
    login_data = {
        "email": "test@example.com",
        "password": "securepass123"
    }
    login_response = user_login(type('Request', (), {'body': json.dumps(login_data)})())
    print("Login response:", login_response.content)

    # Test profile view
    profile_response = profile(type('Request', (), {'user': User.objects.get(email="test@example.com")})())
    print("Profile response:", profile_response.content)

    # Test profile update
    update_data = {
        "name": "Updated User",
        "age": 26,
        "bio": "This is an updated bio"
    }
    update_response = update_profile(type('Request', (), {'body': json.dumps(update_data), 'user': User.objects.get(email="test@example.com")})())
    print("Update response:", update_response.content)

    # Test account deletion
    delete_response = delete_account(type('Request', (), {'user': User.objects.get(email="test@example.com")})())
    print("Delete response:", delete_response.content)

if __name__ == "__main__":
    test_user_flow()