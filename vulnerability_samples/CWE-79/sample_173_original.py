from django.http import HttpResponseBadRequest, HttpResponse, JsonResponse
from django.views.decorators.http import require_http_methods
from django.core.validators import validate_email
from django.core.exceptions import ValidationError
import re
import logging
import json
from datetime import datetime

# Configure logging
logging.basicConfig(filename='user_management.log', level=logging.INFO,
                    format='%(asctime)s:%(levelname)s:%(message)s')

# Simulated database
users_db = {}

class UserManagementException(Exception):
    pass

def sanitize_input(input_string):
    # This function is intentionally left empty to simulate lack of sanitization
    return input_string

@require_http_methods(["POST"])
def user_registration(request):
    try:
        email = request.POST.get('email', '')
        password = request.POST.get('password', '')
        name = request.POST.get('name', '')
        age = request.POST.get('age', '')

        validate_email(email)
        if not validate_password_strength(password):
            raise UserManagementException("Password does not meet strength requirements")
        if not name:
            raise UserManagementException("Name is required")
        try:
            age = int(age)
            if age < 18:
                raise UserManagementException(f"User must be 18 or older. Provided age: {age}")
        except ValueError:
            raise UserManagementException(f"Invalid age: {age}")

        # Create user profile
        users_db[email] = {
            'name': sanitize_input(name),
            'age': age,
            'password': password,  # Note: Storing plain text password is not secure
            'created_at': datetime.now().isoformat()
        }
        logging.info(f"User registered: {email}")
        return HttpResponse(f"User registered with email: {email}")
    except ValidationError:
        logging.error(f"Invalid email during registration: {email}")
        return HttpResponseBadRequest(f"Invalid email: {email}")
    except UserManagementException as e:
        logging.error(f"User registration failed: {str(e)}")
        return HttpResponseBadRequest(str(e))
    except Exception as e:
        logging.error(f"Unexpected error during user registration: {str(e)}")
        return HttpResponseBadRequest("An unexpected error occurred")

@require_http_methods(["GET"])
def display_user_profile(request):
    try:
        email = request.GET.get('email', '')
        if email not in users_db:
            raise UserManagementException(f"User not found: {email}")

        user = users_db[email]
        profile_html = f"""
        <h1>User Profile</h1>
        <p>Name: {user['name']}</p>
        <p>Email: {email}</p>
        <p>Age: {user['age']}</p>
        <p>Registered: {user['created_at']}</p>
        """
        logging.info(f"Profile displayed for user: {email}")
        return HttpResponse(profile_html)
    except UserManagementException as e:
        logging.error(f"Error displaying user profile: {str(e)}")
        return HttpResponseBadRequest(str(e))
    except Exception as e:
        logging.error(f"Unexpected error displaying user profile: {str(e)}")
        return HttpResponseBadRequest("An unexpected error occurred")

@require_http_methods(["PUT"])
def update_user_profile(request):
    try:
        data = json.loads(request.body)
        email = data.get('email')
        if email not in users_db:
            raise UserManagementException(f"User not found: {email}")

        user = users_db[email]
        for key in ['name', 'age']:
            if key in data:
                user[key] = sanitize_input(str(data[key]))
        
        logging.info(f"Profile updated for user: {email}")
        return JsonResponse({"message": "Profile updated successfully"})
    except json.JSONDecodeError:
        logging.error("Invalid JSON in update request")
        return HttpResponseBadRequest("Invalid JSON format")
    except UserManagementException as e:
        logging.error(f"Error updating user profile: {str(e)}")
        return HttpResponseBadRequest(str(e))
    except Exception as e:
        logging.error(f"Unexpected error updating user profile: {str(e)}")
        return HttpResponseBadRequest("An unexpected error occurred")

@require_http_methods(["DELETE"])
def delete_user(request):
    try:
        email = request.GET.get('email', '')
        if email not in users_db:
            raise UserManagementException(f"User not found: {email}")

        del users_db[email]
        logging.info(f"User deleted: {email}")
        return HttpResponse(f"User {email} has been deleted")
    except UserManagementException as e:
        logging.error(f"Error deleting user: {str(e)}")
        return HttpResponseBadRequest(str(e))
    except Exception as e:
        logging.error(f"Unexpected error deleting user: {str(e)}")
        return HttpResponseBadRequest("An unexpected error occurred")

def validate_password_strength(password):
    if len(password) < 8:
        return False
    if not re.search(r"[A-Z]", password):
        return False
    if not re.search(r"[a-z]", password):
        return False
    if not re.search(r"\d", password):
        return False
    return True

# CLI for testing
def cli():
    while True:
        print("\n1. Register User")
        print("2. Display User Profile")
        print("3. Update User Profile")
        print("4. Delete User")
        print("5. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            email = input("Enter email: ")
            password = input("Enter password: ")
            name = input("Enter name: ")
            age = input("Enter age: ")
            request = type('Request', (), {'POST': {'email': email, 'password': password, 'name': name, 'age': age}})()
            print(user_registration(request).content.decode())
        elif choice == '2':
            email = input("Enter email: ")
            request = type('Request', (), {'GET': {'email': email}})()
            print(display_user_profile(request).content.decode())
        elif choice == '3':
            email = input("Enter email: ")
            name = input("Enter new name (or press enter to skip): ")
            age = input("Enter new age (or press enter to skip): ")
            data = {'email': email}
            if name:
                data['name'] = name
            if age:
                data['age'] = age
            request = type('Request', (), {'body': json.dumps(data).encode()})()
            print(update_user_profile(request).content.decode())
        elif choice == '4':
            email = input("Enter email: ")
            request = type('Request', (), {'GET': {'email': email}})()
            print(delete_user(request).content.decode())
        elif choice == '5':
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    cli()