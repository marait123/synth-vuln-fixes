import sqlite3
from django.http import HttpResponse
from django.views.decorators.http import require_http_methods
from django.core.validators import validate_email
from django.core.exceptions import ValidationError
from django.utils.html import escape

def init_db():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (email TEXT PRIMARY KEY, name TEXT, age INTEGER, password TEXT, bio TEXT)''')
    conn.commit()
    conn.close()

@require_http_methods(["POST"])
def user_registration(request):
    email = request.POST.get('email', '')
    password = request.POST.get('password', '')
    name = request.POST.get('name', '')
    age = request.POST.get('age', '')
    bio = request.POST.get('bio', '')

    try:
        validate_email(email)
    except ValidationError:
        return HttpResponse("Invalid email provided.", status=400)

    if len(password) < 8:
        return HttpResponse("Password too short.", status=400)

    if not name:
        return HttpResponse("Name is required.", status=400)

    try:
        age = int(age)
    except ValueError:
        return HttpResponse("Invalid age provided.", status=400)

    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("INSERT INTO users (email, name, age, password, bio) VALUES (?, ?, ?, ?, ?)",
              (email, name, age, password, bio))
    conn.commit()
    conn.close()

    return HttpResponse("User successfully registered.")

@require_http_methods(["GET"])
def display_profile(request):
    email = request.GET.get('email', '')
    
    if not email:
        return HttpResponse("Email is required", status=400)

    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE email = ?", (email,))
    user = c.fetchone()
    conn.close()

    if not user:
        return HttpResponse("No user found with the provided email.", status=400)

    profile_html = f"""
    <h1>User Profile</h1>
    <p>Email: {escape(user[0])}</p>
    <p>Name: {escape(user[1])}</p>
    <p>Age: {user[2]}</p>
    <p>Bio: {escape(user[4])}</p>
    """

    return HttpResponse(profile_html)

init_db()