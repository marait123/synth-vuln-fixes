from pyramid.config import Configurator
from pyramid.view import view_config
from pyramid.response import Response
from pyramid.httpexceptions import HTTPFound, HTTPBadRequest
from sqlalchemy import create_engine, Column, Integer, String, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import IntegrityError
import logging
import hashlib
import datetime
import re

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

Base = declarative_base()
engine = create_engine('sqlite:///users.db')
Session = sessionmaker(bind=engine)

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    username = Column(String, unique=True)
    email = Column(String)
    password = Column(String)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)

Base.metadata.create_all(engine)

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def validate_email(email):
    return re.match(r"[^@]+@[^@]+\.[^@]+", email)

@view_config(route_name='home', renderer='string')
def home(request):
    return '<h1>Welcome to our website!</h1><a href="/register">Register</a> | <a href="/login">Login</a>'

@view_config(route_name='register', renderer='string')
def register(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        email = request.POST.get('email')
        password = request.POST.get('password')
        
        if not (username and email and password):
            return HTTPBadRequest('All fields are required')
        
        if not validate_email(email):
            return HTTPBadRequest('Invalid email format')
        
        hashed_password = hash_password(password)
        
        session = Session()
        try:
            new_user = User(username=username, email=email, password=hashed_password)
            session.add(new_user)
            session.commit()
            logger.info(f"New user registered: {username}")
            return HTTPFound(location='/login')
        except IntegrityError:
            session.rollback()
            return HTTPBadRequest('Username already exists')
        finally:
            session.close()
    
    return '''
    <form method="POST">
        <input type="text" name="username" placeholder="Username" required><br>
        <input type="email" name="email" placeholder="Email" required><br>
        <input type="password" name="password" placeholder="Password" required><br>
        <input type="submit" value="Register">
    </form>
    '''

@view_config(route_name='login', renderer='string')
def login(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        
        if not (username and password):
            return HTTPBadRequest('Both username and password are required')
        
        hashed_password = hash_password(password)
        
        session = Session()
        try:
            user = session.query(User).filter_by(username=username, password=hashed_password).first()
            if user:
                logger.info(f"User logged in: {username}")
                return HTTPFound(location=f'/profile?username={username}')
            else:
                return 'Invalid credentials'
        finally:
            session.close()
    
    return '''
    <form method="POST">
        <input type="text" name="username" placeholder="Username" required><br>
        <input type="password" name="password" placeholder="Password" required><br>
        <input type="submit" value="Login">
    </form>
    '''

@view_config(route_name='profile', renderer='string')
def profile(request):
    username = request.params.get('username')
    if not username:
        return HTTPBadRequest('Username is required')
    
    session = Session()
    try:
        user = session.query(User).filter_by(username=username).first()
        if user:
            return f'<h1>Welcome, {username}!</h1><p>Email: {user.email}</p><p>Joined: {user.created_at}</p>'
        else:
            return 'User not found'
    finally:
        session.close()

@view_config(route_name='update_email', renderer='string')
def update_email(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        new_email = request.POST.get('new_email')
        
        if not (username and new_email):
            return HTTPBadRequest('Username and new email are required')
        
        if not validate_email(new_email):
            return HTTPBadRequest('Invalid email format')
        
        session = Session()
        try:
            user = session.query(User).filter_by(username=username).first()
            if user:
                user.email = new_email
                session.commit()
                logger.info(f"Email updated for user: {username}")
                return HTTPFound(location=f'/profile?username={username}')
            else:
                return 'User not found'
        finally:
            session.close()
    
    return '''
    <form method="POST">
        <input type="text" name="username" placeholder="Username" required><br>
        <input type="email" name="new_email" placeholder="New Email" required><br>
        <input type="submit" value="Update Email">
    </form>
    '''

@view_config(route_name='delete_account', renderer='string')
def delete_account(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        
        if not (username and password):
            return HTTPBadRequest('Both username and password are required')
        
        hashed_password = hash_password(password)
        
        session = Session()
        try:
            user = session.query(User).filter_by(username=username, password=hashed_password).first()
            if user:
                session.delete(user)
                session.commit()
                logger.info(f"Account deleted: {username}")
                return HTTPFound(location='/')
            else:
                return 'Invalid credentials'
        finally:
            session.close()
    
    return '''
    <form method="POST">
        <input type="text" name="username" placeholder="Username" required><br>
        <input type="password" name="password" placeholder="Password" required><br>
        <input type="submit" value="Delete Account">
    </form>
    '''

@view_config(route_name='greet', renderer='string')
def greet(request):
    name = request.params.get('name', 'World')
    return Response(f'<body><h1>Hello, {name}!</h1></body>')

def main(global_config, **settings):
    config = Configurator(settings=settings)
    config.add_route('home', '/')
    config.add_route('register', '/register')
    config.add_route('login', '/login')
    config.add_route('profile', '/profile')
    config.add_route('update_email', '/update_email')
    config.add_route('delete_account', '/delete_account')
    config.add_route('greet', '/greet')
    config.scan()
    return config.make_wsgi_app()

if __name__ == '__main__':
    from wsgiref.simple_server import make_server
    app = main({})
    server = make_server('0.0.0.0', 8080, app)
    print('Web server started on http://0.0.0.0:8080')
    server.serve_forever()