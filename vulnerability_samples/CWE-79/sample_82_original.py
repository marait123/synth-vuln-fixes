from aiohttp import web
import asyncio
import json
import logging
import re
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class UserNotFoundException(Exception):
    pass

class InvalidInputException(Exception):
    pass

async def fetch_user_profile(db, username):
    await asyncio.sleep(0.1)
    user = db.get(username)
    if not user:
        raise UserNotFoundException(f"User {username} not found")
    return user

def sanitize_input(input_string):
    return re.sub(r'[<>&]', '', input_string)

async def user_profile(request):
    try:
        username = sanitize_input(request.query.get('username', 'default_user'))
        user_profile = await fetch_user_profile(request.app['db'], username)
        profile_html = f"""
        <html><body>
            <h1>{username}</h1>
            <p>Bio: {user_profile['bio']}</p>
            <p>Email: {user_profile['email']}</p>
            <p>Age: {user_profile['age']}</p>
            <p>Location: {user_profile['location']}</p>
        </body></html>
        """
        logger.info(f"Profile viewed for user: {username}")
        return web.Response(text=profile_html, content_type='text/html')
    except UserNotFoundException as e:
        logger.error(str(e))
        return web.Response(text="User not found", status=404)
    except Exception as e:
        logger.error(f"Error in user_profile: {str(e)}")
        return web.Response(text="An error occurred", status=500)

async def search_users(request):
    query = sanitize_input(request.query.get('q', ''))
    results = [user for user in request.app['db'].keys() if query.lower() in user.lower()]
    results_html = f"<html><body><h1>Search Results for '{query}'</h1><ul>"
    for user in results:
        results_html += f"<li><a href='/profile?username={user}'>{user}</a></li>"
    results_html += "</ul></body></html>"
    logger.info(f"Search performed with query: {query}")
    return web.Response(text=results_html, content_type='text/html')

async def login(request):
    if request.method == 'POST':
        data = await request.post()
        username = sanitize_input(data.get('username', ''))
        password = data.get('password', '')
        if username in request.app['db'] and password == "password":
            logger.info(f"Successful login for user: {username}")
            return web.Response(text=f"<html><body>Welcome, {username}!</body></html>", content_type='text/html')
        else:
            logger.warning(f"Failed login attempt for user: {username}")
    return web.Response(text="<html><body><form method='post'><input name='username'><input name='password' type='password'><button>Login</button></form></body></html>", content_type='text/html')

async def admin_view(request):
    users_list = "<ul>"
    for user, data in request.app['db'].items():
        users_list += f"<li>{user}: {data['bio']}</li>"
    users_list += "</ul>"
    logger.info("Admin view accessed")
    return web.Response(text=f"<html><body><h1>All Users</h1>{users_list}</body></html>", content_type='text/html')

async def create_user(request):
    if request.method == 'POST':
        try:
            data = await request.json()
            username = sanitize_input(data.get('username'))
            if not username:
                raise InvalidInputException("Username is required")
            if username in request.app['db']:
                raise InvalidInputException("Username already exists")
            new_user = {
                "name": sanitize_input(data.get('name', '')),
                "bio": sanitize_input(data.get('bio', '')),
                "email": sanitize_input(data.get('email', '')),
                "age": sanitize_input(data.get('age', '')),
                "location": sanitize_input(data.get('location', '')),
            }
            request.app['db'][username] = new_user
            logger.info(f"New user created: {username}")
            return web.json_response({"status": "success", "message": f"User {username} created"})
        except InvalidInputException as e:
            logger.error(str(e))
            return web.json_response({"status": "error", "message": str(e)}, status=400)
        except Exception as e:
            logger.error(f"Error in create_user: {str(e)}")
            return web.json_response({"status": "error", "message": "An error occurred"}, status=500)
    return web.Response(text="Method not allowed", status=405)

async def update_user(request):
    if request.method == 'PUT':
        try:
            data = await request.json()
            username = sanitize_input(data.get('username'))
            if not username or username not in request.app['db']:
                raise UserNotFoundException(f"User {username} not found")
            user = request.app['db'][username]
            user['bio'] = sanitize_input(data.get('bio', user['bio']))
            user['email'] = sanitize_input(data.get('email', user['email']))
            user['age'] = sanitize_input(data.get('age', user['age']))
            user['location'] = sanitize_input(data.get('location', user['location']))
            logger.info(f"User updated: {username}")
            return web.json_response({"status": "success", "message": f"User {username} updated"})
        except UserNotFoundException as e:
            logger.error(str(e))
            return web.json_response({"status": "error", "message": str(e)}, status=404)
        except Exception as e:
            logger.error(f"Error in update_user: {str(e)}")
            return web.json_response({"status": "error", "message": "An error occurred"}, status=500)
    return web.Response(text="Method not allowed", status=405)

async def delete_user(request):
    if request.method == 'DELETE':
        try:
            data = await request.json()
            username = sanitize_input(data.get('username'))
            if not username or username not in request.app['db']:
                raise UserNotFoundException(f"User {username} not found")
            del request.app['db'][username]
            logger.info(f"User deleted: {username}")
            return web.json_response({"status": "success", "message": f"User {username} deleted"})
        except UserNotFoundException as e:
            logger.error(str(e))
            return web.json_response({"status": "error", "message": str(e)}, status=404)
        except Exception as e:
            logger.error(f"Error in delete_user: {str(e)}")
            return web.json_response({"status": "error", "message": "An error occurred"}, status=500)
    return web.Response(text="Method not allowed", status=405)

async def init_app():
    app = web.Application()
    app.add_routes([
        web.get('/profile', user_profile),
        web.get('/search', search_users),
        web.get('/login', login),
        web.post('/login', login),
        web.get('/admin', admin_view),
        web.post('/user', create_user),
        web.put('/user', update_user),
        web.delete('/user', delete_user)
    ])
    app['db'] = {
        "john_doe": {"name": "John Doe", "bio": "A developer at XYZ corp.", "email": "john@example.com", "age": "30", "location": "New York"},
        "jane_smith": {"name": "Jane Smith", "bio": "Designer and artist", "email": "jane@example.com", "age": "28", "location": "San Francisco"}
    }
    return app

if __name__ == '__main__':
    web.run_app(init_app())