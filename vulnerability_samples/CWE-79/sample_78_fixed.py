import sqlite3
from flask import Flask, request, g, escape, render_template_string

app = Flask(__name__)

DATABASE = 'blog.db'

def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = sqlite3.connect(DATABASE)
        db.row_factory = sqlite3.Row
    return db

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()

def init_db():
    with app.app_context():
        db = get_db()
        with app.open_resource('schema.sql', mode='r') as f:
            db.cursor().executescript(f.read())
        db.commit()

def query_db(query, args=(), one=False):
    cur = get_db().execute(query, args)
    rv = cur.fetchall()
    cur.close()
    return (rv[0] if rv else None) if one else rv

def add_post(title, content):
    query_db('INSERT INTO posts (title, content) VALUES (?, ?)', [title, content])
    get_db().commit()

@app.route('/create_post', methods=['POST'])
def create_post_fixed():
    title = request.form['title']
    content = request.form['content']
    
    if not title or not content:
        return "Title and content are required", 400
    
    if len(title) > 100 or len(content) > 1000:
        return "Title or content too long", 400
    
    add_post(title, content)
    return render_template_string("<h1>{{ title }}</h1><p>{{ content }}</p>", 
                                  title=escape(title), content=escape(content))

@app.route('/posts')
def get_posts():
    posts = query_db('SELECT * FROM posts')
    return render_template_string("""
        <h1>All Posts</h1>
        {% for post in posts %}
            <h2>{{ post['title'] }}</h2>
            <p>{{ post['content'] }}</p>
        {% endfor %}
    """, posts=posts)

if __name__ == '__main__':
    init_db()
    app.run(debug=True)