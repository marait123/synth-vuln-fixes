import sqlite3
import logging
from django.http import HttpResponseBadRequest, HttpResponse, JsonResponse
from django.views.decorators.http import require_http_methods
from django.core.validators import validate_email
from django.core.exceptions import ValidationError
from django.views.decorators.csrf import csrf_exempt
import hashlib
import re

# Configure logging
logging.basicConfig(filename='user_management.log', level=logging.INFO,
                    format='%(asctime)s:%(levelname)s:%(message)s')

class UserManagementException(Exception):
    pass

def init_db():
    try:
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS users
                     (email TEXT PRIMARY KEY, name TEXT, age INTEGER, password TEXT, bio TEXT)''')
        conn.commit()
    except sqlite3.Error as e:
        logging.error(f"Database initialization error: {e}")
        raise UserManagementException("Failed to initialize database")
    finally:
        conn.close()

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def validate_password(password):
    if len(password) < 8:
        raise ValidationError("Password must be at least 8 characters long")
    if not re.search(r"\d", password):
        raise ValidationError("Password must contain at least one digit")
    if not re.search(r"[A-Z]", password):
        raise ValidationError("Password must contain at least one uppercase letter")

@csrf_exempt
@require_http_methods(["POST"])
def user_registration(request):
    try:
        email = request.POST.get('email', '')
        password = request.POST.get('password', '')
        name = request.POST.get('name', '')
        age = request.POST.get('age', '')
        bio = request.POST.get('bio', '')

        validate_email(email)
        validate_password(password)

        if not name:
            raise ValidationError("Name is required")

        try:
            age = int(age)
            if age < 0 or age > 120:
                raise ValueError("Age must be between 0 and 120")
        except ValueError:
            raise ValidationError("Invalid age")

        hashed_password = hash_password(password)

        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute("INSERT INTO users (email, name, age, password, bio) VALUES (?, ?, ?, ?, ?)",
                  (email, name, age, hashed_password, bio))
        conn.commit()
        logging.info(f"User registered: {email}")
        return HttpResponse(f"User registered with email: {email}")
    except ValidationError as e:
        logging.warning(f"Validation error during registration: {str(e)}")
        return HttpResponseBadRequest(str(e))
    except sqlite3.IntegrityError:
        logging.warning(f"Duplicate email registration attempt: {email}")
        return HttpResponseBadRequest(f"User with email {email} already exists")
    except Exception as e:
        logging.error(f"Unexpected error during registration: {str(e)}")
        return HttpResponseBadRequest("An unexpected error occurred")
    finally:
        if 'conn' in locals():
            conn.close()

@require_http_methods(["GET"])
def display_profile(request):
    email = request.GET.get('email', '')
    
    if not email:
        return HttpResponseBadRequest("Email is required")

    try:
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute("SELECT * FROM users WHERE email = ?", (email,))
        user = c.fetchone()

        if not user:
            return HttpResponseBadRequest(f"No user found with email: {email}")

        profile_html = f"""
        <h1>User Profile</h1>
        <p>Email: {user[0]}</p>
        <p>Name: {user[1]}</p>
        <p>Age: {user[2]}</p>
        <p>Bio: {user[4]}</p>
        """

        logging.info(f"Profile displayed for user: {email}")
        return HttpResponse(profile_html)
    except Exception as e:
        logging.error(f"Error displaying profile: {str(e)}")
        return HttpResponseBadRequest("An error occurred while fetching the profile")
    finally:
        if 'conn' in locals():
            conn.close()

@require_http_methods(["POST"])
def update_profile(request):
    email = request.POST.get('email', '')
    name = request.POST.get('name', '')
    age = request.POST.get('age', '')
    bio = request.POST.get('bio', '')

    if not email:
        return HttpResponseBadRequest("Email is required")

    try:
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        
        if name:
            c.execute("UPDATE users SET name = ? WHERE email = ?", (name, email))
        if age:
            age = int(age)
            if age < 0 or age > 120:
                raise ValueError("Age must be between 0 and 120")
            c.execute("UPDATE users SET age = ? WHERE email = ?", (age, email))
        if bio:
            c.execute("UPDATE users SET bio = ? WHERE email = ?", (bio, email))

        conn.commit()
        logging.info(f"Profile updated for user: {email}")
        return HttpResponse(f"Profile updated for email: {email}")
    except ValueError as e:
        logging.warning(f"Invalid data in profile update: {str(e)}")
        return HttpResponseBadRequest(str(e))
    except Exception as e:
        logging.error(f"Error updating profile: {str(e)}")
        return HttpResponseBadRequest("An error occurred while updating the profile")
    finally:
        if 'conn' in locals():
            conn.close()

@require_http_methods(["POST"])
def delete_user(request):
    email = request.POST.get('email', '')
    password = request.POST.get('password', '')

    if not email or not password:
        return HttpResponseBadRequest("Email and password are required")

    try:
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute("SELECT password FROM users WHERE email = ?", (email,))
        stored_password = c.fetchone()

        if not stored_password or stored_password[0] != hash_password(password):
            return HttpResponseBadRequest("Invalid email or password")

        c.execute("DELETE FROM users WHERE email = ?", (email,))
        conn.commit()
        logging.info(f"User deleted: {email}")
        return HttpResponse(f"User with email {email} has been deleted")
    except Exception as e:
        logging.error(f"Error deleting user: {str(e)}")
        return HttpResponseBadRequest("An error occurred while deleting the user")
    finally:
        if 'conn' in locals():
            conn.close()

def list_users():
    try:
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute("SELECT email, name, age FROM users")
        users = c.fetchall()
        return JsonResponse({'users': [{'email': u[0], 'name': u[1], 'age': u[2]} for u in users]})
    except Exception as e:
        logging.error(f"Error listing users: {str(e)}")
        return HttpResponseBadRequest("An error occurred while listing users")
    finally:
        if 'conn' in locals():
            conn.close()

init_db()

if __name__ == "__main__":
    # Simple CLI for testing
    while True:
        print("\n1. Register User")
        print("2. Display Profile")
        print("3. Update Profile")
        print("4. Delete User")
        print("5. List Users")
        print("6. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            email = input("Email: ")
            password = input("Password: ")
            name = input("Name: ")
            age = input("Age: ")
            bio = input("Bio: ")
            print(user_registration({'POST': {'email': email, 'password': password, 'name': name, 'age': age, 'bio': bio}}))
        elif choice == '2':
            email = input("Email: ")
            print(display_profile({'GET': {'email': email}}))
        elif choice == '3':
            email = input("Email: ")
            name = input("New Name (leave blank to skip): ")
            age = input("New Age (leave blank to skip): ")
            bio = input("New Bio (leave blank to skip): ")
            print(update_profile({'POST': {'email': email, 'name': name, 'age': age, 'bio': bio}}))
        elif choice == '4':
            email = input("Email: ")
            password = input("Password: ")
            print(delete_user({'POST': {'email': email, 'password': password}}))
        elif choice == '5':
            print(list_users())
        elif choice == '6':
            break
        else:
            print("Invalid choice. Please try again.")