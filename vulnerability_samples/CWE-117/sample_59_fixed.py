from fastapi import FastAPI, Form, HTTPException, Depends
from fastapi.security import OAuth2PasswordBearer
from pydantic import BaseModel
import logging
import sqlite3
import hashlib
import secrets

app = FastAPI()
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

class User(BaseModel):
    username: str
    password: str

def get_db():
    conn = sqlite3.connect('users.db')
    try:
        yield conn
    finally:
        conn.close()

@app.on_event("startup")
async def startup_event():
    conn = sqlite3.connect('users.db')
    conn.execute('''CREATE TABLE IF NOT EXISTS users
                 (username TEXT PRIMARY KEY, password TEXT, token TEXT)''')
    conn.close()

def hash_password(password: str):
    return hashlib.sha256(password.encode()).hexdigest()

@app.post("/register/")
async def register(user: User, db: sqlite3.Connection = Depends(get_db)):
    hashed_password = hash_password(user.password)
    try:
        db.execute("INSERT INTO users (username, password) VALUES (?, ?)",
                   (user.username, hashed_password))
        db.commit()
        logger.info("New user registered")
        return {"message": "User registered successfully"}
    except sqlite3.IntegrityError:
        raise HTTPException(status_code=400, detail="Username already exists")

@app.post("/login/")
async def login(user: User, db: sqlite3.Connection = Depends(get_db)):
    hashed_password = hash_password(user.password)
    cursor = db.execute("SELECT * FROM users WHERE username = ? AND password = ?",
                        (user.username, hashed_password))
    if user_data := cursor.fetchone():
        token = secrets.token_hex(16)
        db.execute("UPDATE users SET token = ? WHERE username = ?", (token, user.username))
        db.commit()
        logger.info("User logged in")
        return {"access_token": token, "token_type": "bearer"}
    else:
        raise HTTPException(status_code=400, detail="Incorrect username or password")

@app.post("/access/")
async def access(token: str = Form(...), db: sqlite3.Connection = Depends(get_db)):
    logger.critical("Access token received")
    cursor = db.execute("SELECT username FROM users WHERE token = ?", (token,))
    if user := cursor.fetchone():
        return {"message": "Access granted"}
    else:
        raise HTTPException(status_code=401, detail="Invalid token")

@app.get("/protected/")
async def protected_route(token: str = Depends(oauth2_scheme),
                          db: sqlite3.Connection = Depends(get_db)):
    cursor = db.execute("SELECT username FROM users WHERE token = ?", (token,))
    if user := cursor.fetchone():
        logger.info("Protected route accessed")
        return {"message": "This is a protected route."}
    else:
        raise HTTPException(status_code=401, detail="Invalid token")