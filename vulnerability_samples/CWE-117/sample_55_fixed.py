import os
from flask import Flask, request, jsonify, session
from flask_sqlalchemy import SQLAlchemy
import logging
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
app.config['SECRET_KEY'] = os.urandom(24)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
db = SQLAlchemy(app)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(120), nullable=False)

@app.route('/api/data', methods=['GET'])
def get_data():
    logger.info("Received request for data processing")
    data = {"message": "Data processed"}
    return jsonify(data)

@app.route('/api/register', methods=['POST'])
def register():
    data = request.json
    username = data.get('username')
    password = data.get('password')
    
    if User.query.filter_by(username=username).first():
        return jsonify({"error": "Username already exists"}), 400
    
    hashed_password = generate_password_hash(password)
    new_user = User(username=username, password=hashed_password)
    db.session.add(new_user)
    db.session.commit()
    
    logger.info("New user registered")
    return jsonify({"message": "User registered successfully"}), 201

@app.route('/api/login', methods=['POST'])
def login():
    data = request.json
    username = data.get('username')
    
    user = User.query.filter_by(username=username).first()
    if user and check_password_hash(user.password, data.get('password')):
        session['user_id'] = user.id
        logger.info("User logged in")
        return jsonify({"message": "Login successful"}), 200
    else:
        logger.warning("Failed login attempt")
        return jsonify({"error": "Invalid credentials"}), 401

@app.route('/api/logout', methods=['POST'])
def logout():
    user_id = session.pop('user_id', None)
    if user_id:
        logger.info("User logged out")
        return jsonify({"message": "Logout successful"}), 200
    else:
        return jsonify({"error": "No user logged in"}), 400

@app.route('/api/user_data', methods=['GET'])
def get_user_data():
    user_id = session.get('user_id')
    if user_id:
        user = User.query.get(user_id)
        logger.info("User data retrieved")
        return jsonify({"username": user.username}), 200
    else:
        return jsonify({"error": "User not logged in"}), 401

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)