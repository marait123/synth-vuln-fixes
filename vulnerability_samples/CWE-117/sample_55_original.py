import os
from flask import Flask, request, jsonify, session, render_template
from flask_sqlalchemy import SQLAlchemy
import logging
from werkzeug.security import generate_password_hash, check_password_hash
from functools import wraps
import jwt
from datetime import datetime, timedelta

app = Flask(__name__)
app.config['SECRET_KEY'] = os.urandom(24)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(120), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.args.get('token')
        if not token:
            return jsonify({'message': 'Token is missing!'}), 403
        try:
            data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=["HS256"])
        except:
            return jsonify({'message': 'Token is invalid!'}), 403
        return f(*args, **kwargs)
    return decorated

@app.route('/')
def home():
    return render_template('home.html')

@app.route('/api/data', methods=['GET'])
@token_required
def get_data():
    api_key = request.args.get('api_key')
    logger.info("Received request with API Key: %s", api_key)
    data = {"message": "Data processed"}
    return jsonify(data)

@app.route('/api/register', methods=['POST'])
def register():
    data = request.json
    username = data.get('username')
    password = data.get('password')
    email = data.get('email')
    
    if not username or not password or not email:
        return jsonify({"error": "Missing required fields"}), 400
    
    if User.query.filter_by(username=username).first():
        return jsonify({"error": "Username already exists"}), 400
    
    if User.query.filter_by(email=email).first():
        return jsonify({"error": "Email already exists"}), 400
    
    hashed_password = generate_password_hash(password)
    new_user = User(username=username, password=hashed_password, email=email)
    db.session.add(new_user)
    db.session.commit()
    
    logger.info(f"New user registered: {username}")
    return jsonify({"message": "User registered successfully"}), 201

@app.route('/api/login', methods=['POST'])
def login():
    data = request.json
    username = data.get('username')
    password = data.get('password')
    
    user = User.query.filter_by(username=username).first()
    if user and check_password_hash(user.password, password):
        session['user_id'] = user.id
        token = jwt.encode({
            'user': username,
            'exp': datetime.utcnow() + timedelta(minutes=30)
        }, app.config['SECRET_KEY'])
        logger.info(f"User logged in: {username}")
        return jsonify({"message": "Login successful", "token": token}), 200
    else:
        logger.warning(f"Failed login attempt for user: {username}")
        return jsonify({"error": "Invalid credentials"}), 401

@app.route('/api/logout', methods=['POST'])
def logout():
    user_id = session.pop('user_id', None)
    if user_id:
        user = User.query.get(user_id)
        logger.info(f"User logged out: {user.username}")
        return jsonify({"message": "Logout successful"}), 200
    else:
        return jsonify({"error": "No user logged in"}), 400

@app.route('/api/user_data', methods=['GET'])
@token_required
def get_user_data():
    user_id = session.get('user_id')
    if user_id:
        user = User.query.get(user_id)
        logger.info(f"User data retrieved for: {user.username}")
        return jsonify({
            "username": user.username,
            "email": user.email,
            "created_at": user.created_at
        }), 200
    else:
        return jsonify({"error": "User not logged in"}), 401

@app.route('/api/update_user', methods=['PUT'])
@token_required
def update_user():
    user_id = session.get('user_id')
    if not user_id:
        return jsonify({"error": "User not logged in"}), 401
    
    user = User.query.get(user_id)
    data = request.json
    
    if 'username' in data:
        user.username = data['username']
    if 'email' in data:
        user.email = data['email']
    if 'password' in data:
        user.password = generate_password_hash(data['password'])
    
    db.session.commit()
    logger.info(f"User updated: {user.username}")
    return jsonify({"message": "User updated successfully"}), 200

@app.route('/api/delete_user', methods=['DELETE'])
@token_required
def delete_user():
    user_id = session.get('user_id')
    if not user_id:
        return jsonify({"error": "User not logged in"}), 401
    
    user = User.query.get(user_id)
    db.session.delete(user)
    db.session.commit()
    session.pop('user_id', None)
    logger.info(f"User deleted: {user.username}")
    return jsonify({"message": "User deleted successfully"}), 200

@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Not found"}), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"Internal server error: {error}")
    return jsonify({"error": "Internal server error"}), 500

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)