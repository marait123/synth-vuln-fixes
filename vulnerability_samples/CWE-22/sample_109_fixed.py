import os
import time
import logging
from django.http import HttpResponse, StreamingHttpResponse
from django.views.decorators.csrf import csrf_exempt
from urllib.parse import urlparse

logging.basicConfig(filename='file_operations.log', level=logging.INFO)

UPLOAD_DIR = 'uploads'
ALLOWED_EXTENSIONS = ['.docx', '.xlsx']

def download_doc(request):
    parsed_url = urlparse(request.build_absolute_uri())
    base_path = os.path.dirname(parsed_url.path)
    url = request.GET.get('url')
    if url.endswith('.docx'):
        file_name = str(int(time.time())) + '.docx'
    elif url.endswith('.xlsx'):
        file_name = str(int(time.time())) + '.xlsx'
    else:
        return HttpResponse('Invalid file format', status=400)
    
    def file_iterator(_file, chunk_size=512):
        while True:
            c = _file.read(chunk_size)
            if c:
                yield c
            else:
                break
    
    try:
        full_path = os.path.join(base_path, url)
        full_path = os.path.abspath(full_path)
        if not full_path.startswith(os.path.abspath(UPLOAD_DIR)):
            logging.warning(f"Attempted access to unauthorized path: {full_path}")
            return HttpResponse('Access denied', status=403)
        
        with open(full_path, "rb") as _file:
            response = StreamingHttpResponse(file_iterator(_file))
            response['Content-Type'] = 'application/octet-stream'
            response['Content-Disposition'] = f'attachment;filename="{file_name}"'
            logging.info(f"File downloaded: {full_path}")
            return response
    except IOError:
        logging.error(f"File not found: {full_path}")
        return HttpResponse('File not found', status=404)

@csrf_exempt
def upload_file(request):
    if request.method == 'POST':
        file = request.FILES.get('file')
        if file:
            file_extension = os.path.splitext(file.name)[1]
            if file_extension in ALLOWED_EXTENSIONS:
                file_path = os.path.join(UPLOAD_DIR, file.name)
                file_path = os.path.abspath(file_path)
                if not file_path.startswith(os.path.abspath(UPLOAD_DIR)):
                    logging.warning(f"Attempted upload to unauthorized path: {file_path}")
                    return HttpResponse('Access denied', status=403)
                
                with open(file_path, 'wb+') as destination:
                    for chunk in file.chunks():
                        destination.write(chunk)
                logging.info(f"File uploaded: {file_path}")
                return HttpResponse('File uploaded successfully', status=200)
            else:
                logging.warning(f"Invalid file type attempted: {file.name}")
                return HttpResponse('Invalid file type', status=400)
        else:
            return HttpResponse('No file provided', status=400)
    return HttpResponse('Method not allowed', status=405)

def list_files(request):
    files = os.listdir(UPLOAD_DIR)
    file_list = "<br>".join(files)
    return HttpResponse(f"Files in upload directory:<br>{file_list}")

def delete_file(request):
    filename = request.GET.get('filename')
    if filename:
        file_path = os.path.join(UPLOAD_DIR, filename)
        file_path = os.path.abspath(file_path)
        if not file_path.startswith(os.path.abspath(UPLOAD_DIR)):
            logging.warning(f"Attempted deletion of unauthorized file: {file_path}")
            return HttpResponse('Access denied', status=403)
        
        if os.path.exists(file_path):
            os.remove(file_path)
            logging.info(f"File deleted: {file_path}")
            return HttpResponse('File deleted successfully', status=200)
        else:
            logging.warning(f"File not found for deletion: {file_path}")
            return HttpResponse('File not found', status=404)
    return HttpResponse('No filename provided', status=400)