import os
from django.http import FileResponse, Http404, JsonResponse
from django.views import View
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.views.decorators.csrf import csrf_exempt
from django.conf import settings
import logging

logger = logging.getLogger(__name__)

class FileManagementView(View):
    @method_decorator(login_required)
    def get(self, request, *args, **kwargs):
        action = request.GET.get('action', '')
        if action == 'list':
            return self.list_files(request)
        elif action == 'download':
            return self.download_file(request)
        else:
            return JsonResponse({'error': 'Invalid action'}, status=400)

    @method_decorator(csrf_exempt)
    @method_decorator(login_required)
    def post(self, request, *args, **kwargs):
        return self.upload_file(request)

    def list_files(self, request):
        files = os.listdir(settings.UPLOAD_DIR)
        return JsonResponse({'files': files})

    def download_file(self, request):
        file_name = os.path.basename(request.GET.get('filename', ''))
        file_path = os.path.join(settings.UPLOAD_DIR, file_name)
        logger.info(f"User {request.user.username} attempting to download {file_name}")
        if not os.path.isfile(file_path) or not file_path.startswith(settings.UPLOAD_DIR):
            logger.warning(f"Invalid file access attempt: {file_path}")
            raise Http404
        try:
            return FileResponse(open(file_path, 'rb'), as_attachment=True)
        except IOError:
            logger.warning(f"File not found: {file_path}")
            raise Http404

    def upload_file(self, request):
        if 'file' not in request.FILES:
            return JsonResponse({'error': 'No file provided'}, status=400)
        
        uploaded_file = request.FILES['file']
        file_name = os.path.basename(uploaded_file.name)
        file_path = os.path.join(settings.UPLOAD_DIR, file_name)
        
        with open(file_path, 'wb+') as destination:
            for chunk in uploaded_file.chunks():
                destination.write(chunk)
        
        logger.info(f"User {request.user.username} uploaded file: {file_name}")
        return JsonResponse({'message': 'File uploaded successfully'})

# Dummy user authentication
class UserAuthView(View):
    def post(self, request, *args, **kwargs):
        username = request.POST.get('username')
        password = request.POST.get('password')
        # Simplified authentication logic
        if username and password:
            request.session['user'] = username
            return JsonResponse({'message': 'Login successful'})
        return JsonResponse({'error': 'Invalid credentials'}, status=400)

    def delete(self, request, *args, **kwargs):
        request.session.flush()
        return JsonResponse({'message': 'Logout successful'})