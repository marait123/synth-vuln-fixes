import os
import json
import logging
from flask import Flask, request, abort, session, redirect, url_for, jsonify
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.utils import secure_filename
from functools import wraps

app = Flask(__name__)
app.secret_key = 'your_secret_key'
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max upload size

users = {}
user_uploads_dir = "./user_uploads/"
if not os.path.exists(user_uploads_dir):
    os.makedirs(user_uploads_dir)

logging.basicConfig(filename='app.log', level=logging.INFO)

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'username' not in session:
            return abort(401, "Please log in")
        return f(*args, **kwargs)
    return decorated_function

def json_load(file, max_depth=5):
    def hook(obj, current_depth=0):
        if current_depth > max_depth:
            raise ValueError("JSON object too deeply nested")
        if isinstance(obj, dict):
            return {key: hook(value, current_depth + 1) for key, value in obj.items()}
        elif isinstance(obj, list):
            return [hook(elem, current_depth + 1) for elem in obj]
        else:
            return obj
    return json.load(file, object_hook=hook)

@app.route('/register', methods=['POST'])
def register():
    username = request.form.get('username')
    password = request.form.get('password')
    if not username or not password:
        return abort(400, "Username and password are required")
    if username in users:
        return abort(400, "Username already exists")
    users[username] = generate_password_hash(password)
    logging.info(f"User registered: {username}")
    return "User registered successfully"

@app.route('/login', methods=['POST'])
def login():
    username = request.form.get('username')
    password = request.form.get('password')
    if not username or not password:
        return abort(400, "Username and password are required")
    if username not in users or not check_password_hash(users[username], password):
        logging.warning(f"Failed login attempt for user: {username}")
        return abort(401, "Invalid credentials")
    session['username'] = username
    logging.info(f"User logged in: {username}")
    return "Logged in successfully"

@app.route('/logout')
@login_required
def logout():
    username = session.pop('username', None)
    logging.info(f"User logged out: {username}")
    return redirect(url_for('login'))

@app.route('/upload', methods=['POST'])
@login_required
def upload_file():
    if 'file' not in request.files:
        return abort(400, "No file part")
    file = request.files['file']
    if file.filename == '':
        return abort(400, "No selected file")
    if file:
        filename = secure_filename(file.filename)
        file_path = os.path.join(user_uploads_dir, filename)
        file.save(file_path)
        logging.info(f"File uploaded: {filename} by user: {session['username']}")
        return "File uploaded successfully"

@app.route('/list_files')
@login_required
def list_files():
    files = os.listdir(user_uploads_dir)
    return jsonify(files)

@app.route("/process_file", methods=["POST"])
@login_required
def process_file():
    file_name = request.form.get('filename')
    file_type = request.form.get('filetype')
    if not file_name or not file_type:
        return abort(400, "Missing filename or filetype")
    if '..' in file_name or '/' in file_name or file_type not in ['json', 'txt']:
        return abort(400, "Invalid input")
    file_path = os.path.join(user_uploads_dir, f"{file_name}.{file_type}")
    try:
        if file_type == 'json':
            if os.path.getsize(file_path) > 1 * 1024 * 1024:
                return abort(400, "File size exceeds limit")
            with open(file_path, 'r') as file:
                data = json_load(file)
                return jsonify(data)
        elif file_type == 'txt':
            with open(file_path, 'r') as file:
                return file.read()
    except FileNotFoundError:
        logging.error(f"File not found: {file_path}")
        return abort(404, "File not found")
    except ValueError as e:
        logging.error(f"Error processing file {file_path}: {str(e)}")
        return abort(400, str(e))

@app.route('/delete_file', methods=['POST'])
@login_required
def delete_file():
    file_name = request.form.get('filename')
    if not file_name:
        return abort(400, "Missing filename")
    file_path = os.path.join(user_uploads_dir, secure_filename(file_name))
    try:
        os.remove(file_path)
        logging.info(f"File deleted: {file_name} by user: {session['username']}")
        return "File deleted successfully"
    except FileNotFoundError:
        logging.error(f"File not found for deletion: {file_path}")
        return abort(404, "File not found")

@app.route('/update_file', methods=['POST'])
@login_required
def update_file():
    file_name = request.form.get('filename')
    new_content = request.form.get('content')
    if not file_name or new_content is None:
        return abort(400, "Missing filename or content")
    file_path = os.path.join(user_uploads_dir, secure_filename(file_name))
    try:
        with open(file_path, 'w') as file:
            file.write(new_content)
        logging.info(f"File updated: {file_name} by user: {session['username']}")
        return "File updated successfully"
    except FileNotFoundError:
        logging.error(f"File not found for update: {file_path}")
        return abort(404, "File not found")

@app.errorhandler(Exception)
def handle_exception(e):
    logging.error(f"Unhandled exception: {str(e)}")
    return "An unexpected error occurred", 500

if __name__ == '__main__':
    app.run(debug=True)

# Test cases
def run_tests():
    with app.test_client() as client:
        # Test registration
        response = client.post('/register', data={'username': 'testuser', 'password': 'testpass'})
        assert response.status_code == 200

        # Test login
        response = client.post('/login', data={'username': 'testuser', 'password': 'testpass'})
        assert response.status_code == 200

        # Test file upload
        with open('test_file.txt', 'w') as f:
            f.write('Test content')
        with open('test_file.txt', 'rb') as f:
            response = client.post('/upload', data={'file': (f, 'test_file.txt')})
        assert response.status_code == 200

        # Test list files
        response = client.get('/list_files')
        assert response.status_code == 200
        assert 'test_file.txt' in response.get_json()

        # Test process file
        response = client.post('/process_file', data={'filename': 'test_file', 'filetype': 'txt'})
        assert response.status_code == 200
        assert response.data == b'Test content'

        # Test update file
        response = client.post('/update_file', data={'filename': 'test_file.txt', 'content': 'Updated content'})
        assert response.status_code == 200

        # Test delete file
        response = client.post('/delete_file', data={'filename': 'test_file.txt'})
        assert response.status_code == 200

        # Clean up
        os.remove('test_file.txt')

    print("All tests passed!")

if __name__ == '__main__':
    run_tests()
    app.run(debug=True)