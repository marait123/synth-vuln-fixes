from flask import Flask, request, make_response, abort, render_template, redirect, url_for, session
import os
import logging
from werkzeug.security import generate_password_hash, check_password_hash
from functools import wraps
import json
from datetime import datetime

app = Flask(__name__)
app.secret_key = 'your_secret_key'

users = {
    'admin': generate_password_hash('admin_password'),
    'user': generate_password_hash('user_password')
}

logging.basicConfig(filename='app.log', level=logging.INFO)

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'username' not in session:
            return redirect(url_for('login', next=request.url))
        return f(*args, **kwargs)
    return decorated_function

def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'username' not in session or session['username'] != 'admin':
            abort(403)
        return f(*args, **kwargs)
    return decorated_function

@app.route('/')
def home():
    if 'username' in session:
        return f'Welcome, {session["username"]}! <a href="/logout">Logout</a>'
    return 'Welcome! Please <a href="/login">login</a>.'

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if username in users and check_password_hash(users[username], password):
            session['username'] = username
            logging.info(f"User {username} logged in")
            return redirect(url_for('home'))
        logging.warning(f"Failed login attempt for user {username}")
        return 'Invalid username or password'
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logging.info(f"User {session['username']} logged out")
    session.pop('username', None)
    return redirect(url_for('home'))

@app.route('/admin')
@admin_required
def admin_panel():
    return render_template('admin_panel.html')

@app.route('/get-log')
@login_required
def get_log():
    log_file = request.args.get('logfile')
    if not log_file:
        return abort(400, description="Log file not specified")
    try:
        with open(f"./logs/{log_file}", 'r') as file:
            content = file.read()
        response = make_response(content)
        response.headers['Content-Type'] = 'text/plain'
        return response
    except FileNotFoundError:
        abort(404, description="Log file not found")
    except IOError:
        abort(500, description="Error reading log file")

@app.route('/add-log', methods=['POST'])
@admin_required
def add_log():
    log_type = request.form['log_type']
    log_content = request.form['log_content']
    log_file = f"{log_type}_log.txt"
    try:
        with open(f"./logs/{log_file}", 'a') as file:
            file.write(f"{datetime.now().isoformat()} - {log_content}\n")
        logging.info(f"Log added to {log_file}")
        return 'Log added successfully'
    except IOError:
        logging.error(f"Failed to add log to {log_file}")
        abort(500, description="Error writing to log file")

@app.route('/user/create', methods=['POST'])
@admin_required
def create_user():
    username = request.form['username']
    password = request.form['password']
    if username in users:
        return 'Username already exists', 400
    users[username] = generate_password_hash(password)
    logging.info(f"New user created: {username}")
    return 'User created successfully'

@app.route('/user/delete', methods=['POST'])
@admin_required
def delete_user():
    username = request.form['username']
    if username not in users:
        return 'User not found', 404
    del users[username]
    logging.info(f"User deleted: {username}")
    return 'User deleted successfully'

@app.route('/user/list')
@admin_required
def list_users():
    return json.dumps(list(users.keys()))

@app.route('/change-password', methods=['POST'])
@login_required
def change_password():
    old_password = request.form['old_password']
    new_password = request.form['new_password']
    username = session['username']
    if not check_password_hash(users[username], old_password):
        return 'Invalid old password', 400
    users[username] = generate_password_hash(new_password)
    logging.info(f"Password changed for user: {username}")
    return 'Password changed successfully'

@app.errorhandler(404)
def not_found_error(error):
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_error(error):
    return render_template('500.html'), 500

if __name__ == '__main__':
    if not os.path.exists('logs'):
        os.makedirs('logs')
    app.run(debug=True)