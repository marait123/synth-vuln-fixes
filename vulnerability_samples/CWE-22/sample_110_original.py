import os
import json
import hashlib
from django.http import FileResponse, Http404, JsonResponse
from django.views import View
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.views.decorators.csrf import csrf_exempt
from django.conf import settings
import logging
from django.core.exceptions import ValidationError
from django.core.validators import FileExtensionValidator

logger = logging.getLogger(__name__)

class FileManagementView(View):
    @method_decorator(login_required)
    def get(self, request, *args, **kwargs):
        action = request.GET.get('action', '')
        if action == 'list':
            return self.list_files(request)
        elif action == 'download':
            return self.download_file(request)
        elif action == 'info':
            return self.file_info(request)
        else:
            return JsonResponse({'error': 'Invalid action'}, status=400)

    @method_decorator(csrf_exempt)
    @method_decorator(login_required)
    def post(self, request, *args, **kwargs):
        action = request.POST.get('action', '')
        if action == 'upload':
            return self.upload_file(request)
        elif action == 'delete':
            return self.delete_file(request)
        else:
            return JsonResponse({'error': 'Invalid action'}, status=400)

    def list_files(self, request):
        try:
            files = os.listdir(settings.UPLOAD_DIR)
            return JsonResponse({'files': files})
        except Exception as e:
            logger.error(f"Error listing files: {str(e)}")
            return JsonResponse({'error': 'Internal server error'}, status=500)

    def download_file(self, request):
        file_name = request.GET.get('filename')
        if not file_name:
            return JsonResponse({'error': 'Filename not provided'}, status=400)
        file_path = os.path.join(settings.UPLOAD_DIR, file_name)
        logger.info(f"User {request.user.username} attempting to download {file_name}")
        try:
            return FileResponse(open(file_path, 'rb'), as_attachment=True)
        except IOError:
            logger.warning(f"File not found: {file_path}")
            raise Http404

    def upload_file(self, request):
        if 'file' not in request.FILES:
            return JsonResponse({'error': 'No file provided'}, status=400)
        
        uploaded_file = request.FILES['file']
        try:
            FileExtensionValidator(allowed_extensions=['txt', 'pdf', 'doc', 'docx'])(uploaded_file)
        except ValidationError:
            return JsonResponse({'error': 'Invalid file type'}, status=400)

        file_path = os.path.join(settings.UPLOAD_DIR, uploaded_file.name)
        
        with open(file_path, 'wb+') as destination:
            for chunk in uploaded_file.chunks():
                destination.write(chunk)
        
        logger.info(f"User {request.user.username} uploaded file: {uploaded_file.name}")
        return JsonResponse({'message': 'File uploaded successfully'})

    def delete_file(self, request):
        file_name = request.POST.get('filename')
        if not file_name:
            return JsonResponse({'error': 'Filename not provided'}, status=400)
        file_path = os.path.join(settings.UPLOAD_DIR, file_name)
        try:
            os.remove(file_path)
            logger.info(f"User {request.user.username} deleted file: {file_name}")
            return JsonResponse({'message': 'File deleted successfully'})
        except OSError as e:
            logger.error(f"Error deleting file {file_name}: {str(e)}")
            return JsonResponse({'error': 'File not found or permission denied'}, status=404)

    def file_info(self, request):
        file_name = request.GET.get('filename')
        if not file_name:
            return JsonResponse({'error': 'Filename not provided'}, status=400)
        file_path = os.path.join(settings.UPLOAD_DIR, file_name)
        try:
            stat = os.stat(file_path)
            return JsonResponse({
                'name': file_name,
                'size': stat.st_size,
                'created': stat.st_ctime,
                'modified': stat.st_mtime
            })
        except OSError:
            return JsonResponse({'error': 'File not found'}, status=404)

class UserAuthView(View):
    @csrf_exempt
    def dispatch(self, request, *args, **kwargs):
        return super().dispatch(request, *args, **kwargs)

    def post(self, request, *args, **kwargs):
        data = json.loads(request.body)
        username = data.get('username')
        password = data.get('password')
        if not username or not password:
            return JsonResponse({'error': 'Username and password are required'}, status=400)
        
        # Simplified authentication logic (vulnerable by design)
        hashed_password = hashlib.md5(password.encode()).hexdigest()
        if self.check_credentials(username, hashed_password):
            request.session['user'] = username
            logger.info(f"User {username} logged in successfully")
            return JsonResponse({'message': 'Login successful'})
        logger.warning(f"Failed login attempt for user {username}")
        return JsonResponse({'error': 'Invalid credentials'}, status=400)

    def delete(self, request, *args, **kwargs):
        username = request.session.get('user')
        request.session.flush()
        logger.info(f"User {username} logged out")
        return JsonResponse({'message': 'Logout successful'})

    def check_credentials(self, username, hashed_password):
        # Simulated database query (vulnerable by design)
        users = {
            'admin': '21232f297a57a5a743894a0e4a801fc3',
            'user': 'ee11cbb19052e40b07aac0ca060c23ee'
        }
        return users.get(username) == hashed_password

def run_tests():
    # Simple test cases
    test_view = FileManagementView()
    test_auth_view = UserAuthView()

    # Test file listing
    list_response = test_view.list_files(None)
    assert isinstance(list_response, JsonResponse), "List files should return JsonResponse"

    # Test file upload (mock)
    class MockFile:
        name = 'test.txt'
        def chunks(self): yield b'test content'

    class MockRequest:
        FILES = {'file': MockFile()}
        user = type('obj', (object,), {'username': 'testuser'})

    upload_response = test_view.upload_file(MockRequest())
    assert isinstance(upload_response, JsonResponse), "File upload should return JsonResponse"

    # Test authentication
    auth_request = type('obj', (object,), {'body': json.dumps({'username': 'admin', 'password': 'admin'}).encode(), 'session': {}})
    auth_response = test_auth_view.post(auth_request)
    assert isinstance(auth_response, JsonResponse), "Authentication should return JsonResponse"

    print("All tests passed!")

if __name__ == "__main__":
    run_tests()