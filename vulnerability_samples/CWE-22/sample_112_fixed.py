from flask import Flask, request, make_response, abort, render_template, redirect, url_for, session
import os
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
app.secret_key = 'your_secret_key'

users = {
    'admin': generate_password_hash('admin_password'),
    'user': generate_password_hash('user_password')
}

@app.route('/')
def home():
    if 'username' in session:
        return f'Welcome, {session["username"]}! <a href="/logout">Logout</a>'
    return 'Welcome! Please <a href="/login">login</a>.'

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if username in users and check_password_hash(users[username], password):
            session['username'] = username
            return redirect(url_for('home'))
        return 'Invalid username or password'
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.pop('username', None)
    return redirect(url_for('home'))

@app.route('/admin')
def admin_panel():
    if 'username' in session and session['username'] == 'admin':
        return render_template('admin_panel.html')
    return abort(403)

@app.route('/get-log')
def get_log():
    if 'username' not in session:
        return abort(403)
    log_file = request.args.get('logfile')
    if not log_file:
        return abort(400, description="Log file not specified")
    log_file = os.path.basename(log_file)
    log_path = os.path.join('logs', log_file)
    if not os.path.exists(log_path):
        return abort(404, description="Log file not found")
    with open(log_path, 'r') as file:
        content = file.read()
    response = make_response(content)
    response.headers['Content-Type'] = 'text/plain'
    return response

@app.route('/add-log', methods=['POST'])
def add_log():
    if 'username' not in session or session['username'] != 'admin':
        return abort(403)
    log_type = request.form['log_type']
    log_content = request.form['log_content']
    log_file = f"{log_type}_log.txt"
    log_path = os.path.join('logs', log_file)
    with open(log_path, 'a') as file:
        file.write(log_content + '\n')
    return 'Log added successfully'

if __name__ == '__main__':
    if not os.path.exists('logs'):
        os.makedirs('logs')
    app.run(debug=True)