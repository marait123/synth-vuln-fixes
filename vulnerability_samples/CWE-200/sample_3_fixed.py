import os
from bottle import route, run, response, request
import threading
import socket
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Environment variables (normally set externally)
os.environ['SERVER_HOST'] = '127.0.0.1'  # Fixed: Changed to localhost
os.environ['SERVER_PORT'] = '1337'
os.environ['WEB_PORT'] = '8080'

def start_tcp_socket_server():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind((os.environ['SERVER_HOST'], int(os.environ['SERVER_PORT'])))
    s.listen(5)
    logging.info(f"TCP server listening on {os.environ['SERVER_HOST']}:{os.environ['SERVER_PORT']}")

    while True:
        client, addr = s.accept()
        logging.info(f"Accepted connection from {addr}")
        handle_client(client)

def handle_client(client):
    try:
        data = client.recv(1024).decode('utf-8')
        logging.info(f"Received data: {data}")
        response = f"Server received: {data}"
        client.send(response.encode('utf-8'))
    except Exception as e:
        logging.error(f"Error handling client: {e}")
    finally:
        client.close()

@route('/')
def index():
    return response.json({'message': 'Bottle server with TCP socket server'})

@route('/echo', method='POST')
def echo():
    data = request.json
    return response.json({'echo': data})

@route('/status')
def status():
    return response.json({'status': 'running', 'tcp_port': os.environ['SERVER_PORT'], 'web_port': os.environ['WEB_PORT']})

def start_web_server():
    run(host='localhost', port=int(os.environ['WEB_PORT']))

if __name__ == '__main__':
    tcp_thread = threading.Thread(target=start_tcp_socket_server)
    tcp_thread.start()
    
    start_web_server()