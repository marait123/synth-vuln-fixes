import socket
import threading
import sqlite3
from http.server import BaseHTTPRequestHandler, HTTPServer
import json
import base64
import os
import configparser
import logging

# Load configuration
config = configparser.ConfigParser()
config.read('server_config.ini')

# Setup logging
logging.basicConfig(filename='server.log', level=logging.INFO,
                    format='%(asctime)s:%(levelname)s:%(message)s')

# Global database connection
db_conn = sqlite3.connect('users.db', check_same_thread=False)
db_cursor = db_conn.cursor()

# Create users table
db_cursor.execute('''CREATE TABLE IF NOT EXISTS users
                     (id INTEGER PRIMARY KEY, username TEXT, password TEXT)''')
db_conn.commit()

class MyHTTPRequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/users':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            db_cursor.execute("SELECT id, username FROM users")
            users = [{"id": row[0], "username": row[1]} for row in db_cursor.fetchall()]
            self.wfile.write(json.dumps(users).encode())
        else:
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(b"Welcome to the HTTP server!")

    def do_POST(self):
        if self.path == '/users':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            user_data = json.loads(post_data.decode())
            
            # Basic input validation
            if 'username' not in user_data or 'password' not in user_data:
                self.send_error(400, "Missing username or password")
                return

            db_cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)",
                              (user_data['username'], user_data['password']))
            db_conn.commit()
            
            self.send_response(201)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"User created successfully")
            logging.info(f"New user created: {user_data['username']}")

def handle_client(client_socket):
    try:
        while True:
            data = client_socket.recv(1024)
            if not data:
                break
            client_socket.send(data)
    except Exception as e:
        logging.error(f"Error handling client: {str(e)}")
    finally:
        client_socket.close()

def start_http_and_tcp_server():
    http_bind_address = config.get('HTTP', 'bind_address', fallback='127.0.0.1')
    http_port = config.getint('HTTP', 'port', fallback=8000)
    http_server = HTTPServer((http_bind_address, http_port), MyHTTPRequestHandler)
    http_thread = threading.Thread(target=http_server.serve_forever)
    http_thread.start()
    logging.info(f"HTTP server started on {http_bind_address}:{http_port}")

    tcp_bind_address = config.get('TCP', 'bind_address', fallback='127.0.0.1')
    tcp_port = config.getint('TCP', 'port', fallback=9000)
    tcp_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    tcp_server.bind((tcp_bind_address, tcp_port))
    tcp_server.listen(5)
    logging.info(f"TCP server started on {tcp_bind_address}:{tcp_port}")

    while True:
        try:
            client_socket, addr = tcp_server.accept()
            echo_thread = threading.Thread(target=handle_client, args=(client_socket,))
            echo_thread.start()
        except Exception as e:
            logging.error(f"Error accepting connection: {str(e)}")

if __name__ == "__main__":
    start_http_and_tcp_server()