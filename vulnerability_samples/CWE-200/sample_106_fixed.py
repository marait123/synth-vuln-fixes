import socket
import threading
import json
import os

# Simple in-memory key-value store
data_store = {}

def handle_client(client_socket):
    try:
        while True:
            data = client_socket.recv(1024).decode('utf-8')
            if not data:
                break
            
            try:
                request = json.loads(data)
                operation = request.get('operation')
                key = request.get('key')
                value = request.get('value')
                
                if operation == 'get':
                    response = {'result': data_store.get(key, 'Key not found')}
                elif operation == 'set':
                    data_store[key] = value
                    response = {'result': 'Success'}
                else:
                    response = {'result': 'Invalid operation'}
                
                client_socket.sendall(json.dumps(response).encode('utf-8'))
            except json.JSONDecodeError:
                client_socket.sendall(json.dumps({'result': 'Invalid JSON'}).encode('utf-8'))
    finally:
        client_socket.close()

def start_server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    bind_address = os.environ.get('SERVER_BIND_ADDRESS', '127.0.0.1')
    server_socket.bind((bind_address, 8080))
    server_socket.listen(5)
    print(f"Server started on {bind_address} at port 8080.")
    
    while True:
        client_socket, addr = server_socket.accept()
        print(f"Connection from {addr}")
        client_thread = threading.Thread(target=handle_client, args=(client_socket,))
        client_thread.start()

if __name__ == "__main__":
    start_server()