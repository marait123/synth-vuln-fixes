import socket
import threading
import os
from flask import Flask, request, jsonify
import logging

app = Flask(__name__)
data_store = {}
logging.basicConfig(level=logging.INFO)

@app.route('/')
def home():
    return "Welcome to the Advanced Flask App!"

@app.route('/set', methods=['POST'])
def set_value():
    key = request.json.get('key')
    value = request.json.get('value')
    if key and value:
        data_store[key] = value
        return jsonify({"status": "success", "message": f"Set {key}={value}"})
    return jsonify({"status": "error", "message": "Invalid input"}), 400

@app.route('/get/<key>')
def get_value(key):
    value = data_store.get(key)
    if value:
        return jsonify({"status": "success", "value": value})
    return jsonify({"status": "error", "message": "Key not found"}), 404

def handle_socket_connection(conn, addr):
    while True:
        data = conn.recv(1024)
        if not data:
            break
        response = f"Received: {data.decode()}"
        conn.send(response.encode())
    conn.close()

def start_socket():
    host = os.getenv('HOST_ADDRESS', '127.0.0.1')
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind((host, 1337))
    s.listen(5)
    logging.info(f"Socket started on {host}:1337")
    while True:
        conn, addr = s.accept()
        logging.info(f"Connected by {addr}")
        threading.Thread(target=handle_socket_connection, args=(conn, addr)).start()

@app.before_first_request
def initialize():
    threading.Thread(target=start_socket, daemon=True).start()

if __name__ == '__main__':
    app.run(debug=True, host='127.0.0.1', port=5000)