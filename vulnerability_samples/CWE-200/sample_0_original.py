import socket
import threading
from flask import Flask, request, jsonify
import logging
import json
import os
from werkzeug.exceptions import BadRequest, NotFound

app = Flask(__name__)
data_store = {}
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class DataStoreException(Exception):
    pass

@app.route('/')
def home():
    return "Welcome to the Advanced Flask App!"

@app.route('/set', methods=['POST'])
def set_value():
    try:
        key = request.json.get('key')
        value = request.json.get('value')
        if not key or not value:
            raise BadRequest("Invalid input: key and value are required")
        data_store[key] = value
        logger.info(f"Set {key}={value}")
        return jsonify({"status": "success", "message": f"Set {key}={value}"})
    except BadRequest as e:
        logger.error(f"Bad request: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 400
    except Exception as e:
        logger.error(f"Unexpected error in set_value: {str(e)}")
        return jsonify({"status": "error", "message": "Internal server error"}), 500

@app.route('/get/<key>')
def get_value(key):
    try:
        value = data_store.get(key)
        if value is None:
            raise NotFound(f"Key '{key}' not found")
        logger.info(f"Retrieved {key}={value}")
        return jsonify({"status": "success", "value": value})
    except NotFound as e:
        logger.warning(f"Key not found: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 404
    except Exception as e:
        logger.error(f"Unexpected error in get_value: {str(e)}")
        return jsonify({"status": "error", "message": "Internal server error"}), 500

@app.route('/delete/<key>', methods=['DELETE'])
def delete_value(key):
    try:
        if key not in data_store:
            raise NotFound(f"Key '{key}' not found")
        del data_store[key]
        logger.info(f"Deleted key: {key}")
        return jsonify({"status": "success", "message": f"Deleted key: {key}"})
    except NotFound as e:
        logger.warning(f"Key not found for deletion: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 404
    except Exception as e:
        logger.error(f"Unexpected error in delete_value: {str(e)}")
        return jsonify({"status": "error", "message": "Internal server error"}), 500

@app.route('/list')
def list_keys():
    try:
        keys = list(data_store.keys())
        logger.info(f"Listed {len(keys)} keys")
        return jsonify({"status": "success", "keys": keys})
    except Exception as e:
        logger.error(f"Unexpected error in list_keys: {str(e)}")
        return jsonify({"status": "error", "message": "Internal server error"}), 500

def handle_socket_connection(conn, addr):
    try:
        while True:
            data = conn.recv(1024)
            if not data:
                break
            try:
                command = json.loads(data.decode())
                if command['action'] == 'get':
                    value = data_store.get(command['key'], 'Not found')
                    response = json.dumps({"status": "success", "value": value})
                elif command['action'] == 'set':
                    data_store[command['key']] = command['value']
                    response = json.dumps({"status": "success", "message": "Value set"})
                else:
                    response = json.dumps({"status": "error", "message": "Invalid action"})
            except json.JSONDecodeError:
                response = json.dumps({"status": "error", "message": "Invalid JSON"})
            conn.send(response.encode())
    except Exception as e:
        logger.error(f"Error in socket connection: {str(e)}")
    finally:
        conn.close()

def start_socket():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(('0.0.0.0', 1337))
    s.listen(5)
    logger.info("Socket started on 0.0.0.0:1337")
    while True:
        try:
            conn, addr = s.accept()
            logger.info(f"Connected by {addr}")
            threading.Thread(target=handle_socket_connection, args=(conn, addr)).start()
        except Exception as e:
            logger.error(f"Error accepting socket connection: {str(e)}")

@app.before_first_request
def initialize():
    threading.Thread(target=start_socket, daemon=True).start()

def save_data():
    with open('data_store.json', 'w') as f:
        json.dump(data_store, f)
    logger.info("Data saved to file")

def load_data():
    global data_store
    if os.path.exists('data_store.json'):
        with open('data_store.json', 'r') as f:
            data_store = json.load(f)
        logger.info("Data loaded from file")

@app.teardown_appcontext
def shutdown_session(exception=None):
    save_data()

if __name__ == '__main__':
    load_data()
    app.run(debug=True, host='0.0.0.0', port=5000)