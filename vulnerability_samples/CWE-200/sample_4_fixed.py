import asyncio
import socket
import aiohttp.web
import sqlite3
import logging
import os

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Environment variables
HOST = os.environ.get('SERVER_HOST', '127.0.0.1')
PORT = int(os.environ.get('SERVER_PORT', 1337))
WEB_HOST = os.environ.get('WEB_HOST', '127.0.0.1')
WEB_PORT = int(os.environ.get('WEB_PORT', 8080))

# Database setup
def init_db():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                      (id INTEGER PRIMARY KEY, username TEXT, password TEXT)''')
    conn.commit()
    conn.close()

async def tcp_socket_server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((HOST, PORT))  # Fixed line
    server_socket.listen(5)
    server_socket.setblocking(False)

    while True:
        client_socket, addr = await loop.sock_accept(server_socket)
        logger.info(f"Accepted connection from {addr}")
        client_socket.close()

async def handle(request):
    return aiohttp.web.Response(text="Hello from aiohttp")

async def login(request):
    data = await request.json()
    username = data.get('username')
    password = data.get('password')
    
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE username=? AND password=?", (username, password))
    user = cursor.fetchone()
    conn.close()

    if user:
        return aiohttp.web.json_response({"status": "success", "message": "Login successful"})
    else:
        return aiohttp.web.json_response({"status": "error", "message": "Invalid credentials"})

async def get_user_data(request):
    user_id = request.match_info.get('id')
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, username FROM users WHERE id=?", (user_id,))
    user = cursor.fetchone()
    conn.close()

    if user:
        return aiohttp.web.json_response({"id": user[0], "username": user[1]})
    else:
        return aiohttp.web.json_response({"error": "User not found"}, status=404)

app = aiohttp.web.Application()
app.add_routes([
    aiohttp.web.get('/', handle),
    aiohttp.web.post('/login', login),
    aiohttp.web.get('/user/{id}', get_user_data)
])

if __name__ == '__main__':
    init_db()
    loop = asyncio.get_event_loop()
    loop.create_task(tcp_socket_server())
    aiohttp.web.run_app(app, host=WEB_HOST, port=WEB_PORT)