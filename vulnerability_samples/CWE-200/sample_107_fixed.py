import socket
import select
import os
import json
import logging
from datetime import datetime

def load_config():
    with open('server_config.json', 'r') as config_file:
        return json.load(config_file)

def setup_logging():
    logging.basicConfig(filename='server.log', level=logging.INFO,
                        format='%(asctime)s - %(levelname)s - %(message)s')

def handle_request(client_socket):
    request = client_socket.recv(1024).decode('utf-8')
    logging.info(f"Received request: {request.split()[1]}")
    
    path = request.split()[1]
    if path == '/':
        response = "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n<h1>Welcome to the server!</h1>"
    elif path == '/time':
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        response = f"HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\n\r\nCurrent time: {current_time}"
    else:
        response = "HTTP/1.1 404 Not Found\r\nContent-Type: text/plain\r\n\r\n404 Not Found"
    
    client_socket.sendall(response.encode('utf-8'))
    client_socket.close()

def start_multiple_service_server():
    config = load_config()
    setup_logging()

    ipv4_bind_address = config.get('ipv4_bind_address', '127.0.0.1')
    ipv4_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    ipv4_server.bind((ipv4_bind_address, config['ipv4_port']))
    ipv4_server.listen(5)

    ipv6_bind_address = config.get('ipv6_bind_address', '::1')
    ipv6_server = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)
    ipv6_server.bind((ipv6_bind_address, config['ipv6_port']))  # Fixed line
    ipv6_server.listen(5)

    read_sockets = [ipv4_server, ipv6_server]
    logging.info("Multiple service server started on interfaces.")

    while True:
        readable, _, _ = select.select(read_sockets, [], [])
        for sock in readable:
            if sock in [ipv4_server, ipv6_server]:
                client_socket, addr = sock.accept()
                logging.info(f"New connection from {addr}")
                read_sockets.append(client_socket)
            else:
                handle_request(sock)
                read_sockets.remove(sock)

if __name__ == "__main__":
    start_multiple_service_server()