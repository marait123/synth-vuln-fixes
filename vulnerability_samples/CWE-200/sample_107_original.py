import socket
import select
import os
import json
import logging
from datetime import datetime
import sys
import threading
import argparse

class ServerConfig:
    def __init__(self, config_file='server_config.json'):
        self.config = self.load_config(config_file)

    def load_config(self, config_file):
        try:
            with open(config_file, 'r') as file:
                return json.load(file)
        except FileNotFoundError:
            logging.error(f"Configuration file {config_file} not found.")
            sys.exit(1)
        except json.JSONDecodeError:
            logging.error(f"Invalid JSON in configuration file {config_file}.")
            sys.exit(1)

    def get(self, key, default=None):
        return self.config.get(key, default)

class CustomLogger:
    def __init__(self, log_file='server.log'):
        logging.basicConfig(filename=log_file, level=logging.INFO,
                            format='%(asctime)s - %(levelname)s - %(message)s')
        self.logger = logging.getLogger(__name__)

    def info(self, message):
        self.logger.info(message)

    def error(self, message):
        self.logger.error(message)

    def warning(self, message):
        self.logger.warning(message)

class HTTPServer:
    def __init__(self, config, logger):
        self.config = config
        self.logger = logger

    def handle_request(self, client_socket):
        try:
            request = client_socket.recv(1024).decode('utf-8')
            self.logger.info(f"Received request: {request.split()[1]}")
            
            path = request.split()[1]
            if path == '/':
                response = "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n<h1>Welcome to the server!</h1>"
            elif path == '/time':
                current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                response = f"HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\n\r\nCurrent time: {current_time}"
            elif path == '/config':
                response = f"HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{json.dumps(self.config.config)}"
            else:
                response = "HTTP/1.1 404 Not Found\r\nContent-Type: text/plain\r\n\r\n404 Not Found"
            
            client_socket.sendall(response.encode('utf-8'))
        except Exception as e:
            self.logger.error(f"Error handling request: {str(e)}")
        finally:
            client_socket.close()

    def start_server(self):
        ipv4_bind_address = self.config.get('ipv4_bind_address', '127.0.0.1')
        ipv4_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        ipv4_server.bind((ipv4_bind_address, self.config.get('ipv4_port')))
        ipv4_server.listen(5)

        ipv6_server = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)
        ipv6_server.bind(("::", self.config.get('ipv6_port')))  # Vulnerable line
        ipv6_server.listen(5)

        read_sockets = [ipv4_server, ipv6_server]
        self.logger.info("Multiple service server started on interfaces.")

        while True:
            try:
                readable, _, _ = select.select(read_sockets, [], [])
                for sock in readable:
                    if sock in [ipv4_server, ipv6_server]:
                        client_socket, addr = sock.accept()
                        self.logger.info(f"New connection from {addr}")
                        client_thread = threading.Thread(target=self.handle_request, args=(client_socket,))
                        client_thread.start()
                    else:
                        self.handle_request(sock)
                        read_sockets.remove(sock)
            except Exception as e:
                self.logger.error(f"Error in server loop: {str(e)}")

def parse_arguments():
    parser = argparse.ArgumentParser(description="HTTP Server with IPv4 and IPv6 support")
    parser.add_argument('-c', '--config', default='server_config.json', help='Path to the configuration file')
    return parser.parse_args()

def main():
    args = parse_arguments()
    config = ServerConfig(args.config)
    logger = CustomLogger()
    server = HTTPServer(config, logger)

    try:
        server.start_server()
    except KeyboardInterrupt:
        logger.info("Server shutting down.")
        sys.exit(0)

if __name__ == "__main__":
    main()