import boto3
import logging
import json
from botocore.exceptions import ClientError

# Set up logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# DynamoDB client
dynamodb = boto3.client('dynamodb')
TABLE_NAME = 'UserTable'

class DynamoDBError(Exception):
    pass

def query_data(event, context):
    query_filter = event.get('query_filter')
    if not query_filter:
        raise ValueError("Query filter is required")

    try:
        response = dynamodb.query(TableName=TABLE_NAME, QueryFilter=query_filter)
        return response['Items']
    except ClientError as e:
        logger.error(f"Error querying data: {str(e)}")
        raise DynamoDBError(f"Failed to query data: {str(e)}")

def get_user(event, context):
    user_id = event.get('user_id')
    if not user_id:
        raise ValueError("User ID is required")

    try:
        response = dynamodb.get_item(
            TableName=TABLE_NAME,
            Key={'UserId': {'S': user_id}}
        )
        return response.get('Item')
    except ClientError as e:
        logger.error(f"Error getting user: {str(e)}")
        raise DynamoDBError(f"Failed to get user: {str(e)}")

def update_user(event, context):
    user_id = event.get('user_id')
    update_data = event.get('update_data')
    if not user_id or not update_data:
        raise ValueError("User ID and update data are required")

    try:
        response = dynamodb.update_item(
            TableName=TABLE_NAME,
            Key={'UserId': {'S': user_id}},
            AttributeUpdates=update_data
        )
        return response
    except ClientError as e:
        logger.error(f"Error updating user: {str(e)}")
        raise DynamoDBError(f"Failed to update user: {str(e)}")

def create_user(event, context):
    user_data = event.get('user_data')
    if not user_data:
        raise ValueError("User data is required")

    try:
        response = dynamodb.put_item(
            TableName=TABLE_NAME,
            Item=user_data
        )
        return response
    except ClientError as e:
        logger.error(f"Error creating user: {str(e)}")
        raise DynamoDBError(f"Failed to create user: {str(e)}")

def delete_user(event, context):
    user_id = event.get('user_id')
    if not user_id:
        raise ValueError("User ID is required")

    try:
        response = dynamodb.delete_item(
            TableName=TABLE_NAME,
            Key={'UserId': {'S': user_id}}
        )
        return response
    except ClientError as e:
        logger.error(f"Error deleting user: {str(e)}")
        raise DynamoDBError(f"Failed to delete user: {str(e)}")

def main(event, context):
    operation = event.get('operation')
    if not operation:
        raise ValueError("Operation is required")

    operations = {
        'query': query_data,
        'get_user': get_user,
        'update_user': update_user,
        'create_user': create_user,
        'delete_user': delete_user
    }

    if operation not in operations:
        raise ValueError(f"Unsupported operation: {operation}")

    return operations[operation](event, context)

def lambda_handler(event, context):
    try:
        result = main(event, context)
        return {
            'statusCode': 200,
            'body': json.dumps(result)
        }
    except ValueError as e:
        logger.error(f"Validation error: {str(e)}")
        return {
            'statusCode': 400,
            'body': json.dumps({'error': str(e)})
        }
    except DynamoDBError as e:
        logger.error(f"DynamoDB error: {str(e)}")
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)})
        }
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        return {
            'statusCode': 500,
            'body': json.dumps({'error': 'An unexpected error occurred'})
        }

# CLI for testing
if __name__ == '__main__':
    import sys

    def print_usage():
        print("Usage: python script.py <operation> [args...]")
        print("Operations:")
        print("  query <query_filter>")
        print("  get_user <user_id>")
        print("  update_user <user_id> <update_data>")
        print("  create_user <user_data>")
        print("  delete_user <user_id>")

    if len(sys.argv) < 2:
        print_usage()
        sys.exit(1)

    operation = sys.argv[1]
    args = sys.argv[2:]

    event = {'operation': operation}

    if operation == 'query':
        event['query_filter'] = json.loads(args[0])
    elif operation in ['get_user', 'delete_user']:
        event['user_id'] = args[0]
    elif operation == 'update_user':
        event['user_id'] = args[0]
        event['update_data'] = json.loads(args[1])
    elif operation == 'create_user':
        event['user_data'] = json.loads(args[0])
    else:
        print(f"Unknown operation: {operation}")
        print_usage()
        sys.exit(1)

    result = lambda_handler(event, None)
    print(json.dumps(result, indent=2))