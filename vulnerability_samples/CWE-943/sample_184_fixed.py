import boto3
import logging

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def query_data(event, context):
    client = boto3.client('dynamodb')
    table_name = 'UserTable'
    query_filter_key = 'AttributeName'
    query_filter_value = event.get('query_filter_value', 'default_value')
    try:
        response = client.query(
            TableName=table_name,
            QueryFilter={
                query_filter_key: {
                    'AttributeValueList': [{'S': query_filter_value}],
                    'ComparisonOperator': 'EQ'
                }
            }
        )
        return response['Items']
    except Exception as e:
        logger.error(f"Error querying data: {str(e)}")
        raise

def get_user(event, context):
    client = boto3.client('dynamodb')
    table_name = 'UserTable'
    user_id = event.get('user_id')
    if not user_id:
        raise ValueError("User ID is required")
    try:
        response = client.get_item(
            TableName=table_name,
            Key={'UserId': {'S': user_id}}
        )
        return response.get('Item')
    except Exception as e:
        logger.error(f"Error getting user: {str(e)}")
        raise

def update_user(event, context):
    client = boto3.client('dynamodb')
    table_name = 'UserTable'
    user_id = event.get('user_id')
    update_data = event.get('update_data', {})
    if not user_id:
        raise ValueError("User ID is required")
    try:
        attribute_updates = {}
        for key, value in update_data.items():
            attribute_updates[key] = {'Action': 'PUT', 'Value': {'S': str(value)}}
        response = client.update_item(
            TableName=table_name,
            Key={'UserId': {'S': user_id}},
            AttributeUpdates=attribute_updates
        )
        return response
    except Exception as e:
        logger.error(f"Error updating user: {str(e)}")
        raise

def main(event, context):
    operation = event.get('operation')
    if operation == 'query':
        return query_data(event, context)
    elif operation == 'get_user':
        return get_user(event, context)
    elif operation == 'update_user':
        return update_user(event, context)
    else:
        raise ValueError(f"Unsupported operation: {operation}")

# Lambda handler
def lambda_handler(event, context):
    try:
        return main(event, context)
    except Exception as e:
        logger.error(f"Error in lambda_handler: {str(e)}")
        raise