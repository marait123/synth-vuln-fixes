import tornado.ioloop
import tornado.web
from Cryptodome.Cipher import AES
from Cryptodome.Random import get_random_bytes
import base64
import os
import logging

# Key management (still not recommended for production use)
KEY_FILE = "encryption_key.bin"

def get_or_create_key():
    if os.path.exists(KEY_FILE):
        with open(KEY_FILE, "rb") as f:
            return f.read()
    else:
        key = get_random_bytes(32)  # Using 256-bit key for AES-GCM
        with open(KEY_FILE, "wb") as f:
            f.write(key)
        return key

key = get_or_create_key()

class FileEncryptionHandler(tornado.web.RequestHandler):
    def post(self):
        try:
            file_content = self.request.files['file'][0]['body']
            cipher = AES.new(key, AES.MODE_GCM)
            ciphertext, tag = cipher.encrypt_and_digest(file_content)
            encrypted_data = cipher.nonce + ciphertext + tag
            self.write(base64.b64encode(encrypted_data).decode())
        except Exception as e:
            logging.error(f"Encryption error: {str(e)}")
            self.set_status(500)
            self.write({"error": "Encryption failed"})

class FileDecryptionHandler(tornado.web.RequestHandler):
    def post(self):
        try:
            encrypted_data = base64.b64decode(self.get_argument("encrypted_content"))
            nonce = encrypted_data[:16]
            ciphertext = encrypted_data[16:-16]
            tag = encrypted_data[-16:]
            cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
            decrypted_file = cipher.decrypt_and_verify(ciphertext, tag)
            self.write(decrypted_file)
        except Exception as e:
            logging.error(f"Decryption error: {str(e)}")
            self.set_status(500)
            self.write({"error": "Decryption failed"})

class KeyRotationHandler(tornado.web.RequestHandler):
    def post(self):
        global key
        try:
            key = get_random_bytes(32)  # Using 256-bit key for AES-GCM
            with open(KEY_FILE, "wb") as f:
                f.write(key)
            self.write({"message": "Key rotated successfully"})
        except Exception as e:
            logging.error(f"Key rotation error: {str(e)}")
            self.set_status(500)
            self.write({"error": "Key rotation failed"})

def make_app():
    return tornado.web.Application([
        (r"/encrypt_file", FileEncryptionHandler),
        (r"/decrypt_file", FileDecryptionHandler),
        (r"/rotate_key", KeyRotationHandler),
    ])

if __name__ == "__main__":
    app = make_app()
    app.listen(8888)
    logging.basicConfig(level=logging.INFO)
    logging.info("Server started on port 8888")
    tornado.ioloop.IOLoop.current().start()