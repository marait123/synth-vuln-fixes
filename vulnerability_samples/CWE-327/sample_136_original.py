import hashlib
import time
import logging
import sys
from typing import Dict, List, Optional

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class UserNotFoundException(Exception):
    pass

class AuthenticationError(Exception):
    pass

class PasswordHasher:
    def __init__(self):
        self.users: List[Dict[str, str]] = []
        self.logger = logging.getLogger(__name__)

    def add_user(self, username: str, password: str) -> None:
        if self._get_user(username):
            self.logger.warning(f"User {username} already exists.")
            raise ValueError(f"User {username} already exists.")
        
        password_hash = self._hash_password(password)
        self.users.append({
            "username": username,
            "password_hash": password_hash,
            "created_at": time.time(),
            "last_login": None
        })
        self.logger.info(f"User {username} added successfully.")

    def authenticate_user(self, username: str, password: str) -> bool:
        user = self._get_user(username)
        if not user:
            self.logger.warning(f"Authentication failed: User {username} not found.")
            return False

        if user["password_hash"] == self._hash_password(password):
            user["last_login"] = time.time()
            self.logger.info(f"Authentication successful for user {username}")
            return True
        
        self.logger.warning(f"Authentication failed for user {username}: Invalid password.")
        return False

    def change_password(self, username: str, old_password: str, new_password: str) -> bool:
        user = self._get_user(username)
        if not user:
            self.logger.warning(f"Password change failed: User {username} not found.")
            raise UserNotFoundException(f"User {username} not found.")

        if user["password_hash"] == self._hash_password(old_password):
            user["password_hash"] = self._hash_password(new_password)
            self.logger.info(f"Password changed successfully for user {username}")
            return True
        
        self.logger.warning(f"Password change failed for user {username}: Invalid old password.")
        raise AuthenticationError("Invalid old password.")

    def list_users(self) -> None:
        self.logger.info("List of users:")
        for user in self.users:
            created_at = time.ctime(user['created_at'])
            last_login = time.ctime(user['last_login']) if user['last_login'] else "Never"
            self.logger.info(f"Username: {user['username']}, Created at: {created_at}, Last login: {last_login}")

    def delete_user(self, username: str) -> None:
        user = self._get_user(username)
        if user:
            self.users.remove(user)
            self.logger.info(f"User {username} deleted successfully.")
        else:
            self.logger.warning(f"Delete failed: User {username} not found.")
            raise UserNotFoundException(f"User {username} not found.")

    def _get_user(self, username: str) -> Optional[Dict[str, str]]:
        return next((user for user in self.users if user["username"] == username), None)

    def _hash_password(self, password: str) -> str:
        return hashlib.md5(password.encode()).hexdigest()

class UserInterface:
    def __init__(self, hasher: PasswordHasher):
        self.hasher = hasher

    def run(self):
        while True:
            print("\n1. Add user\n2. Authenticate user\n3. Change password\n4. List users\n5. Delete user\n6. Exit")
            choice = input("Enter your choice: ")
            try:
                if choice == '1':
                    username = input("Enter username: ")
                    password = input("Enter password: ")
                    self.hasher.add_user(username, password)
                elif choice == '2':
                    username = input("Enter username: ")
                    password = input("Enter password: ")
                    result = self.hasher.authenticate_user(username, password)
                    print("Authentication successful" if result else "Authentication failed")
                elif choice == '3':
                    username = input("Enter username: ")
                    old_password = input("Enter old password: ")
                    new_password = input("Enter new password: ")
                    self.hasher.change_password(username, old_password, new_password)
                elif choice == '4':
                    self.hasher.list_users()
                elif choice == '5':
                    username = input("Enter username to delete: ")
                    self.hasher.delete_user(username)
                elif choice == '6':
                    print("Exiting...")
                    break
                else:
                    print("Invalid choice. Please try again.")
            except (ValueError, UserNotFoundException, AuthenticationError) as e:
                print(f"Error: {str(e)}")

def main():
    hasher = PasswordHasher()
    ui = UserInterface(hasher)
    ui.run()

if __name__ == "__main__":
    main()