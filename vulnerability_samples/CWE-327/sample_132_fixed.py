import hashlib
import os
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from functools import wraps

app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY')
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///example.db'
db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(120), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    is_admin = db.Column(db.Boolean, default=False)

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        username = request.json.get('username')
        user = User.query.filter_by(username=username).first()
        if not user or not user.is_admin:
            return jsonify({"message": "Admin access required"}), 403
        return f(*args, **kwargs)
    return decorated_function

@app.route('/register', methods=['POST'])
def register():
    username = request.json.get('username')
    password = request.json.get('password')
    email = request.json.get('email')
    hashed_password = hash_password(password)
    new_user = User(username=username, password_hash=hashed_password, email=email)
    db.session.add(new_user)
    db.session.commit()
    return jsonify({"message": "User registered successfully"}), 201

@app.route('/login', methods=['POST'])
def login():
    username = request.json.get('username')
    password = request.json.get('password')
    user = User.query.filter_by(username=username).first()
    if user and user.password_hash == hash_password(password):
        return jsonify({"message": "Login successful"}), 200
    return jsonify({"message": "Invalid credentials"}), 401

@app.route('/profile', methods=['GET', 'PUT'])
def profile():
    username = request.json.get('username')
    user = User.query.filter_by(username=username).first()
    if not user:
        return jsonify({"message": "User not found"}), 404
    
    if request.method == 'GET':
        return jsonify({
            "username": user.username,
            "email": user.email
        }), 200
    elif request.method == 'PUT':
        new_email = request.json.get('email')
        if new_email:
            user.email = new_email
            db.session.commit()
        return jsonify({"message": "Profile updated successfully"}), 200

@app.route('/reset_password', methods=['POST'])
def reset_password():
    username = request.json.get('username')
    new_password = request.json.get('new_password')
    user = User.query.filter_by(username=username).first()
    if not user:
        return jsonify({"message": "User not found"}), 404
    user.password_hash = hash_password(new_password)
    db.session.commit()
    return jsonify({"message": "Password reset successfully"}), 200

@app.route('/admin/users', methods=['GET'])
@admin_required
def get_all_users():
    users = User.query.all()
    user_list = [{"username": user.username, "email": user.email} for user in users]
    return jsonify(user_list), 200

if __name__ == '__main__':
    app.run(debug=True)