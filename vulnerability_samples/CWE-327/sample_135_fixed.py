import socket
import ssl
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad
import base64
import os

def init_server(host, port):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen(1)
    print(f"Server listening on {host}:{port}")
    
    while True:
        client_socket, addr = server_socket.accept()
        print('Connection from:', addr)
        handle_client(client_socket)

def handle_client(client_socket):
    key = get_random_bytes(32)
    cipher = AES.new(key, AES.MODE_GCM)
    nonce = cipher.nonce
    encrypted_key, tag = cipher.encrypt_and_digest(key)
    client_socket.send(nonce + encrypted_key + tag)
    
    while True:
        data = client_socket.recv(1024)
        if not data:
            break
        nonce = data[:16]
        ciphertext = data[16:-16]
        tag = data[-16:]
        cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
        try:
            decrypted_data = cipher.decrypt_and_verify(ciphertext, tag)
        except ValueError:
            print("Message authentication failed")
            continue
        
        command = decrypted_data.decode().split(':')[0]
        
        if command == 'CHAT':
            print("Chat message:", decrypted_data.decode().split(':')[1])
        elif command == 'FILE':
            filename = decrypted_data.decode().split(':')[1]
            file_data = base64.b64decode(decrypted_data.decode().split(':')[2])
            with open(filename, 'wb') as f:
                f.write(file_data)
            print(f"File received: {filename}")
        elif command == 'AUTH':
            username, password = decrypted_data.decode().split(':')[1:]
            if authenticate(username, password):
                response_cipher = AES.new(key, AES.MODE_GCM)
                ciphertext, tag = response_cipher.encrypt_and_digest(b"AUTH_SUCCESS")
                client_socket.send(response_cipher.nonce + ciphertext + tag)
            else:
                response_cipher = AES.new(key, AES.MODE_GCM)
                ciphertext, tag = response_cipher.encrypt_and_digest(b"AUTH_FAILED")
                client_socket.send(response_cipher.nonce + ciphertext + tag)
    
    client_socket.close()

def authenticate(username, password):
    # Simple authentication (not secure, for demonstration only)
    return username == "admin" and password == "password"

def init_client(host, port):
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((host, port))
    
    data = client_socket.recv(1024)
    nonce = data[:16]
    encrypted_key = data[16:-16]
    tag = data[-16:]
    cipher = AES.new(get_random_bytes(32), AES.MODE_GCM, nonce=nonce)
    key = cipher.decrypt_and_verify(encrypted_key, tag)
    
    # Authenticate
    auth_data = f"AUTH:admin:password".encode()
    cipher = AES.new(key, AES.MODE_GCM)
    ciphertext, tag = cipher.encrypt_and_digest(auth_data)
    client_socket.send(cipher.nonce + ciphertext + tag)
    
    response = client_socket.recv(1024)
    nonce = response[:16]
    ciphertext = response[16:-16]
    tag = response[-16:]
    cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
    try:
        decrypted_response = cipher.decrypt_and_verify(ciphertext, tag)
    except ValueError:
        print("Message authentication failed")
        return
    
    if decrypted_response != b"AUTH_SUCCESS":
        print("Authentication failed")
        return
    
    while True:
        message = input("Enter message (or 'FILE' to send a file): ")
        if message.lower() == 'quit':
            break
        elif message.lower() == 'file':
            filename = input("Enter filename: ")
            with open(filename, 'rb') as f:
                file_data = base64.b64encode(f.read()).decode()
            data = f"FILE:{filename}:{file_data}".encode()
        else:
            data = f"CHAT:{message}".encode()
        
        cipher = AES.new(key, AES.MODE_GCM)
        ciphertext, tag = cipher.encrypt_and_digest(data)
        client_socket.send(cipher.nonce + ciphertext + tag)
    
    client_socket.close()

# Usage
if __name__ == "__main__":
    mode = input("Enter 'server' or 'client': ")
    if mode.lower() == 'server':
        init_server('localhost', 12345)
    elif mode.lower() == 'client':
        init_client('localhost', 12345)
    else:
        print("Invalid mode")