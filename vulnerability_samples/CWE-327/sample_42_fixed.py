import jwt
import os
from datetime import datetime, timedelta
from flask import Flask, request, jsonify

app = Flask(__name__)

# Simulated database
users_db = {}

# Secure secret key management
SECRET_KEY = os.environ.get('JWT_SECRET_KEY', 'default_secret_key')

def generate_jwt(payload):
    token = jwt.encode(payload, key=SECRET_KEY, algorithm="HS256")
    return token

def verify_token(token):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
        return payload
    except jwt.ExpiredSignatureError:
        return None
    except jwt.InvalidTokenError:
        return None

@app.route('/register', methods=['POST'])
def register():
    data = request.json
    username = data.get('username')
    password = data.get('password')
    
    if username in users_db:
        return jsonify({"error": "Username already exists"}), 400
    
    users_db[username] = {"password": password, "role": "user"}
    return jsonify({"message": "User registered successfully"}), 201

@app.route('/login', methods=['POST'])
def login():
    data = request.json
    username = data.get('username')
    password = data.get('password')
    
    if username not in users_db or users_db[username]['password'] != password:
        return jsonify({"error": "Invalid credentials"}), 401
    
    payload = {
        "username": username,
        "role": users_db[username]['role'],
        "exp": datetime.utcnow() + timedelta(hours=1)
    }
    token = generate_jwt(payload)
    return jsonify({"token": token}), 200

@app.route('/profile', methods=['GET'])
def profile():
    token = request.headers.get('Authorization')
    if not token:
        return jsonify({"error": "Token is missing"}), 401
    
    payload = verify_token(token)
    if not payload:
        return jsonify({"error": "Invalid or expired token"}), 401
    
    username = payload.get('username')
    return jsonify({"username": username, "role": users_db[username]['role']}), 200

if __name__ == '__main__':
    app.run(debug=True)