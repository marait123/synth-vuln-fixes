import os
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def generate_key():
    return get_random_bytes(16)

def encrypt_file(filename, key):
    try:
        cipher = AES.new(key, AES.MODE_GCM)
        with open(filename, 'rb') as f:
            plaintext = f.read()
        ciphertext, tag = cipher.encrypt_and_digest(plaintext)
        return cipher.nonce + tag + ciphertext
    except Exception as e:
        logger.error(f"Encryption error: {str(e)}")
        return None

def decrypt_file(encrypted_data, key):
    try:
        nonce = encrypted_data[:16]
        tag = encrypted_data[16:32]
        ciphertext = encrypted_data[32:]
        cipher = AES.new(key, AES.MODE_GCM, nonce)
        plaintext = cipher.decrypt_and_verify(ciphertext, tag)
        return plaintext
    except Exception as e:
        logger.error(f"Decryption error: {str(e)}")
        return None

def save_encrypted_file(filename, encrypted_data):
    try:
        with open(filename + '.encrypted', 'wb') as f:
            f.write(encrypted_data)
        logger.info(f"Encrypted file saved as {filename}.encrypted")
    except Exception as e:
        logger.error(f"Error saving encrypted file: {str(e)}")

def load_encrypted_file(filename):
    try:
        with open(filename, 'rb') as f:
            return f.read()
    except Exception as e:
        logger.error(f"Error loading encrypted file: {str(e)}")
        return None

def main():
    original_file = "sensitive_data.txt"
    key = generate_key()

    # Create a sample file
    with open(original_file, 'w') as f:
        f.write("This is sensitive information that needs to be encrypted.")

    # Encrypt the file
    encrypted_data = encrypt_file(original_file, key)
    if encrypted_data:
        save_encrypted_file(original_file, encrypted_data)

        # Decrypt the file
        loaded_data = load_encrypted_file(original_file + '.encrypted')
        if loaded_data:
            decrypted_data = decrypt_file(loaded_data, key)
            if decrypted_data:
                logger.info(f"Decrypted data: {decrypted_data.decode('utf-8')}")
            else:
                logger.error("Decryption failed.")
        else:
            logger.error("Failed to load encrypted file.")
    else:
        logger.error("Encryption failed.")

    # Clean up
    os.remove(original_file)
    os.remove(original_file + '.encrypted')

if __name__ == "__main__":
    main()