import hashlib
import os
import logging
from datetime import datetime

class FileIntegrityChecker:
    def __init__(self, base_directory):
        self.file_hashes = {}
        self.base_directory = base_directory
        logging.basicConfig(filename='integrity_checker.log', level=logging.INFO)

    def add_file(self, file_path):
        try:
            full_path = os.path.join(self.base_directory, file_path)
            hasher = hashlib.sha256()
            with open(full_path, 'rb') as file:
                for chunk in iter(lambda: file.read(4096), b""):
                    hasher.update(chunk)
            self.file_hashes[file_path] = hasher.hexdigest()
            logging.info(f"Added file: {file_path}")
        except Exception as e:
            logging.error(f"Error adding file {file_path}: {str(e)}")

    def check_integrity(self, file_path):
        try:
            if file_path in self.file_hashes:
                full_path = os.path.join(self.base_directory, file_path)
                hasher = hashlib.sha256()  # Fixed: Using SHA256 instead of MD5
                with open(full_path, 'rb') as file:
                    for chunk in iter(lambda: file.read(4096), b""):
                        hasher.update(chunk)
                return hasher.hexdigest() == self.file_hashes[file_path]
            return False
        except Exception as e:
            logging.error(f"Error checking integrity for {file_path}: {str(e)}")
            return False

    def update_file_hash(self, file_path):
        self.add_file(file_path)
        logging.info(f"Updated hash for file: {file_path}")

    def remove_file(self, file_path):
        if file_path in self.file_hashes:
            del self.file_hashes[file_path]
            logging.info(f"Removed file: {file_path}")

    def generate_report(self):
        report = f"Integrity Report - {datetime.now()}\n"
        report += "=" * 40 + "\n"
        for file_path, hash_value in self.file_hashes.items():
            integrity_status = "OK" if self.check_integrity(file_path) else "FAILED"
            report += f"{file_path}: {integrity_status}\n"
        return report

    def scan_directory(self):
        for root, _, files in os.walk(self.base_directory):
            for file in files:
                rel_path = os.path.relpath(os.path.join(root, file), self.base_directory)
                self.add_file(rel_path)

checker = FileIntegrityChecker("/path/to/base/directory")
checker.scan_directory()
print(checker.generate_report())