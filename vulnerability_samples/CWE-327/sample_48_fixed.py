from Cryptodome.Cipher import AES
from Cryptodome.Random import get_random_bytes
import cherrypy
import base64
import json
import os

key = get_random_bytes(16)
users_db = {}

class UserManagementService:
    @cherrypy.expose
    def index(self):
        return "Welcome to User Management Service"

    @cherrypy.expose
    @cherrypy.tools.json_in()
    def register(self):
        data = cherrypy.request.json
        username = data.get('username')
        password = data.get('password')
        if username in users_db:
            return json.dumps({"status": "error", "message": "User already exists"})
        encrypted_password = self.encrypt(password)
        users_db[username] = {"password": encrypted_password, "profile": {}}
        return json.dumps({"status": "success", "message": "User registered successfully"})

    @cherrypy.expose
    @cherrypy.tools.json_in()
    def login(self):
        data = cherrypy.request.json
        username = data.get('username')
        password = data.get('password')
        if username not in users_db:
            return json.dumps({"status": "error", "message": "User not found"})
        stored_password = self.decrypt(users_db[username]["password"])
        if password == stored_password:
            return json.dumps({"status": "success", "message": "Login successful"})
        return json.dumps({"status": "error", "message": "Invalid password"})

    @cherrypy.expose
    @cherrypy.tools.json_in()
    def update_profile(self):
        data = cherrypy.request.json
        username = data.get('username')
        profile_data = data.get('profile')
        if username not in users_db:
            return json.dumps({"status": "error", "message": "User not found"})
        encrypted_profile = self.encrypt(json.dumps(profile_data))
        users_db[username]["profile"] = encrypted_profile
        return json.dumps({"status": "success", "message": "Profile updated successfully"})

    @cherrypy.expose
    @cherrypy.tools.json_in()
    def get_profile(self):
        data = cherrypy.request.json
        username = data.get('username')
        if username not in users_db:
            return json.dumps({"status": "error", "message": "User not found"})
        encrypted_profile = users_db[username]["profile"]
        profile = json.loads(self.decrypt(encrypted_profile))
        return json.dumps({"status": "success", "profile": profile})

    def encrypt(self, data):
        data = data.encode() if isinstance(data, str) else data
        cipher = AES.new(key, AES.MODE_GCM)
        ciphertext, tag = cipher.encrypt_and_digest(data)
        return base64.b64encode(cipher.nonce + tag + ciphertext).decode()

    def decrypt(self, encrypted_data):
        encrypted_data = base64.b64decode(encrypted_data)
        nonce = encrypted_data[:16]
        tag = encrypted_data[16:32]
        ciphertext = encrypted_data[32:]
        cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
        decrypted_data = cipher.decrypt_and_verify(ciphertext, tag)
        return decrypted_data.decode()

if __name__ == '__main__':
    conf = {
        '/': {
            'tools.sessions.on': True,
            'tools.response_headers.on': True,
            'tools.response_headers.headers': [('Content-Type', 'application/json')],
        }
    }
    cherrypy.quickstart(UserManagementService(), '/', conf)