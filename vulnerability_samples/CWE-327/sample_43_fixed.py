from django.http import JsonResponse
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
import json
import base64
import os

users = {}

def validate_input(username, password):
    if not username or not password:
        return False
    if len(username) < 3 or len(password) < 8:
        return False
    return True

def register(request):
    try:
        data = json.loads(request.body)
        username = data.get('username')
        password = data.get('password')

        if not validate_input(username, password):
            return JsonResponse({'error': 'Invalid username or password'}, status=400)

        if username in users:
            return JsonResponse({'error': 'Username already exists'}, status=400)

        key = get_random_bytes(32)
        cipher = AES.new(key, AES.MODE_GCM)
        encrypted_password, tag = cipher.encrypt_and_digest(password.encode())

        users[username] = {
            'password': base64.b64encode(encrypted_password).decode(),
            'nonce': base64.b64encode(cipher.nonce).decode(),
            'tag': base64.b64encode(tag).decode(),
            'key': base64.b64encode(key).decode()
        }

        return JsonResponse({'message': f'User {username} registered successfully with AES-GCM encryption.'})
    except json.JSONDecodeError:
        return JsonResponse({'error': 'Invalid JSON'}, status=400)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

def login(request):
    try:
        data = json.loads(request.body)
        username = data.get('username')
        password = data.get('password')

        if not validate_input(username, password):
            return JsonResponse({'error': 'Invalid username or password'}, status=400)

        if username not in users:
            return JsonResponse({'error': 'User not found'}, status=404)

        user_data = users[username]
        key = base64.b64decode(user_data['key'])
        nonce = base64.b64decode(user_data['nonce'])
        tag = base64.b64decode(user_data['tag'])
        encrypted_password = base64.b64decode(user_data['password'])

        cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
        decrypted_password = cipher.decrypt_and_verify(encrypted_password, tag).decode()

        if password == decrypted_password:
            return JsonResponse({'message': 'Login successful'})
        else:
            return JsonResponse({'error': 'Invalid password'}, status=401)
    except json.JSONDecodeError:
        return JsonResponse({'error': 'Invalid JSON'}, status=400)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

def change_password(request):
    try:
        data = json.loads(request.body)
        username = data.get('username')
        old_password = data.get('old_password')
        new_password = data.get('new_password')

        if not validate_input(username, new_password):
            return JsonResponse({'error': 'Invalid username or new password'}, status=400)

        if username not in users:
            return JsonResponse({'error': 'User not found'}, status=404)

        user_data = users[username]
        key = base64.b64decode(user_data['key'])
        nonce = base64.b64decode(user_data['nonce'])
        tag = base64.b64decode(user_data['tag'])
        encrypted_password = base64.b64decode(user_data['password'])

        cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
        decrypted_password = cipher.decrypt_and_verify(encrypted_password, tag).decode()

        if old_password != decrypted_password:
            return JsonResponse({'error': 'Invalid old password'}, status=401)

        new_key = get_random_bytes(32)
        new_cipher = AES.new(new_key, AES.MODE_GCM)
        new_encrypted_password, new_tag = new_cipher.encrypt_and_digest(new_password.encode())

        users[username] = {
            'password': base64.b64encode(new_encrypted_password).decode(),
            'nonce': base64.b64encode(new_cipher.nonce).decode(),
            'tag': base64.b64encode(new_tag).decode(),
            'key': base64.b64encode(new_key).decode()
        }

        return JsonResponse({'message': 'Password changed successfully'})
    except json.JSONDecodeError:
        return JsonResponse({'error': 'Invalid JSON'}, status=400)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

def delete_user(request):
    try:
        data = json.loads(request.body)
        username = data.get('username')
        password = data.get('password')

        if not validate_input(username, password):
            return JsonResponse({'error': 'Invalid username or password'}, status=400)

        if username not in users:
            return JsonResponse({'error': 'User not found'}, status=404)

        user_data = users[username]
        key = base64.b64decode(user_data['key'])
        nonce = base64.b64decode(user_data['nonce'])
        tag = base64.b64decode(user_data['tag'])
        encrypted_password = base64.b64decode(user_data['password'])

        cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
        decrypted_password = cipher.decrypt_and_verify(encrypted_password, tag).decode()

        if password != decrypted_password:
            return JsonResponse({'error': 'Invalid password'}, status=401)

        del users[username]
        return JsonResponse({'message': f'User {username} deleted successfully'})
    except json.JSONDecodeError:
        return JsonResponse({'error': 'Invalid JSON'}, status=400)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

def list_users(request):
    return JsonResponse({'users': list(users.keys())})