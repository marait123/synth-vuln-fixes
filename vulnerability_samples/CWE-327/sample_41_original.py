import tornado.ioloop
import tornado.web
from Cryptodome.Cipher import AES
from Cryptodome.Util.Padding import pad, unpad
from Cryptodome.Random import get_random_bytes
import base64
import os
import logging
import json
import hashlib
from typing import Dict, Any

# Key management (insecure for demonstration purposes)
KEY_FILE = "encryption_key.bin"
IV_SIZE = 16
SALT_SIZE = 16

def get_or_create_key():
    if os.path.exists(KEY_FILE):
        with open(KEY_FILE, "rb") as f:
            return f.read()
    else:
        key = get_random_bytes(32)
        with open(KEY_FILE, "wb") as f:
            f.write(key)
        return key

key = get_or_create_key()

class CustomException(Exception):
    pass

def derive_key(password: str, salt: bytes) -> bytes:
    return hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000, dklen=32)

class FileEncryptionHandler(tornado.web.RequestHandler):
    def post(self):
        try:
            file_content = self.request.files['file'][0]['body']
            password = self.get_argument("password", "")
            salt = get_random_bytes(SALT_SIZE)
            derived_key = derive_key(password, salt)
            iv = get_random_bytes(IV_SIZE)
            cipher = AES.new(derived_key, AES.MODE_CFB, iv=iv)  # Vulnerable: Using CFB mode without proper authentication
            encrypted_file = cipher.encrypt(pad(file_content, AES.block_size))
            result = salt + iv + encrypted_file
            self.write(base64.b64encode(result).decode())
        except Exception as e:
            logging.error(f"Encryption error: {str(e)}")
            self.set_status(500)
            self.write({"error": "Encryption failed"})

class FileDecryptionHandler(tornado.web.RequestHandler):
    def post(self):
        try:
            encrypted_content = base64.b64decode(self.get_argument("encrypted_content"))
            password = self.get_argument("password", "")
            salt = encrypted_content[:SALT_SIZE]
            iv = encrypted_content[SALT_SIZE:SALT_SIZE+IV_SIZE]
            ciphertext = encrypted_content[SALT_SIZE+IV_SIZE:]
            derived_key = derive_key(password, salt)
            cipher = AES.new(derived_key, AES.MODE_CFB, iv=iv)
            decrypted_file = unpad(cipher.decrypt(ciphertext), AES.block_size)
            self.write(decrypted_file)
        except Exception as e:
            logging.error(f"Decryption error: {str(e)}")
            self.set_status(500)
            self.write({"error": "Decryption failed"})

class KeyRotationHandler(tornado.web.RequestHandler):
    def post(self):
        global key
        try:
            key = get_random_bytes(32)
            with open(KEY_FILE, "wb") as f:
                f.write(key)
            self.write({"message": "Key rotated successfully"})
        except Exception as e:
            logging.error(f"Key rotation error: {str(e)}")
            self.set_status(500)
            self.write({"error": "Key rotation failed"})

class FileListHandler(tornado.web.RequestHandler):
    def get(self):
        try:
            files = os.listdir("encrypted_files")
            self.write({"files": files})
        except Exception as e:
            logging.error(f"File listing error: {str(e)}")
            self.set_status(500)
            self.write({"error": "Failed to list files"})

class FileDeleteHandler(tornado.web.RequestHandler):
    def delete(self, filename):
        try:
            os.remove(os.path.join("encrypted_files", filename))
            self.write({"message": f"File {filename} deleted successfully"})
        except FileNotFoundError:
            self.set_status(404)
            self.write({"error": "File not found"})
        except Exception as e:
            logging.error(f"File deletion error: {str(e)}")
            self.set_status(500)
            self.write({"error": "Failed to delete file"})

def make_app():
    return tornado.web.Application([
        (r"/encrypt_file", FileEncryptionHandler),
        (r"/decrypt_file", FileDecryptionHandler),
        (r"/rotate_key", KeyRotationHandler),
        (r"/list_files", FileListHandler),
        (r"/delete_file/(.+)", FileDeleteHandler),
    ])

def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        filename='app.log'
    )

def init_encrypted_files_dir():
    if not os.path.exists("encrypted_files"):
        os.makedirs("encrypted_files")

class TestHarness:
    @staticmethod
    def run_tests():
        test_file_content = b"This is a test file content."
        password = "testpassword123"

        # Test encryption
        encrypted = TestHarness.test_encryption(test_file_content, password)
        
        # Test decryption
        TestHarness.test_decryption(encrypted, password, test_file_content)
        
        # Test key rotation
        TestHarness.test_key_rotation()

        logging.info("All tests completed successfully.")

    @staticmethod
    def test_encryption(content: bytes, password: str) -> str:
        handler = FileEncryptionHandler(tornado.web.Application(), tornado.httputil.HTTPServerRequest())
        handler.request.files = {'file': [{'body': content}]}
        handler.get_argument = lambda x, default=None: password if x == "password" else default
        handler.write = lambda x: None
        handler.post()
        return handler._write_buffer[0].decode()

    @staticmethod
    def test_decryption(encrypted: str, password: str, original_content: bytes):
        handler = FileDecryptionHandler(tornado.web.Application(), tornado.httputil.HTTPServerRequest())
        handler.get_argument = lambda x, default=None: encrypted if x == "encrypted_content" else password
        handler.write = lambda x: None
        handler.post()
        assert handler._write_buffer[0] == original_content, "Decryption test failed"

    @staticmethod
    def test_key_rotation():
        handler = KeyRotationHandler(tornado.web.Application(), tornado.httputil.HTTPServerRequest())
        handler.write = lambda x: None
        handler.post()
        assert os.path.exists(KEY_FILE), "Key rotation test failed"

if __name__ == "__main__":
    setup_logging()
    init_encrypted_files_dir()
    TestHarness.run_tests()
    app = make_app()
    app.listen(8888)
    logging.info("Server started on port 8888")
    tornado.ioloop.IOLoop.current().start()