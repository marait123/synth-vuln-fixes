from django.shortcuts import render, redirect
from django.http import HttpResponse
from django.contrib.auth.decorators import login_required
from django.core.files.storage import default_storage
from django.conf import settings
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
import os
import logging
import base64
from django.core.exceptions import ValidationError
from django.utils.translation import gettext_lazy as _

logger = logging.getLogger(__name__)

class EncryptionError(Exception):
    pass

class DecryptionError(Exception):
    pass

@login_required
def upload_file(request):
    if request.method == 'POST':
        file = request.FILES.get('file')
        if file:
            try:
                validate_file(file)
                encrypted_content = encrypt_file(file)
                file_name = f"encrypted_{file.name}"
                file_path = os.path.join(settings.MEDIA_ROOT, file_name)
                with open(file_path, 'wb') as f:
                    f.write(encrypted_content)
                logger.info(f"File {file_name} encrypted and saved successfully.")
                return redirect('file_list')
            except ValidationError as e:
                logger.warning(f"Invalid file upload attempt: {str(e)}")
                return render(request, 'upload.html', {'error': str(e)})
            except EncryptionError as e:
                logger.error(f"Error encrypting file: {str(e)}")
                return render(request, 'upload.html', {'error': 'Error encrypting file'})
            except Exception as e:
                logger.critical(f"Unexpected error during file upload: {str(e)}")
                return render(request, 'upload.html', {'error': 'An unexpected error occurred'})
    return render(request, 'upload.html')

def validate_file(file):
    if file.size > 10 * 1024 * 1024:  # 10 MB limit
        raise ValidationError(_('File size cannot exceed 10 MB.'))
    if not file.name.lower().endswith(('.txt', '.pdf', '.doc', '.docx')):
        raise ValidationError(_('Only .txt, .pdf, .doc, and .docx files are allowed.'))

def encrypt_file(file):
    try:
        key = get_random_bytes(16)
        cipher = AES.new(key, AES.MODE_OFB)  # Vulnerable: Using OFB mode without authentication
        ciphertext = cipher.encrypt(file.read())
        return key + cipher.iv + ciphertext
    except Exception as e:
        logger.error(f"Encryption failed: {str(e)}")
        raise EncryptionError("Failed to encrypt file")

@login_required
def file_list(request):
    try:
        files = os.listdir(settings.MEDIA_ROOT)
        encrypted_files = [f for f in files if f.startswith('encrypted_')]
        return render(request, 'file_list.html', {'files': encrypted_files})
    except Exception as e:
        logger.error(f"Error listing files: {str(e)}")
        return render(request, 'file_list.html', {'error': 'Error listing files'})

@login_required
def decrypt_file(request, file_name):
    file_path = os.path.join(settings.MEDIA_ROOT, file_name)
    if os.path.exists(file_path):
        try:
            with open(file_path, 'rb') as f:
                content = f.read()
            decrypted_content = decrypt_content(content)
            original_filename = file_name.replace('encrypted_', '', 1)
            response = HttpResponse(decrypted_content, content_type='application/octet-stream')
            response['Content-Disposition'] = f'attachment; filename="{original_filename}"'
            logger.info(f"File {file_name} decrypted and downloaded successfully.")
            return response
        except DecryptionError as e:
            logger.error(f"Error decrypting file: {str(e)}")
            return HttpResponse("Error decrypting file", status=500)
        except Exception as e:
            logger.critical(f"Unexpected error during file decryption: {str(e)}")
            return HttpResponse("An unexpected error occurred", status=500)
    logger.warning(f"Attempted to decrypt non-existent file: {file_name}")
    return HttpResponse("File not found", status=404)

def decrypt_content(content):
    try:
        key = content[:16]
        iv = content[16:32]
        ciphertext = content[32:]
        cipher = AES.new(key, AES.MODE_OFB, iv)
        return cipher.decrypt(ciphertext)
    except Exception as e:
        logger.error(f"Decryption failed: {str(e)}")
        raise DecryptionError("Failed to decrypt file")

@login_required
def delete_file(request, file_name):
    if request.method == 'POST':
        file_path = os.path.join(settings.MEDIA_ROOT, file_name)
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
                logger.info(f"File {file_name} deleted successfully.")
                return redirect('file_list')
            except Exception as e:
                logger.error(f"Error deleting file {file_name}: {str(e)}")
                return HttpResponse("Error deleting file", status=500)
        logger.warning(f"Attempted to delete non-existent file: {file_name}")
        return HttpResponse("File not found", status=404)
    return HttpResponse("Invalid request method", status=405)

# URLs configuration
from django.urls import path
from . import views

urlpatterns = [
    path('upload/', views.upload_file, name='upload_file'),
    path('files/', views.file_list, name='file_list'),
    path('decrypt/<str:file_name>/', views.decrypt_file, name='decrypt_file'),
    path('delete/<str:file_name>/', views.delete_file, name='delete_file'),
]

# CLI for testing (not for production use)
if __name__ == "__main__":
    import sys
    
    def cli_encrypt_file(filename):
        with open(filename, 'rb') as f:
            content = f.read()
        encrypted = encrypt_file(content)
        with open(f"encrypted_{filename}", 'wb') as f:
            f.write(encrypted)
        print(f"File encrypted and saved as encrypted_{filename}")

    def cli_decrypt_file(filename):
        with open(filename, 'rb') as f:
            content = f.read()
        decrypted = decrypt_content(content)
        with open(f"decrypted_{filename.replace('encrypted_', '')}", 'wb') as f:
            f.write(decrypted)
        print(f"File decrypted and saved as decrypted_{filename.replace('encrypted_', '')}")

    if len(sys.argv) < 3:
        print("Usage: python script.py [encrypt|decrypt] <filename>")
    elif sys.argv[1] == "encrypt":
        cli_encrypt_file(sys.argv[2])
    elif sys.argv[1] == "decrypt":
        cli_decrypt_file(sys.argv[2])
    else:
        print("Invalid command. Use 'encrypt' or 'decrypt'.")