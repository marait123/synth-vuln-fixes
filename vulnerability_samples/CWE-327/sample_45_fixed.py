import os
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from functools import wraps

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///encrypted_data.db'
app.config['SECRET_KEY'] = os.urandom(24)
db = SQLAlchemy(app)
bcrypt = Bcrypt(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(120), nullable=False)

class EncryptedData(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    encrypted_content = db.Column(db.LargeBinary, nullable=False)
    nonce = db.Column(db.LargeBinary, nullable=False)
    tag = db.Column(db.LargeBinary, nullable=False)

def authenticate(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        auth = request.authorization
        if not auth or not check_auth(auth.username, auth.password):
            return jsonify({"message": "Authentication required"}), 401
        return f(*args, **kwargs)
    return decorated

def check_auth(username, password):
    user = User.query.filter_by(username=username).first()
    if user and bcrypt.check_password_hash(user.password, password):
        return True
    return False

@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    hashed_password = bcrypt.generate_password_hash(data['password']).decode('utf-8')
    new_user = User(username=data['username'], password=hashed_password)
    db.session.add(new_user)
    db.session.commit()
    return jsonify({"message": "User registered successfully"}), 201

@app.route('/encrypt', methods=['POST'])
@authenticate
def encrypt_data():
    data = request.get_json()['data'].encode()
    key = get_random_bytes(16)
    cipher = AES.new(key, AES.MODE_GCM)
    ciphertext, tag = cipher.encrypt_and_digest(data)
    
    user = User.query.filter_by(username=request.authorization.username).first()
    new_data = EncryptedData(user_id=user.id, encrypted_content=ciphertext, nonce=cipher.nonce, tag=tag)
    db.session.add(new_data)
    db.session.commit()
    
    return jsonify({"message": "Data encrypted and stored", "data_id": new_data.id}), 200

@app.route('/decrypt/<int:data_id>', methods=['GET'])
@authenticate
def decrypt_data(data_id):
    encrypted_data = EncryptedData.query.get_or_404(data_id)
    user = User.query.filter_by(username=request.authorization.username).first()
    
    if encrypted_data.user_id != user.id:
        return jsonify({"message": "Unauthorized access"}), 403
    
    key = get_random_bytes(16)  # In a real scenario, you'd retrieve the key securely
    cipher = AES.new(key, AES.MODE_GCM, nonce=encrypted_data.nonce)
    try:
        decrypted_data = cipher.decrypt_and_verify(encrypted_data.encrypted_content, encrypted_data.tag)
    except ValueError:
        return jsonify({"message": "Decryption failed: Data may have been tampered with"}), 400
    
    return jsonify({"decrypted_data": decrypted_data.decode()}), 200

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)