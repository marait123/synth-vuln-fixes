import os
import logging
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import padding
from cryptography.exceptions import InvalidKey, InvalidTag

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class EncryptionError(Exception):
    pass

class DecryptionError(Exception):
    pass

class FileIOError(Exception):
    pass

def encrypt_data(data, secret_key):
    try:
        iv = os.urandom(16)
        padder = padding.PKCS7(128).padder()
        padded_data = padder.update(data.encode()) + padder.finalize()
        cipher = Cipher(algorithms.AES(secret_key), modes.CFB(iv), backend=default_backend())
        encryptor = cipher.encryptor()
        encrypted_data = encryptor.update(padded_data) + encryptor.finalize()
        logger.info("Data encrypted successfully")
        return iv + encrypted_data
    except Exception as e:
        logger.error(f"Encryption failed: {str(e)}")
        raise EncryptionError(f"Failed to encrypt data: {str(e)}")

def decrypt_data(encrypted_data, secret_key):
    try:
        iv = encrypted_data[:16]
        encrypted_data = encrypted_data[16:]
        cipher = Cipher(algorithms.AES(secret_key), modes.CFB(iv), backend=default_backend())
        decryptor = cipher.decryptor()
        padded_data = decryptor.update(encrypted_data) + decryptor.finalize()
        unpadder = padding.PKCS7(128).unpadder()
        data = unpadder.update(padded_data) + unpadder.finalize()
        logger.info("Data decrypted successfully")
        return data.decode()
    except (InvalidKey, InvalidTag) as e:
        logger.error(f"Decryption failed due to invalid key or tag: {str(e)}")
        raise DecryptionError(f"Failed to decrypt data: Invalid key or corrupted data")
    except Exception as e:
        logger.error(f"Decryption failed: {str(e)}")
        raise DecryptionError(f"Failed to decrypt data: {str(e)}")

def save_encrypted_data(filename, encrypted_data):
    try:
        with open(filename, 'wb') as file:
            file.write(encrypted_data)
        logger.info(f"Encrypted data saved to {filename}")
    except IOError as e:
        logger.error(f"Failed to save encrypted data: {str(e)}")
        raise FileIOError(f"Failed to save encrypted data to {filename}: {str(e)}")

def load_encrypted_data(filename):
    try:
        with open(filename, 'rb') as file:
            data = file.read()
        logger.info(f"Encrypted data loaded from {filename}")
        return data
    except IOError as e:
        logger.error(f"Failed to load encrypted data: {str(e)}")
        raise FileIOError(f"Failed to load encrypted data from {filename}: {str(e)}")

def get_user_input(prompt):
    while True:
        user_input = input(prompt)
        if user_input.strip():
            return user_input
        print("Input cannot be empty. Please try again.")

def main():
    secret_key = os.urandom(32)
    original_data = get_user_input("Enter the data to encrypt: ")

    try:
        encrypted_data = encrypt_data(original_data, secret_key)
        print("Data encrypted successfully.")

        save_encrypted_data("encrypted.bin", encrypted_data)
        print("Encrypted data saved to 'encrypted.bin'")

        loaded_data = load_encrypted_data("encrypted.bin")
        decrypted_data = decrypt_data(loaded_data, secret_key)

        print(f"Decrypted data: {decrypted_data}")
        print(f"Original data matches decrypted data: {original_data == decrypted_data}")

        # Additional CRUD operations
        update_choice = get_user_input("Do you want to update the encrypted data? (y/n): ").lower()
        if update_choice == 'y':
            new_data = get_user_input("Enter new data to encrypt: ")
            encrypted_data = encrypt_data(new_data, secret_key)
            save_encrypted_data("encrypted.bin", encrypted_data)
            print("Updated encrypted data saved to 'encrypted.bin'")

        delete_choice = get_user_input("Do you want to delete the encrypted file? (y/n): ").lower()
        if delete_choice == 'y':
            os.remove("encrypted.bin")
            print("Encrypted file 'encrypted.bin' deleted.")

    except (EncryptionError, DecryptionError, FileIOError) as e:
        print(f"An error occurred: {str(e)}")
    except Exception as e:
        print(f"An unexpected error occurred: {str(e)}")

if __name__ == "__main__":
    main()