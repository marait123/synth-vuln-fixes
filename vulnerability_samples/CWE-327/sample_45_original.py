import os
import logging
from flask import Flask, request, jsonify, render_template
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from functools import wraps
from datetime import datetime

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///encrypted_data.db'
app.config['SECRET_KEY'] = os.urandom(24)
db = SQLAlchemy(app)
bcrypt = Bcrypt(app)

logging.basicConfig(filename='app.log', level=logging.INFO)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(120), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class EncryptedData(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    encrypted_content = db.Column(db.LargeBinary, nullable=False)
    iv = db.Column(db.LargeBinary, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

def authenticate(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        auth = request.authorization
        if not auth or not check_auth(auth.username, auth.password):
            logging.warning(f"Failed authentication attempt for user: {auth.username if auth else 'Unknown'}")
            return jsonify({"message": "Authentication required"}), 401
        return f(*args, **kwargs)
    return decorated

def check_auth(username, password):
    user = User.query.filter_by(username=username).first()
    if user and bcrypt.check_password_hash(user.password, password):
        return True
    return False

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/register', methods=['POST'])
def register():
    try:
        data = request.get_json()
        if not data or 'username' not in data or 'password' not in data:
            return jsonify({"message": "Invalid input"}), 400
        
        if User.query.filter_by(username=data['username']).first():
            return jsonify({"message": "Username already exists"}), 409
        
        hashed_password = bcrypt.generate_password_hash(data['password']).decode('utf-8')
        new_user = User(username=data['username'], password=hashed_password)
        db.session.add(new_user)
        db.session.commit()
        logging.info(f"New user registered: {data['username']}")
        return jsonify({"message": "User registered successfully"}), 201
    except Exception as e:
        logging.error(f"Error during registration: {str(e)}")
        return jsonify({"message": "An error occurred"}), 500

@app.route('/encrypt', methods=['POST'])
@authenticate
def encrypt_data():
    try:
        data = request.get_json()
        if not data or 'data' not in data:
            return jsonify({"message": "Invalid input"}), 400
        
        plaintext = data['data'].encode()
        key = get_random_bytes(16)
        cipher = AES.new(key, AES.MODE_CTR)
        ciphertext = cipher.encrypt(plaintext)
        
        user = User.query.filter_by(username=request.authorization.username).first()
        new_data = EncryptedData(user_id=user.id, encrypted_content=ciphertext, iv=cipher.nonce)
        db.session.add(new_data)
        db.session.commit()
        
        logging.info(f"Data encrypted for user: {user.username}")
        return jsonify({"message": "Data encrypted and stored", "data_id": new_data.id}), 200
    except Exception as e:
        logging.error(f"Error during encryption: {str(e)}")
        return jsonify({"message": "An error occurred"}), 500

@app.route('/decrypt/<int:data_id>', methods=['GET'])
@authenticate
def decrypt_data(data_id):
    try:
        encrypted_data = EncryptedData.query.get_or_404(data_id)
        user = User.query.filter_by(username=request.authorization.username).first()
        
        if encrypted_data.user_id != user.id:
            logging.warning(f"Unauthorized decryption attempt by user: {user.username}")
            return jsonify({"message": "Unauthorized access"}), 403
        
        key = get_random_bytes(16)  # In a real scenario, you'd retrieve the key securely
        cipher = AES.new(key, AES.MODE_CTR, nonce=encrypted_data.iv)
        decrypted_data = cipher.decrypt(encrypted_data.encrypted_content)
        
        logging.info(f"Data decrypted for user: {user.username}")
        return jsonify({"decrypted_data": decrypted_data.decode()}), 200
    except Exception as e:
        logging.error(f"Error during decryption: {str(e)}")
        return jsonify({"message": "An error occurred"}), 500

@app.route('/user/<int:user_id>', methods=['GET'])
@authenticate
def get_user(user_id):
    user = User.query.get_or_404(user_id)
    return jsonify({"id": user.id, "username": user.username, "created_at": user.created_at}), 200

@app.route('/user/<int:user_id>', methods=['DELETE'])
@authenticate
def delete_user(user_id):
    user = User.query.get_or_404(user_id)
    db.session.delete(user)
    db.session.commit()
    logging.info(f"User deleted: {user.username}")
    return jsonify({"message": "User deleted successfully"}), 200

@app.route('/data', methods=['GET'])
@authenticate
def get_all_data():
    user = User.query.filter_by(username=request.authorization.username).first()
    data = EncryptedData.query.filter_by(user_id=user.id).all()
    return jsonify([{"id": d.id, "created_at": d.created_at} for d in data]), 200

def init_db():
    with app.app_context():
        db.create_all()

if __name__ == '__main__':
    init_db()
    app.run(debug=True)