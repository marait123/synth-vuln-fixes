import sys
import sqlite3
import os
from PyQt5.QtWidgets import QApplication, QWidget, QLineEdit, QVBoxLayout, QPushButton, QLabel, QMessageBox, QMainWindow, QStackedWidget
import hashlib

class Database:
    def __init__(self):
        self.conn = sqlite3.connect('users.db')
        self.cursor = self.conn.cursor()
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS users
                            (username TEXT PRIMARY KEY, password TEXT, salt BLOB)''')
        self.conn.commit()

    def add_user(self, username, password, salt):
        try:
            self.cursor.execute("INSERT INTO users VALUES (?, ?, ?)", (username, password, salt))
            self.conn.commit()
            return True
        except sqlite3.IntegrityError:
            return False

    def check_user(self, username, password):
        self.cursor.execute("SELECT password, salt FROM users WHERE username=?", (username,))
        result = self.cursor.fetchone()
        if result:
            stored_password, salt = result
            hashed_password = hashlib.scrypt(password.encode(), salt=salt, n=16384, r=8, p=1).hex()
            return hashed_password == stored_password
        return False

class RegisterWidget(QWidget):
    def __init__(self, db):
        super().__init__()
        self.db = db
        self.initUI()

    def initUI(self):
        layout = QVBoxLayout()
        self.username = QLineEdit(self)
        self.username.setPlaceholderText("Username")
        self.password = QLineEdit(self)
        self.password.setPlaceholderText("Password")
        self.password.setEchoMode(QLineEdit.Password)
        self.register_button = QPushButton('Register', self)
        self.register_button.clicked.connect(self.on_register)

        layout.addWidget(QLabel("Register"))
        layout.addWidget(self.username)
        layout.addWidget(self.password)
        layout.addWidget(self.register_button)
        self.setLayout(layout)

    def on_register(self):
        username = self.username.text()
        password = self.password.text()
        salt = os.urandom(16)
        hashed_password = hashlib.scrypt(password.encode(), salt=salt, n=16384, r=8, p=1).hex()
        if self.db.add_user(username, hashed_password, salt):
            QMessageBox.information(self, "Success", "Registration successful!")
        else:
            QMessageBox.warning(self, "Error", "Username already exists!")

class LoginWidget(QWidget):
    def __init__(self, db):
        super().__init__()
        self.db = db
        self.initUI()

    def initUI(self):
        layout = QVBoxLayout()
        self.username = QLineEdit(self)
        self.username.setPlaceholderText("Username")
        self.password = QLineEdit(self)
        self.password.setPlaceholderText("Password")
        self.password.setEchoMode(QLineEdit.Password)
        self.login_button = QPushButton('Login', self)
        self.login_button.clicked.connect(self.on_login)

        layout.addWidget(QLabel("Login"))
        layout.addWidget(self.username)
        layout.addWidget(self.password)
        layout.addWidget(self.login_button)
        self.setLayout(layout)

    def on_login(self):
        username = self.username.text()
        password = self.password.text()
        if self.db.check_user(username, password):
            QMessageBox.information(self, "Success", "Login successful!")
        else:
            QMessageBox.warning(self, "Error", "Invalid credentials!")

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.db = Database()
        self.initUI()

    def initUI(self):
        self.setWindowTitle('User Authentication System')
        self.setGeometry(100, 100, 300, 200)

        self.central_widget = QStackedWidget()
        self.setCentralWidget(self.central_widget)

        self.register_widget = RegisterWidget(self.db)
        self.login_widget = LoginWidget(self.db)

        self.central_widget.addWidget(self.register_widget)
        self.central_widget.addWidget(self.login_widget)

        self.show()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = MainWindow()
    sys.exit(app.exec_())