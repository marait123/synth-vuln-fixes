from django.http import JsonResponse
from Crypto.Cipher import DES
import json
import base64
import os
import logging
from django.views.decorators.csrf import csrf_exempt
from django.core.exceptions import ValidationError

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

users = {}

class UserNotFoundException(Exception):
    pass

class InvalidCredentialsException(Exception):
    pass

def pad(text):
    while len(text) % 8 != 0:
        text += ' '
    return text

def validate_input(username, password):
    if not username or not password:
        return False
    if len(username) < 3 or len(password) < 8:
        return False
    return True

def encrypt_password(password):
    key = b'8bytekey'
    des = DES.new(key, DES.MODE_ECB)
    padded_password = pad(password)
    encrypted_password = des.encrypt(padded_password.encode())
    return base64.b64encode(encrypted_password).decode()

def decrypt_password(encrypted_password):
    key = b'8bytekey'
    des = DES.new(key, DES.MODE_ECB)
    decrypted_password = des.decrypt(base64.b64decode(encrypted_password)).decode().strip()
    return decrypted_password

@csrf_exempt
def register(request):
    try:
        data = json.loads(request.body)
        username = data.get('username')
        password = data.get('password')

        if not validate_input(username, password):
            raise ValidationError('Invalid username or password')

        if username in users:
            raise ValidationError('Username already exists')

        users[username] = encrypt_password(password)
        logger.info(f"User {username} registered successfully")
        return JsonResponse({'message': f'User {username} registered successfully with DES encryption.'})
    except json.JSONDecodeError:
        logger.error("Invalid JSON in request")
        return JsonResponse({'error': 'Invalid JSON'}, status=400)
    except ValidationError as e:
        logger.error(f"Validation error: {str(e)}")
        return JsonResponse({'error': str(e)}, status=400)
    except Exception as e:
        logger.error(f"Unexpected error in register: {str(e)}")
        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)

@csrf_exempt
def login(request):
    try:
        data = json.loads(request.body)
        username = data.get('username')
        password = data.get('password')

        if not validate_input(username, password):
            raise ValidationError('Invalid username or password')

        if username not in users:
            raise UserNotFoundException('User not found')

        stored_password = users[username]
        decrypted_password = decrypt_password(stored_password)

        if password != decrypted_password:
            raise InvalidCredentialsException('Invalid password')

        logger.info(f"User {username} logged in successfully")
        return JsonResponse({'message': 'Login successful'})
    except json.JSONDecodeError:
        logger.error("Invalid JSON in request")
        return JsonResponse({'error': 'Invalid JSON'}, status=400)
    except ValidationError as e:
        logger.error(f"Validation error: {str(e)}")
        return JsonResponse({'error': str(e)}, status=400)
    except UserNotFoundException as e:
        logger.error(f"User not found: {str(e)}")
        return JsonResponse({'error': str(e)}, status=404)
    except InvalidCredentialsException as e:
        logger.error(f"Invalid credentials: {str(e)}")
        return JsonResponse({'error': str(e)}, status=401)
    except Exception as e:
        logger.error(f"Unexpected error in login: {str(e)}")
        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)

@csrf_exempt
def change_password(request):
    try:
        data = json.loads(request.body)
        username = data.get('username')
        old_password = data.get('old_password')
        new_password = data.get('new_password')

        if not validate_input(username, new_password):
            raise ValidationError('Invalid username or new password')

        if username not in users:
            raise UserNotFoundException('User not found')

        stored_password = users[username]
        decrypted_password = decrypt_password(stored_password)

        if old_password != decrypted_password:
            raise InvalidCredentialsException('Invalid old password')

        users[username] = encrypt_password(new_password)
        logger.info(f"Password changed successfully for user {username}")
        return JsonResponse({'message': 'Password changed successfully'})
    except json.JSONDecodeError:
        logger.error("Invalid JSON in request")
        return JsonResponse({'error': 'Invalid JSON'}, status=400)
    except ValidationError as e:
        logger.error(f"Validation error: {str(e)}")
        return JsonResponse({'error': str(e)}, status=400)
    except UserNotFoundException as e:
        logger.error(f"User not found: {str(e)}")
        return JsonResponse({'error': str(e)}, status=404)
    except InvalidCredentialsException as e:
        logger.error(f"Invalid credentials: {str(e)}")
        return JsonResponse({'error': str(e)}, status=401)
    except Exception as e:
        logger.error(f"Unexpected error in change_password: {str(e)}")
        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)

@csrf_exempt
def delete_user(request):
    try:
        data = json.loads(request.body)
        username = data.get('username')
        password = data.get('password')

        if not validate_input(username, password):
            raise ValidationError('Invalid username or password')

        if username not in users:
            raise UserNotFoundException('User not found')

        stored_password = users[username]
        decrypted_password = decrypt_password(stored_password)

        if password != decrypted_password:
            raise InvalidCredentialsException('Invalid password')

        del users[username]
        logger.info(f"User {username} deleted successfully")
        return JsonResponse({'message': f'User {username} deleted successfully'})
    except json.JSONDecodeError:
        logger.error("Invalid JSON in request")
        return JsonResponse({'error': 'Invalid JSON'}, status=400)
    except ValidationError as e:
        logger.error(f"Validation error: {str(e)}")
        return JsonResponse({'error': str(e)}, status=400)
    except UserNotFoundException as e:
        logger.error(f"User not found: {str(e)}")
        return JsonResponse({'error': str(e)}, status=404)
    except InvalidCredentialsException as e:
        logger.error(f"Invalid credentials: {str(e)}")
        return JsonResponse({'error': str(e)}, status=401)
    except Exception as e:
        logger.error(f"Unexpected error in delete_user: {str(e)}")
        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)

@csrf_exempt
def list_users(request):
    try:
        user_list = list(users.keys())
        logger.info("User list retrieved successfully")
        return JsonResponse({'users': user_list})
    except Exception as e:
        logger.error(f"Unexpected error in list_users: {str(e)}")
        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)

def run_tests():
    test_user = "testuser"
    test_password = "testpassword123"

    # Test registration
    register_data = json.dumps({"username": test_user, "password": test_password})
    register_response = register(type('Request', (), {'body': register_data})())
    assert json.loads(register_response.content)['message'] == f'User {test_user} registered successfully with DES encryption.'

    # Test login
    login_data = json.dumps({"username": test_user, "password": test_password})
    login_response = login(type('Request', (), {'body': login_data})())
    assert json.loads(login_response.content)['message'] == 'Login successful'

    # Test change password
    change_password_data = json.dumps({"username": test_user, "old_password": test_password, "new_password": "newpassword123"})
    change_password_response = change_password(type('Request', (), {'body': change_password_data})())
    assert json.loads(change_password_response.content)['message'] == 'Password changed successfully'

    # Test delete user
    delete_user_data = json.dumps({"username": test_user, "password": "newpassword123"})
    delete_user_response = delete_user(type('Request', (), {'body': delete_user_data})())
    assert json.loads(delete_user_response.content)['message'] == f'User {test_user} deleted successfully'

    print("All tests passed successfully!")

if __name__ == "__main__":
    run_tests()