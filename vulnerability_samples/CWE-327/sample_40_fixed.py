from fastapi import FastAPI, Depends, HTTPException
from pydantic import BaseModel
import jwt
from typing import Dict, List
import os
from datetime import datetime, timedelta

app = FastAPI()

class User(BaseModel):
    username: str
    email: str
    full_name: str

class UserInDB(User):
    password: str

users_db: Dict[str, UserInDB] = {}

SECRET_KEY = os.getenv("SECRET_KEY")
if not SECRET_KEY:
    raise RuntimeError("SECRET_KEY environment variable not set")

ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

def create_access_token(data: dict):
    to_encode = data.copy()
    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

def get_current_user(token: str = Depends()):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username = payload.get("username")
        if username not in users_db:
            raise HTTPException(status_code=401, detail="User not found")
        return users_db[username]
    except jwt.PyJWTError:
        raise HTTPException(status_code=401, detail="Invalid authentication credentials")

@app.post("/register")
def register(user: UserInDB):
    if user.username in users_db:
        raise HTTPException(status_code=400, detail="Username already registered")
    users_db[user.username] = user
    return {"message": "User registered successfully"}

@app.post("/login")
def login(username: str, password: str):
    if username not in users_db or users_db[username].password != password:
        raise HTTPException(status_code=401, detail="Invalid username or password")
    access_token = create_access_token(data={"username": username})
    return {"access_token": access_token, "token_type": "bearer"}

@app.get("/users/me", response_model=User)
def read_users_me(current_user: UserInDB = Depends(get_current_user)):
    return current_user

@app.get("/users", response_model=List[User])
def read_users(current_user: UserInDB = Depends(get_current_user)):
    return list(users_db.values())

@app.put("/users/me", response_model=User)
def update_user(user_update: User, current_user: UserInDB = Depends(get_current_user)):
    current_user.email = user_update.email
    current_user.full_name = user_update.full_name
    users_db[current_user.username] = current_user
    return current_user