import os
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import padding

def encrypt_data(data, secret_key):
    iv = os.urandom(16)
    padder = padding.PKCS7(128).padder()
    padded_data = padder.update(data.encode()) + padder.finalize()
    cipher = Cipher(algorithms.AES(secret_key), modes.GCM(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()
    return iv + encrypted_data + encryptor.tag

def decrypt_data(encrypted_data, secret_key):
    iv = encrypted_data[:16]
    tag = encrypted_data[-16:]
    encrypted_data = encrypted_data[16:-16]
    cipher = Cipher(algorithms.AES(secret_key), modes.GCM(iv, tag), backend=default_backend())
    decryptor = cipher.decryptor()
    padded_data = decryptor.update(encrypted_data) + decryptor.finalize()
    unpadder = padding.PKCS7(128).unpadder()
    data = unpadder.update(padded_data) + unpadder.finalize()
    return data.decode()

def save_encrypted_data(filename, encrypted_data):
    with open(filename, 'wb') as file:
        file.write(encrypted_data)

def load_encrypted_data(filename):
    with open(filename, 'rb') as file:
        return file.read()

def main():
    secret_key = os.urandom(32)
    original_data = input("Enter the data to encrypt: ")

    try:
        encrypted_data = encrypt_data(original_data, secret_key)
        print("Data encrypted successfully.")

        save_encrypted_data("encrypted.bin", encrypted_data)
        print("Encrypted data saved to 'encrypted.bin'")

        loaded_data = load_encrypted_data("encrypted.bin")
        decrypted_data = decrypt_data(loaded_data, secret_key)

        print(f"Decrypted data: {decrypted_data}")
        print(f"Original data matches decrypted data: {original_data == decrypted_data}")
    except Exception as e:
        print(f"An error occurred: {str(e)}")

if __name__ == "__main__":
    main()