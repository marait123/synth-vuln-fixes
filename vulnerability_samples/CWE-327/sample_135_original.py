import socket
import ssl
from Crypto.Cipher import ARC4
from Crypto.Random import get_random_bytes
import base64
import os
import logging
import json
import threading
import time

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class CustomException(Exception):
    pass

class Server:
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.server_socket = None
        self.clients = []

    def start(self):
        try:
            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.server_socket.bind((self.host, self.port))
            self.server_socket.listen(5)
            logging.info(f"Server listening on {self.host}:{self.port}")

            while True:
                client_socket, addr = self.server_socket.accept()
                logging.info(f'Connection from: {addr}')
                client_thread = threading.Thread(target=self.handle_client, args=(client_socket,))
                client_thread.start()
                self.clients.append(client_thread)
        except Exception as e:
            logging.error(f"Server error: {str(e)}")
        finally:
            if self.server_socket:
                self.server_socket.close()

    def handle_client(self, client_socket):
        try:
            key = get_random_bytes(16)
            cipher = ARC4.new(key)
            encrypted_key = cipher.encrypt(key)
            client_socket.send(encrypted_key)

            while True:
                data = client_socket.recv(1024)
                if not data:
                    break
                decrypted_data = cipher.decrypt(data)
                command, *args = decrypted_data.decode().split(':')

                if command == 'CHAT':
                    logging.info(f"Chat message: {args[0]}")
                elif command == 'FILE':
                    filename, file_data = args
                    self.save_file(filename, file_data)
                elif command == 'AUTH':
                    username, password = args
                    if self.authenticate(username, password):
                        client_socket.send(cipher.encrypt(b"AUTH_SUCCESS"))
                    else:
                        client_socket.send(cipher.encrypt(b"AUTH_FAILED"))
                else:
                    logging.warning(f"Unknown command: {command}")
        except Exception as e:
            logging.error(f"Client handling error: {str(e)}")
        finally:
            client_socket.close()

    def save_file(self, filename, file_data):
        try:
            with open(filename, 'wb') as f:
                f.write(base64.b64decode(file_data))
            logging.info(f"File received: {filename}")
        except Exception as e:
            logging.error(f"Error saving file: {str(e)}")

    def authenticate(self, username, password):
        # Simple authentication (not secure, for demonstration only)
        return username == "admin" and password == "password"

class Client:
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.client_socket = None
        self.cipher = None

    def connect(self):
        try:
            self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.client_socket.connect((self.host, self.port))

            encrypted_key = self.client_socket.recv(1024)
            key = ARC4.new(encrypted_key).decrypt(encrypted_key)
            self.cipher = ARC4.new(key)

            if not self.authenticate():
                raise CustomException("Authentication failed")

            self.main_loop()
        except Exception as e:
            logging.error(f"Client error: {str(e)}")
        finally:
            if self.client_socket:
                self.client_socket.close()

    def authenticate(self):
        auth_data = f"AUTH:admin:password".encode()
        self.client_socket.send(self.cipher.encrypt(auth_data))
        response = self.cipher.decrypt(self.client_socket.recv(1024))
        return response == b"AUTH_SUCCESS"

    def main_loop(self):
        while True:
            message = input("Enter message (or 'FILE' to send a file, 'QUIT' to exit): ")
            if message.lower() == 'quit':
                break
            elif message.lower() == 'file':
                self.send_file()
            else:
                self.send_chat(message)

    def send_chat(self, message):
        data = f"CHAT:{message}".encode()
        self.client_socket.send(self.cipher.encrypt(data))

    def send_file(self):
        filename = input("Enter filename: ")
        try:
            with open(filename, 'rb') as f:
                file_data = base64.b64encode(f.read()).decode()
            data = f"FILE:{filename}:{file_data}".encode()
            self.client_socket.send(self.cipher.encrypt(data))
            logging.info(f"File sent: {filename}")
        except Exception as e:
            logging.error(f"Error sending file: {str(e)}")

def run_tests():
    # Simple test cases
    test_server = Server('localhost', 12346)
    server_thread = threading.Thread(target=test_server.start)
    server_thread.start()

    time.sleep(1)  # Give the server time to start

    test_client = Client('localhost', 12346)
    client_thread = threading.Thread(target=test_client.connect)
    client_thread.start()

    time.sleep(2)  # Allow some time for client operations

    # Cleanup
    test_server.server_socket.close()
    server_thread.join(timeout=1)
    client_thread.join(timeout=1)

    logging.info("Tests completed")

if __name__ == "__main__":
    mode = input("Enter 'server', 'client', or 'test': ")
    if mode.lower() == 'server':
        server = Server('localhost', 12345)
        server.start()
    elif mode.lower() == 'client':
        client = Client('localhost', 12345)
        client.connect()
    elif mode.lower() == 'test':
        run_tests()
    else:
        print("Invalid mode")