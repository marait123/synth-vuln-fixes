from django.shortcuts import render, redirect
from django.http import HttpResponse
from django.contrib.auth.decorators import login_required
from django.core.files.storage import default_storage
from django.conf import settings
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
import os
import logging

logger = logging.getLogger(__name__)

@login_required
def upload_file(request):
    if request.method == 'POST':
        file = request.FILES.get('file')
        if file:
            try:
                encrypted_content = encrypt_file(file)
                file_name = f"encrypted_{file.name}"
                file_path = os.path.join(settings.MEDIA_ROOT, file_name)
                with open(file_path, 'wb') as f:
                    f.write(encrypted_content)
                return redirect('file_list')
            except Exception as e:
                logger.error(f"Error encrypting file: {str(e)}")
                return render(request, 'upload.html', {'error': 'Error encrypting file'})
    return render(request, 'upload.html')

def encrypt_file(file):
    key = get_random_bytes(16)
    cipher = AES.new(key, AES.MODE_GCM)
    ciphertext, tag = cipher.encrypt_and_digest(file.read())
    return key + cipher.nonce + tag + ciphertext

@login_required
def file_list(request):
    files = os.listdir(settings.MEDIA_ROOT)
    return render(request, 'file_list.html', {'files': files})

@login_required
def decrypt_file(request, file_name):
    file_path = os.path.join(settings.MEDIA_ROOT, file_name)
    if os.path.exists(file_path):
        with open(file_path, 'rb') as f:
            content = f.read()
        try:
            decrypted_content = decrypt_content(content)
            return HttpResponse(decrypted_content, content_type='text/plain')
        except Exception as e:
            logger.error(f"Error decrypting file: {str(e)}")
            return HttpResponse("Error decrypting file", status=500)
    return HttpResponse("File not found", status=404)

def decrypt_content(content):
    key = content[:16]
    nonce = content[16:32]
    tag = content[32:48]
    ciphertext = content[48:]
    cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
    return cipher.decrypt_and_verify(ciphertext, tag)

# URLs configuration
from django.urls import path
from . import views

urlpatterns = [
    path('upload/', views.upload_file, name='upload_file'),
    path('files/', views.file_list, name='file_list'),
    path('decrypt/<str:file_name>/', views.decrypt_file, name='decrypt_file'),
]