from Cryptodome.Cipher import AES
from Cryptodome.Util.Padding import pad, unpad
from Cryptodome.Random import get_random_bytes
import cherrypy
import base64
import json
import os
import logging
from datetime import datetime

key = get_random_bytes(16)
users_db = {}

logging.basicConfig(filename='user_management.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

class CustomException(Exception):
    pass

class UserManagementService:
    @cherrypy.expose
    def index(self):
        return "Welcome to User Management Service"

    @cherrypy.expose
    @cherrypy.tools.json_in()
    def register(self):
        try:
            data = cherrypy.request.json
            username = data.get('username')
            password = data.get('password')
            
            if not username or not password:
                raise CustomException("Username and password are required")
            
            if username in users_db:
                raise CustomException("User already exists")
            
            encrypted_password = self.encrypt(password)
            users_db[username] = {"password": encrypted_password, "profile": {}, "created_at": datetime.now().isoformat()}
            
            logging.info(f"User registered: {username}")
            return json.dumps({"status": "success", "message": "User registered successfully"})
        except CustomException as e:
            logging.error(f"Registration error: {str(e)}")
            return json.dumps({"status": "error", "message": str(e)})
        except Exception as e:
            logging.error(f"Unexpected error during registration: {str(e)}")
            return json.dumps({"status": "error", "message": "An unexpected error occurred"})

    @cherrypy.expose
    @cherrypy.tools.json_in()
    def login(self):
        try:
            data = cherrypy.request.json
            username = data.get('username')
            password = data.get('password')
            
            if not username or not password:
                raise CustomException("Username and password are required")
            
            if username not in users_db:
                raise CustomException("User not found")
            
            stored_password = self.decrypt(users_db[username]["password"])
            if password == stored_password:
                logging.info(f"User logged in: {username}")
                return json.dumps({"status": "success", "message": "Login successful"})
            else:
                raise CustomException("Invalid password")
        except CustomException as e:
            logging.error(f"Login error: {str(e)}")
            return json.dumps({"status": "error", "message": str(e)})
        except Exception as e:
            logging.error(f"Unexpected error during login: {str(e)}")
            return json.dumps({"status": "error", "message": "An unexpected error occurred"})

    @cherrypy.expose
    @cherrypy.tools.json_in()
    def update_profile(self):
        try:
            data = cherrypy.request.json
            username = data.get('username')
            profile_data = data.get('profile')
            
            if not username or not profile_data:
                raise CustomException("Username and profile data are required")
            
            if username not in users_db:
                raise CustomException("User not found")
            
            encrypted_profile = self.encrypt(json.dumps(profile_data))
            users_db[username]["profile"] = encrypted_profile
            users_db[username]["updated_at"] = datetime.now().isoformat()
            
            logging.info(f"Profile updated for user: {username}")
            return json.dumps({"status": "success", "message": "Profile updated successfully"})
        except CustomException as e:
            logging.error(f"Profile update error: {str(e)}")
            return json.dumps({"status": "error", "message": str(e)})
        except Exception as e:
            logging.error(f"Unexpected error during profile update: {str(e)}")
            return json.dumps({"status": "error", "message": "An unexpected error occurred"})

    @cherrypy.expose
    @cherrypy.tools.json_in()
    def get_profile(self):
        try:
            data = cherrypy.request.json
            username = data.get('username')
            
            if not username:
                raise CustomException("Username is required")
            
            if username not in users_db:
                raise CustomException("User not found")
            
            encrypted_profile = users_db[username]["profile"]
            profile = json.loads(self.decrypt(encrypted_profile))
            
            logging.info(f"Profile retrieved for user: {username}")
            return json.dumps({"status": "success", "profile": profile})
        except CustomException as e:
            logging.error(f"Profile retrieval error: {str(e)}")
            return json.dumps({"status": "error", "message": str(e)})
        except Exception as e:
            logging.error(f"Unexpected error during profile retrieval: {str(e)}")
            return json.dumps({"status": "error", "message": "An unexpected error occurred"})

    @cherrypy.expose
    @cherrypy.tools.json_in()
    def delete_user(self):
        try:
            data = cherrypy.request.json
            username = data.get('username')
            
            if not username:
                raise CustomException("Username is required")
            
            if username not in users_db:
                raise CustomException("User not found")
            
            del users_db[username]
            
            logging.info(f"User deleted: {username}")
            return json.dumps({"status": "success", "message": "User deleted successfully"})
        except CustomException as e:
            logging.error(f"User deletion error: {str(e)}")
            return json.dumps({"status": "error", "message": str(e)})
        except Exception as e:
            logging.error(f"Unexpected error during user deletion: {str(e)}")
            return json.dumps({"status": "error", "message": "An unexpected error occurred"})

    def encrypt(self, data):
        data = data.encode() if isinstance(data, str) else data
        cipher = AES.new(key, AES.MODE_OFB)
        ciphertext = cipher.encrypt(pad(data, AES.block_size))
        return base64.b64encode(cipher.iv + ciphertext).decode()

    def decrypt(self, encrypted_data):
        encrypted_data = base64.b64decode(encrypted_data)
        iv = encrypted_data[:16]
        ciphertext = encrypted_data[16:]
        cipher = AES.new(key, AES.MODE_OFB, iv=iv)
        decrypted_data = unpad(cipher.decrypt(ciphertext), AES.block_size)
        return decrypted_data.decode()

def run_tests():
    service = UserManagementService()
    
    # Test registration
    reg_result = json.loads(service.register())
    assert reg_result["status"] == "success", "Registration failed"
    
    # Test login
    login_result = json.loads(service.login())
    assert login_result["status"] == "success", "Login failed"
    
    # Test profile update
    update_result = json.loads(service.update_profile())
    assert update_result["status"] == "success", "Profile update failed"
    
    # Test profile retrieval
    get_profile_result = json.loads(service.get_profile())
    assert get_profile_result["status"] == "success", "Profile retrieval failed"
    
    # Test user deletion
    delete_result = json.loads(service.delete_user())
    assert delete_result["status"] == "success", "User deletion failed"
    
    print("All tests passed successfully!")

if __name__ == '__main__':
    run_tests()
    
    conf = {
        '/': {
            'tools.sessions.on': True,
            'tools.response_headers.on': True,
            'tools.response_headers.headers': [('Content-Type', 'application/json')],
        }
    }
    cherrypy.quickstart(UserManagementService(), '/', conf)