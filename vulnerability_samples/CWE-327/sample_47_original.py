import sys
import sqlite3
import hashlib
import logging
from PyQt5.QtWidgets import QApplication, QWidget, QLineEdit, QVBoxLayout, QPushButton, QLabel, QMessageBox, QMainWindow, QStackedWidget, QHBoxLayout
from PyQt5.QtCore import Qt

logging.basicConfig(filename='auth_system.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class DatabaseError(Exception):
    pass

class Database:
    def __init__(self):
        try:
            self.conn = sqlite3.connect('users.db')
            self.cursor = self.conn.cursor()
            self.cursor.execute('''CREATE TABLE IF NOT EXISTS users
                                (username TEXT PRIMARY KEY, password TEXT, email TEXT)''')
            self.conn.commit()
        except sqlite3.Error as e:
            logging.error(f"Database initialization error: {e}")
            raise DatabaseError("Failed to initialize database")

    def add_user(self, username, password, email):
        try:
            self.cursor.execute("INSERT INTO users VALUES (?, ?, ?)", (username, password, email))
            self.conn.commit()
            logging.info(f"User added: {username}")
            return True
        except sqlite3.IntegrityError:
            logging.warning(f"Attempt to add duplicate username: {username}")
            return False

    def check_user(self, username, password):
        try:
            self.cursor.execute("SELECT * FROM users WHERE username=? AND password=?", (username, password))
            return self.cursor.fetchone() is not None
        except sqlite3.Error as e:
            logging.error(f"Database query error: {e}")
            raise DatabaseError("Failed to check user credentials")

    def update_password(self, username, new_password):
        try:
            self.cursor.execute("UPDATE users SET password=? WHERE username=?", (new_password, username))
            self.conn.commit()
            logging.info(f"Password updated for user: {username}")
            return True
        except sqlite3.Error as e:
            logging.error(f"Failed to update password for user {username}: {e}")
            return False

    def delete_user(self, username):
        try:
            self.cursor.execute("DELETE FROM users WHERE username=?", (username,))
            self.conn.commit()
            logging.info(f"User deleted: {username}")
            return True
        except sqlite3.Error as e:
            logging.error(f"Failed to delete user {username}: {e}")
            return False

class RegisterWidget(QWidget):
    def __init__(self, db):
        super().__init__()
        self.db = db
        self.initUI()

    def initUI(self):
        layout = QVBoxLayout()
        self.username = QLineEdit(self)
        self.username.setPlaceholderText("Username")
        self.password = QLineEdit(self)
        self.password.setPlaceholderText("Password")
        self.password.setEchoMode(QLineEdit.Password)
        self.email = QLineEdit(self)
        self.email.setPlaceholderText("Email")
        self.register_button = QPushButton('Register', self)
        self.register_button.clicked.connect(self.on_register)

        layout.addWidget(QLabel("Register"))
        layout.addWidget(self.username)
        layout.addWidget(self.password)
        layout.addWidget(self.email)
        layout.addWidget(self.register_button)
        self.setLayout(layout)

    def on_register(self):
        username = self.username.text()
        password = self.password.text()
        email = self.email.text()
        if not username or not password or not email:
            QMessageBox.warning(self, "Error", "All fields are required!")
            return
        hashed_password = hashlib.md5(password.encode()).hexdigest()
        try:
            if self.db.add_user(username, hashed_password, email):
                QMessageBox.information(self, "Success", "Registration successful!")
                self.username.clear()
                self.password.clear()
                self.email.clear()
            else:
                QMessageBox.warning(self, "Error", "Username already exists!")
        except DatabaseError as e:
            QMessageBox.critical(self, "Error", str(e))

class LoginWidget(QWidget):
    def __init__(self, db):
        super().__init__()
        self.db = db
        self.initUI()

    def initUI(self):
        layout = QVBoxLayout()
        self.username = QLineEdit(self)
        self.username.setPlaceholderText("Username")
        self.password = QLineEdit(self)
        self.password.setPlaceholderText("Password")
        self.password.setEchoMode(QLineEdit.Password)
        self.login_button = QPushButton('Login', self)
        self.login_button.clicked.connect(self.on_login)

        layout.addWidget(QLabel("Login"))
        layout.addWidget(self.username)
        layout.addWidget(self.password)
        layout.addWidget(self.login_button)
        self.setLayout(layout)

    def on_login(self):
        username = self.username.text()
        password = self.password.text()
        if not username or not password:
            QMessageBox.warning(self, "Error", "Both username and password are required!")
            return
        hashed_password = hashlib.md5(password.encode()).hexdigest()
        try:
            if self.db.check_user(username, hashed_password):
                QMessageBox.information(self, "Success", "Login successful!")
                self.username.clear()
                self.password.clear()
            else:
                QMessageBox.warning(self, "Error", "Invalid credentials!")
        except DatabaseError as e:
            QMessageBox.critical(self, "Error", str(e))

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.db = Database()
        self.initUI()

    def initUI(self):
        self.setWindowTitle('User Authentication System')
        self.setGeometry(100, 100, 300, 300)

        self.central_widget = QStackedWidget()
        self.setCentralWidget(self.central_widget)

        self.register_widget = RegisterWidget(self.db)
        self.login_widget = LoginWidget(self.db)

        self.central_widget.addWidget(self.register_widget)
        self.central_widget.addWidget(self.login_widget)

        nav_layout = QHBoxLayout()
        self.register_nav = QPushButton("Register")
        self.login_nav = QPushButton("Login")
        nav_layout.addWidget(self.register_nav)
        nav_layout.addWidget(self.login_nav)

        self.register_nav.clicked.connect(lambda: self.central_widget.setCurrentIndex(0))
        self.login_nav.clicked.connect(lambda: self.central_widget.setCurrentIndex(1))

        main_layout = QVBoxLayout()
        main_layout.addLayout(nav_layout)
        main_layout.addWidget(self.central_widget)

        container = QWidget()
        container.setLayout(main_layout)
        self.setCentralWidget(container)

        self.show()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = MainWindow()
    sys.exit(app.exec_())