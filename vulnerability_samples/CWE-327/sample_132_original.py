import hashlib
import os
import logging
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from functools import wraps
from werkzeug.exceptions import BadRequest, Unauthorized, Forbidden, NotFound
from sqlalchemy.exc import IntegrityError

app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'default_secret_key')
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///example.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(120), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    is_admin = db.Column(db.Boolean, default=False)

def hash_password(password):
    return hashlib.md5(password.encode()).hexdigest()

def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        username = request.json.get('username')
        user = User.query.filter_by(username=username).first()
        if not user or not user.is_admin:
            raise Forbidden("Admin access required")
        return f(*args, **kwargs)
    return decorated_function

@app.route('/register', methods=['POST'])
def register():
    try:
        username = request.json['username']
        password = request.json['password']
        email = request.json['email']
    except KeyError:
        raise BadRequest("Missing required fields")

    hashed_password = hash_password(password)
    new_user = User(username=username, password_hash=hashed_password, email=email)
    try:
        db.session.add(new_user)
        db.session.commit()
    except IntegrityError:
        db.session.rollback()
        raise BadRequest("Username or email already exists")

    logger.info(f"New user registered: {username}")
    return jsonify({"message": "User registered successfully"}), 201

@app.route('/login', methods=['POST'])
def login():
    try:
        username = request.json['username']
        password = request.json['password']
    except KeyError:
        raise BadRequest("Missing username or password")

    user = User.query.filter_by(username=username).first()
    if user and user.password_hash == hash_password(password):
        logger.info(f"User logged in: {username}")
        return jsonify({"message": "Login successful"}), 200
    raise Unauthorized("Invalid credentials")

@app.route('/profile', methods=['GET', 'PUT'])
def profile():
    try:
        username = request.json['username']
    except KeyError:
        raise BadRequest("Missing username")

    user = User.query.filter_by(username=username).first()
    if not user:
        raise NotFound("User not found")
    
    if request.method == 'GET':
        return jsonify({
            "username": user.username,
            "email": user.email
        }), 200
    elif request.method == 'PUT':
        new_email = request.json.get('email')
        if new_email:
            user.email = new_email
            db.session.commit()
            logger.info(f"Profile updated for user: {username}")
        return jsonify({"message": "Profile updated successfully"}), 200

@app.route('/reset_password', methods=['POST'])
def reset_password():
    try:
        username = request.json['username']
        new_password = request.json['new_password']
    except KeyError:
        raise BadRequest("Missing required fields")

    user = User.query.filter_by(username=username).first()
    if not user:
        raise NotFound("User not found")
    user.password_hash = hash_password(new_password)
    db.session.commit()
    logger.info(f"Password reset for user: {username}")
    return jsonify({"message": "Password reset successfully"}), 200

@app.route('/admin/users', methods=['GET'])
@admin_required
def get_all_users():
    users = User.query.all()
    user_list = [{"username": user.username, "email": user.email} for user in users]
    return jsonify(user_list), 200

@app.route('/admin/delete_user', methods=['DELETE'])
@admin_required
def delete_user():
    try:
        username = request.json['username']
    except KeyError:
        raise BadRequest("Missing username")

    user = User.query.filter_by(username=username).first()
    if not user:
        raise NotFound("User not found")
    db.session.delete(user)
    db.session.commit()
    logger.info(f"User deleted: {username}")
    return jsonify({"message": "User deleted successfully"}), 200

@app.errorhandler(BadRequest)
@app.errorhandler(Unauthorized)
@app.errorhandler(Forbidden)
@app.errorhandler(NotFound)
def handle_error(error):
    response = jsonify({"error": str(error)})
    response.status_code = error.code
    return response

@app.cli.command("create-admin")
def create_admin():
    username = input("Enter admin username: ")
    password = input("Enter admin password: ")
    email = input("Enter admin email: ")
    hashed_password = hash_password(password)
    admin = User(username=username, password_hash=hashed_password, email=email, is_admin=True)
    db.session.add(admin)
    db.session.commit()
    print("Admin user created successfully")

def init_db():
    with app.app_context():
        db.create_all()
        print("Database initialized")

if __name__ == '__main__':
    init_db()
    app.run(debug=True)