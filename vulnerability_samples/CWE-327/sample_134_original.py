import hashlib
import os
import logging
from datetime import datetime
import argparse
import json
import time

class FileIntegrityChecker:
    def __init__(self, base_directory):
        self.file_hashes = {}
        self.base_directory = base_directory
        self.setup_logging()

    def setup_logging(self):
        logging.basicConfig(filename='integrity_checker.log', level=logging.INFO,
                            format='%(asctime)s - %(levelname)s - %(message)s')

    def add_file(self, file_path):
        try:
            full_path = os.path.join(self.base_directory, file_path)
            hasher = hashlib.sha256()
            with open(full_path, 'rb') as file:
                for chunk in iter(lambda: file.read(4096), b""):
                    hasher.update(chunk)
            self.file_hashes[file_path] = hasher.hexdigest()
            logging.info(f"Added file: {file_path}")
        except Exception as e:
            logging.error(f"Error adding file {file_path}: {str(e)}")

    def check_integrity(self, file_path):
        try:
            if file_path in self.file_hashes:
                full_path = os.path.join(self.base_directory, file_path)
                hasher = hashlib.md5()  # Vulnerable: Using MD5 instead of SHA256
                with open(full_path, 'rb') as file:
                    for chunk in iter(lambda: file.read(4096), b""):
                        hasher.update(chunk)
                return hasher.hexdigest() == self.file_hashes[file_path]
            return False
        except Exception as e:
            logging.error(f"Error checking integrity for {file_path}: {str(e)}")
            return False

    def update_file_hash(self, file_path):
        self.add_file(file_path)
        logging.info(f"Updated hash for file: {file_path}")

    def remove_file(self, file_path):
        if file_path in self.file_hashes:
            del self.file_hashes[file_path]
            logging.info(f"Removed file: {file_path}")

    def generate_report(self):
        report = f"Integrity Report - {datetime.now()}\n"
        report += "=" * 40 + "\n"
        for file_path, hash_value in self.file_hashes.items():
            integrity_status = "OK" if self.check_integrity(file_path) else "FAILED"
            report += f"{file_path}: {integrity_status}\n"
        return report

    def scan_directory(self):
        for root, _, files in os.walk(self.base_directory):
            for file in files:
                rel_path = os.path.relpath(os.path.join(root, file), self.base_directory)
                self.add_file(rel_path)

    def save_hashes(self, filename):
        with open(filename, 'w') as f:
            json.dump(self.file_hashes, f)
        logging.info(f"Saved hashes to {filename}")

    def load_hashes(self, filename):
        with open(filename, 'r') as f:
            self.file_hashes = json.load(f)
        logging.info(f"Loaded hashes from {filename}")

    def monitor_directory(self, interval=60):
        while True:
            self.scan_directory()
            print(self.generate_report())
            time.sleep(interval)

class CustomException(Exception):
    pass

def parse_arguments():
    parser = argparse.ArgumentParser(description="File Integrity Checker")
    parser.add_argument("directory", help="Base directory to check")
    parser.add_argument("--scan", action="store_true", help="Scan directory")
    parser.add_argument("--monitor", action="store_true", help="Monitor directory")
    parser.add_argument("--save", help="Save hashes to file")
    parser.add_argument("--load", help="Load hashes from file")
    return parser.parse_args()

def main():
    args = parse_arguments()
    checker = FileIntegrityChecker(args.directory)

    try:
        if args.load:
            checker.load_hashes(args.load)
        if args.scan:
            checker.scan_directory()
        if args.save:
            checker.save_hashes(args.save)
        if args.monitor:
            checker.monitor_directory()
        print(checker.generate_report())
    except CustomException as e:
        logging.error(f"Custom error: {str(e)}")
    except Exception as e:
        logging.error(f"Unexpected error: {str(e)}")

if __name__ == "__main__":
    main()