from django.shortcuts import redirect, render
from django.http import HttpRequest, HttpResponse
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User, Group
from django.core.exceptions import ValidationError
from django.db import IntegrityError
from django.views.decorators.http import require_http_methods
from django.urls import reverse
import logging
import re

logger = logging.getLogger(__name__)

def user_login(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        try:
            user = authenticate(request, username=username, password=password)
            if user is not None:
                login(request, user)
                logger.info(f"User {username} logged in successfully")
                return redirect('main')
            else:
                logger.warning(f"Failed login attempt for user {username}")
                return render(request, 'login.html', {'error': 'Invalid credentials'})
        except Exception as e:
            logger.error(f"Error during login: {str(e)}")
            return render(request, 'login.html', {'error': 'An error occurred. Please try again.'})
    return render(request, 'login.html')

@login_required
def user_profile(request):
    try:
        user_data = {
            'username': request.user.username,
            'email': request.user.email,
            'groups': [group.name for group in request.user.groups.all()]
        }
        return render(request, 'profile.html', {'user': user_data})
    except Exception as e:
        logger.error(f"Error fetching user profile: {str(e)}")
        return render(request, 'error_page.html', {'message': 'Unable to load profile'})

@login_required
def user_logout(request):
    try:
        logout(request)
        logger.info(f"User {request.user.username} logged out")
        return redirect('login')
    except Exception as e:
        logger.error(f"Error during logout: {str(e)}")
        return render(request, 'error_page.html', {'message': 'An error occurred during logout'})

@login_required
def main_view(request):
    user_role = request.user.groups.first().name if request.user.groups.exists() else 'guest'
    context = {'user_role': user_role}
    return render(request, 'main.html', context)

@login_required
def http_redirect(request: HttpRequest):
    next_page = request.GET.get('next', '/default')
    user_role = request.user.groups.first().name if request.user.groups.exists() else 'guest'
    if not next_page:
        logger.warning(f"Invalid redirection attempt to {next_page} by user {request.user.username}")
        return render(request, 'error_page.html', {'message': 'Invalid redirection URL'})
    if user_role == 'admin':
        redirect_url = f"/admin?next={next_page}"
    else:
        redirect_url = f"/process?next={next_page}"
    logger.info(f"Redirecting user {request.user.username} to {redirect_url}")
    return redirect(redirect_url)

def simulate_roles(request):
    role = request.GET.get('role', 'guest')
    next_page = request.GET.get('next', '/default')
    if role == 'admin':
        return HttpResponse(f"Admin view. Next page: {next_page}")
    elif role == 'user':
        return HttpResponse(f"User view. Next page: {next_page}")
    else:
        return HttpResponse(f"Guest view. Next page: {next_page}")

@login_required
@require_http_methods(["POST"])
def change_password(request):
    try:
        old_password = request.POST.get('old_password')
        new_password = request.POST.get('new_password')
        confirm_password = request.POST.get('confirm_password')

        if not request.user.check_password(old_password):
            return render(request, 'change_password.html', {'error': 'Incorrect old password'})

        if new_password != confirm_password:
            return render(request, 'change_password.html', {'error': 'New passwords do not match'})

        if len(new_password) < 8:
            return render(request, 'change_password.html', {'error': 'Password must be at least 8 characters long'})

        request.user.set_password(new_password)
        request.user.save()
        logger.info(f"Password changed for user {request.user.username}")
        return redirect('login')
    except Exception as e:
        logger.error(f"Error changing password: {str(e)}")
        return render(request, 'error_page.html', {'message': 'An error occurred while changing password'})

@login_required
def user_list(request):
    if not request.user.is_superuser:
        logger.warning(f"Unauthorized access attempt to user list by {request.user.username}")
        return render(request, 'error_page.html', {'message': 'Access Denied'})
    users = User.objects.all()
    return render(request, 'user_list.html', {'users': users})

@login_required
@require_http_methods(["POST"])
def create_user(request):
    if not request.user.is_superuser:
        logger.warning(f"Unauthorized user creation attempt by {request.user.username}")
        return render(request, 'error_page.html', {'message': 'Access Denied'})
    try:
        username = request.POST.get('username')
        email = request.POST.get('email')
        password = request.POST.get('password')
        role = request.POST.get('role')

        if not re.match(r'^[\w.@+-]+$', username):
            raise ValidationError("Invalid username")

        user = User.objects.create_user(username=username, email=email, password=password)
        group, _ = Group.objects.get_or_create(name=role)
        user.groups.add(group)
        logger.info(f"New user {username} created with role {role}")
        return redirect('user_list')
    except IntegrityError:
        logger.error(f"Username {username} already exists")
        return render(request, 'error_page.html', {'message': 'Username already exists'})
    except ValidationError as e:
        logger.error(f"Validation error: {str(e)}")
        return render(request, 'error_page.html', {'message': str(e)})
    except Exception as e:
        logger.error(f"Error creating user: {str(e)}")
        return render(request, 'error_page.html', {'message': 'An error occurred while creating user'})

def custom_404(request, exception):
    return render(request, '404.html', status=404)

def custom_500(request):
    return render(request, '500.html', status=500)

urlpatterns = [
    path('login/', user_login, name='login'),
    path('logout/', user_logout, name='logout'),
    path('profile/', user_profile, name='profile'),
    path('main/', main_view, name='main'),
    path('redirect/', http_redirect, name='redirect'),
    path('simulate/', simulate_roles, name='simulate'),
    path('change_password/', change_password, name='change_password'),
    path('users/', user_list, name='user_list'),
    path('create_user/', create_user, name='create_user'),
]

handler404 = custom_404
handler500 = custom_500