from django.http import HttpResponseRedirect, JsonResponse
from django.shortcuts import render, redirect
from django.views import View
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.contrib.auth.models import User
from django.core.exceptions import ValidationError
from django.db import IntegrityError
import logging
import json

logger = logging.getLogger(__name__)

class RedirectView(View):
    def get(self, request):
        url = request.GET.get('next', '/')
        logger.info(f"Redirecting to: {url}")
        return HttpResponseRedirect(url)

def index(request):
    return render(request, 'index.html')

def login_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            logger.info(f"User {username} logged in successfully")
            return redirect('profile')
        else:
            logger.warning(f"Failed login attempt for user {username}")
    return render(request, 'login.html')

@login_required
def profile(request):
    if request.method == 'POST':
        user = request.user
        user.first_name = request.POST.get('first_name', user.first_name)
        user.last_name = request.POST.get('last_name', user.last_name)
        user.email = request.POST.get('email', user.email)
        try:
            user.full_clean()
            user.save()
            logger.info(f"Profile updated for user {user.username}")
        except ValidationError as e:
            logger.error(f"Profile update failed for user {user.username}: {str(e)}")
    return render(request, 'profile.html')

@login_required
def settings(request):
    if request.method == 'POST':
        user = request.user
        old_password = request.POST.get('old_password')
        new_password = request.POST.get('new_password')
        if user.check_password(old_password):
            user.set_password(new_password)
            user.save()
            logger.info(f"Password changed for user {user.username}")
            return redirect('login')
        else:
            logger.warning(f"Failed password change attempt for user {user.username}")
    return render(request, 'settings.html')

@login_required
def logout_view(request):
    logout(request)
    logger.info(f"User {request.user.username} logged out")
    return redirect('index')

class DashboardView(View):
    @method_decorator(login_required)
    def get(self, request):
        return render(request, 'dashboard.html')

    @method_decorator(login_required)
    def post(self, request):
        data = json.loads(request.body)
        action = data.get('action')
        if action == 'update_status':
            new_status = data.get('status')
            request.user.profile.status = new_status
            request.user.profile.save()
            logger.info(f"Status updated for user {request.user.username}")
            return JsonResponse({'status': 'success'})
        return JsonResponse({'status': 'error', 'message': 'Invalid action'})

def register(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        email = request.POST.get('email')
        try:
            user = User.objects.create_user(username, email, password)
            logger.info(f"New user registered: {username}")
            login(request, user)
            return redirect('profile')
        except IntegrityError:
            logger.warning(f"Registration failed: Username {username} already exists")
    return render(request, 'register.html')

class UserAPI(View):
    @method_decorator(login_required)
    def get(self, request):
        users = User.objects.all().values('id', 'username', 'email')
        return JsonResponse(list(users), safe=False)

    @method_decorator(login_required)
    def post(self, request):
        data = json.loads(request.body)
        try:
            user = User.objects.create_user(
                username=data['username'],
                email=data['email'],
                password=data['password']
            )
            logger.info(f"User created via API: {user.username}")
            return JsonResponse({'status': 'success', 'id': user.id})
        except IntegrityError:
            logger.warning(f"User creation via API failed: Username {data['username']} already exists")
            return JsonResponse({'status': 'error', 'message': 'Username already exists'}, status=400)

def custom_404(request, exception):
    return render(request, '404.html', status=404)

def custom_500(request):
    return render(request, '500.html', status=500)

# URLs configuration
"""
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='index'),
    path('login/', views.login_view, name='login'),
    path('profile/', views.profile, name='profile'),
    path('settings/', views.settings, name='settings'),
    path('logout/', views.logout_view, name='logout'),
    path('dashboard/', views.DashboardView.as_view(), name='dashboard'),
    path('redirect/', views.RedirectView.as_view(), name='redirect'),
    path('register/', views.register, name='register'),
    path('api/users/', views.UserAPI.as_view(), name='user_api'),
]

handler404 = 'myapp.views.custom_404'
handler500 = 'myapp.views.custom_500'
"""

# Base template (base.html)
"""
<!DOCTYPE html>
<html>
<head>
    <title>{% block title %}My Site{% endblock %}</title>
</head>
<body>
    <nav>
        <a href="{% url 'index' %}">Home</a>
        {% if user.is_authenticated %}
            <a href="{% url 'profile' %}">Profile</a>
            <a href="{% url 'settings' %}">Settings</a>
            <a href="{% url 'dashboard' %}">Dashboard</a>
            <a href="{% url 'logout' %}">Logout</a>
        {% else %}
            <a href="{% url 'login' %}">Login</a>
            <a href="{% url 'register' %}">Register</a>
        {% endif %}
    </nav>
    {% block content %}
    {% endblock %}
    <footer>
        <p>&copy; 2023 My Site. All rights reserved.</p>
    </footer>
</body>
</html>
"""