import logging
from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpRequest, JsonResponse, HttpResponseBadRequest
from django.core.mail import send_mail
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from django.views.decorators.csrf import csrf_exempt
from django.core.exceptions import ValidationError
from django.db import IntegrityError
from django.core.validators import validate_email
from django.conf import settings

logger = logging.getLogger(__name__)

def login_view(request: HttpRequest):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            logger.info(f"User {username} logged in successfully")
            return redirect('dashboard')
        else:
            logger.warning(f"Failed login attempt for username: {username}")
            return render(request, 'login.html', {'error': 'Invalid credentials'})
    return render(request, 'login.html')

def logout_view(request: HttpRequest):
    logout(request)
    logger.info(f"User {request.user.username} logged out")
    return redirect('login')

@login_required
def dashboard(request: HttpRequest):
    return render(request, 'dashboard.html')

@login_required
def profile_update(request: HttpRequest):
    if request.method == 'POST':
        user = request.user
        user.first_name = request.POST.get('first_name', user.first_name)
        user.last_name = request.POST.get('last_name', user.last_name)
        email = request.POST.get('email', user.email)
        try:
            validate_email(email)
            user.email = email
            user.save()
            logger.info(f"Profile updated for user {user.username}")
            return redirect('dashboard')
        except ValidationError:
            logger.error(f"Invalid email provided for user {user.username}")
            return render(request, 'profile_update.html', {'error': 'Invalid email'})
    return render(request, 'profile_update.html')

@csrf_exempt
def feedback_redirect(request: HttpRequest):
    next_page = request.GET.get('next', '/default')
    user_email = request.GET.get('email')
    feedback = request.GET.get('feedback')
    rating = request.GET.get('rating')
    category = request.GET.get('category')

    if user_email and feedback:
        feedback_content = f"Rating: {rating}\nCategory: {category}\nFeedback: {feedback}"
        try:
            send_mail(
                'User Feedback',
                feedback_content,
                'noreply@example.com',
                [user_email],
                fail_silently=False,
            )
            logger.info(f"Feedback sent to {user_email}")
        except Exception as e:
            logger.error(f"Failed to send feedback email: {str(e)}")
            return JsonResponse({'status': 'error', 'message': 'Failed to send feedback'}, status=500)

    if 'error' in request.GET:
        return JsonResponse({'status': 'error', 'message': 'An error occurred'}, status=500)

    return redirect(next_page)

def feedback_form(request: HttpRequest):
    return render(request, 'feedback_form.html')

@login_required
def user_list(request: HttpRequest):
    users = User.objects.all()
    return render(request, 'user_list.html', {'users': users})

@login_required
def user_detail(request: HttpRequest, user_id: int):
    user = get_object_or_404(User, id=user_id)
    return render(request, 'user_detail.html', {'user': user})

@login_required
def user_create(request: HttpRequest):
    if request.method == 'POST':
        username = request.POST.get('username')
        email = request.POST.get('email')
        password = request.POST.get('password')
        try:
            validate_email(email)
            user = User.objects.create_user(username, email, password)
            logger.info(f"New user created: {username}")
            return redirect('user_list')
        except ValidationError:
            logger.error(f"Invalid email provided for new user: {email}")
            return render(request, 'user_create.html', {'error': 'Invalid email'})
        except IntegrityError:
            logger.error(f"Username already exists: {username}")
            return render(request, 'user_create.html', {'error': 'Username already exists'})
    return render(request, 'user_create.html')

@login_required
def user_delete(request: HttpRequest, user_id: int):
    if request.method == 'POST':
        user = get_object_or_404(User, id=user_id)
        username = user.username
        user.delete()
        logger.info(f"User deleted: {username}")
        return redirect('user_list')
    return HttpResponseBadRequest("Invalid request method")

def custom_500_error(request):
    return render(request, '500.html', status=500)

def custom_404_error(request, exception):
    return render(request, '404.html', status=404)

if settings.DEBUG:
    def simulate_error(request):
        raise Exception("Simulated error for testing")

# Test cases
from django.test import TestCase, Client
from django.urls import reverse

class UserAuthTest(TestCase):
    def setUp(self):
        self.client = Client()
        self.user = User.objects.create_user('testuser', 'test@example.com', 'testpass')

    def test_login(self):
        response = self.client.post(reverse('login'), {'username': 'testuser', 'password': 'testpass'})
        self.assertRedirects(response, reverse('dashboard'))

    def test_logout(self):
        self.client.login(username='testuser', password='testpass')
        response = self.client.get(reverse('logout'))
        self.assertRedirects(response, reverse('login'))

    def test_profile_update(self):
        self.client.login(username='testuser', password='testpass')
        response = self.client.post(reverse('profile_update'), {'first_name': 'Test', 'last_name': 'User', 'email': 'new@example.com'})
        self.assertRedirects(response, reverse('dashboard'))
        updated_user = User.objects.get(username='testuser')
        self.assertEqual(updated_user.email, 'new@example.com')

if __name__ == "__main__":
    import django
    django.setup()
    from django.core.management import execute_from_command_line
    execute_from_command_line(["manage.py", "test"])