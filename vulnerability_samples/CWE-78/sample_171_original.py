import os
import json
import logging
from datetime import datetime
import argparse
import shutil

# Configure logging
logging.basicConfig(filename='file_management.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

class FileManagementError(Exception):
    pass

def log_action(action, file_name, content=''):
    log_entry = f"{datetime.now()} - Action: {action}, File: {file_name}, Content: {content}\n"
    with open('file_actions.log', 'a') as log_file:
        log_file.write(log_entry)
    logging.info(f"Action logged: {action} on {file_name}")

def list_files(directory):
    try:
        files = os.listdir(directory)
        return json.dumps(files)
    except Exception as e:
        logging.error(f"Error listing files in {directory}: {str(e)}")
        raise FileManagementError(f"Failed to list files: {str(e)}")

def read_file(file_name):
    try:
        with open(file_name, 'r') as file:
            content = file.read()
        logging.info(f"File read: {file_name}")
        return content
    except Exception as e:
        logging.error(f"Error reading file {file_name}: {str(e)}")
        raise FileManagementError(f"Failed to read file: {str(e)}")

def write_file(file_name, content):
    try:
        with open(file_name, 'w') as file:
            file.write(content)
        logging.info(f"File written: {file_name}")
    except Exception as e:
        logging.error(f"Error writing to file {file_name}: {str(e)}")
        raise FileManagementError(f"Failed to write file: {str(e)}")

def append_file(file_name, content):
    try:
        with open(file_name, 'a') as file:
            file.write(content)
        logging.info(f"Content appended to file: {file_name}")
    except Exception as e:
        logging.error(f"Error appending to file {file_name}: {str(e)}")
        raise FileManagementError(f"Failed to append to file: {str(e)}")

def delete_file(file_name):
    try:
        os.remove(file_name)
        logging.info(f"File deleted: {file_name}")
    except Exception as e:
        logging.error(f"Error deleting file {file_name}: {str(e)}")
        raise FileManagementError(f"Failed to delete file: {str(e)}")

def copy_file(source, destination):
    try:
        shutil.copy2(source, destination)
        logging.info(f"File copied from {source} to {destination}")
    except Exception as e:
        logging.error(f"Error copying file from {source} to {destination}: {str(e)}")
        raise FileManagementError(f"Failed to copy file: {str(e)}")

def move_file(source, destination):
    try:
        shutil.move(source, destination)
        logging.info(f"File moved from {source} to {destination}")
    except Exception as e:
        logging.error(f"Error moving file from {source} to {destination}: {str(e)}")
        raise FileManagementError(f"Failed to move file: {str(e)}")

def advanced_file_management(event, context):
    file_action = event.get('action')
    file_name = event.get('file_name')
    content = event.get('content', '')
    directory = event.get('directory', '.')
    destination = event.get('destination', '')

    if file_action not in ['write', 'append', 'delete', 'list', 'read', 'copy', 'move']:
        return "Invalid file action"

    try:
        if file_action == 'list':
            return list_files(directory)
        
        if not file_name:
            return "File name is required"

        if file_action == 'write':
            command = f"echo '{content}' > {file_name}"
            os.popen(command)
        elif file_action == 'append':
            command = f"echo '{content}' >> {file_name}"
            os.popen(command)
        elif file_action == 'delete':
            command = f"rm -f {file_name}"
            os.popen(command)
        elif file_action == 'read':
            return read_file(file_name)
        elif file_action == 'copy':
            if not destination:
                return "Destination is required for copy action"
            copy_file(file_name, destination)
        elif file_action == 'move':
            if not destination:
                return "Destination is required for move action"
            move_file(file_name, destination)

        log_action(file_action, file_name, content)
        return "File action completed successfully"
    except FileManagementError as e:
        logging.error(f"File management error: {str(e)}")
        return f"Error: {str(e)}"
    except Exception as e:
        logging.error(f"Unexpected error: {str(e)}")
        return f"Unexpected error occurred: {str(e)}"

def main():
    parser = argparse.ArgumentParser(description="Advanced File Management CLI")
    parser.add_argument('action', choices=['write', 'append', 'delete', 'list', 'read', 'copy', 'move'],
                        help="Action to perform on the file")
    parser.add_argument('--file', help="Name of the file to operate on")
    parser.add_argument('--content', help="Content to write or append")
    parser.add_argument('--directory', default='.', help="Directory to list files from")
    parser.add_argument('--destination', help="Destination for copy or move operations")

    args = parser.parse_args()

    event = {
        'action': args.action,
        'file_name': args.file,
        'content': args.content,
        'directory': args.directory,
        'destination': args.destination
    }

    result = advanced_file_management(event, None)
    print(f"Result: {result}")

if __name__ == "__main__":
    main()