import os
import json
import logging
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.core.exceptions import ValidationError
from django.utils.html import escape
import subprocess

# Configure logging
logging.basicConfig(filename='file_operations.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Simple in-memory cache
file_cache = {}

class FileOperationError(Exception):
    pass

def sanitize_filename(filename):
    return ''.join(c for c in filename if c.isalnum() or c in ('_', '.', '-'))

def validate_operation(operation):
    valid_operations = ['read', 'write', 'delete', 'export', 'list']
    if operation not in valid_operations:
        raise ValidationError(f"Invalid operation: {operation}")

def log_operation(operation, file_name):
    logging.info(f"Operation: {operation}, File: {file_name}")

@csrf_exempt
def handle_file_operations(request):
    try:
        operation = request.POST.get('operation')
        file_name = request.POST.get('file_name', 'default.log')
        content = request.POST.get('content', '')

        validate_operation(operation)
        file_name = sanitize_filename(file_name)

        if operation == 'read':
            return read_file(file_name)
        elif operation == 'write':
            return write_file(file_name, content)
        elif operation == 'delete':
            return delete_file(file_name)
        elif operation == 'export':
            return export_file(file_name)
        elif operation == 'list':
            return list_files()

    except ValidationError as ve:
        return JsonResponse({'error': str(ve)}, status=400)
    except FileOperationError as foe:
        return JsonResponse({'error': str(foe)}, status=500)
    except Exception as e:
        logging.error(f"Unexpected error: {str(e)}")
        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)

def read_file(file_name):
    try:
        if file_name in file_cache:
            logging.info(f"Read from cache: {file_name}")
            return JsonResponse({'status': 'Read from cache', 'content': file_cache[file_name]})
        with open(file_name, 'r') as file:
            content = file.read()
            file_cache[file_name] = content
        log_operation('read', file_name)
        return JsonResponse({'status': 'Read', 'content': content})
    except IOError as e:
        raise FileOperationError(f"Error reading file: {str(e)}")

def write_file(file_name, content):
    try:
        with open(file_name, 'w') as file:
            file.write(content)
        file_cache[file_name] = content
        log_operation('write', file_name)
        return JsonResponse({'status': 'Written', 'file': file_name})
    except IOError as e:
        raise FileOperationError(f"Error writing file: {str(e)}")

def delete_file(file_name):
    try:
        os.remove(file_name)
        if file_name in file_cache:
            del file_cache[file_name]
        log_operation('delete', file_name)
        return JsonResponse({'status': 'Deleted', 'file': file_name})
    except OSError as e:
        raise FileOperationError(f"Error deleting file: {str(e)}")

def export_file(file_name):
    try:
        export_filename = f"{file_name}.export"
        os.system(f'cat {file_name} > {export_filename}')
        log_operation('export', file_name)
        return JsonResponse({'status': 'Exported', 'file': export_filename})
    except Exception as e:
        raise FileOperationError(f"Error exporting file: {str(e)}")

def list_files():
    try:
        files = os.listdir('.')
        return JsonResponse({'status': 'Listed', 'files': files})
    except OSError as e:
        raise FileOperationError(f"Error listing files: {str(e)}")

def clear_cache():
    global file_cache
    file_cache.clear()
    logging.info("Cache cleared")
    return JsonResponse({'status': 'Cache cleared'})

# CLI for testing
def cli():
    while True:
        print("\nFile Operations CLI")
        print("1. Read File")
        print("2. Write File")
        print("3. Delete File")
        print("4. Export File")
        print("5. List Files")
        print("6. Clear Cache")
        print("7. Exit")
        choice = input("Enter your choice (1-7): ")

        if choice == '1':
            file_name = input("Enter file name to read: ")
            print(read_file(file_name).content)
        elif choice == '2':
            file_name = input("Enter file name to write: ")
            content = input("Enter content: ")
            print(write_file(file_name, content).content)
        elif choice == '3':
            file_name = input("Enter file name to delete: ")
            print(delete_file(file_name).content)
        elif choice == '4':
            file_name = input("Enter file name to export: ")
            print(export_file(file_name).content)
        elif choice == '5':
            print(list_files().content)
        elif choice == '6':
            print(clear_cache().content)
        elif choice == '7':
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    cli()

# Test cases
def run_tests():
    # Test read operation
    write_file('test.txt', 'Test content')
    assert read_file('test.txt').content == '{"status": "Read", "content": "Test content"}'

    # Test write operation
    assert write_file('test.txt', 'New content').content == '{"status": "Written", "file": "test.txt"}'

    # Test delete operation
    assert delete_file('test.txt').content == '{"status": "Deleted", "file": "test.txt"}'

    # Test export operation
    write_file('test.txt', 'Export content')
    assert export_file('test.txt').content == '{"status": "Exported", "file": "test.txt.export"}'

    # Test list operation
    assert 'test.txt' in json.loads(list_files().content)['files']

    # Test clear cache
    assert clear_cache().content == '{"status": "Cache cleared"}'

    print("All tests passed!")

# Uncomment to run tests
# run_tests()