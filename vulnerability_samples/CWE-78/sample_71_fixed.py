import http.server
import subprocess
import base64
import os
import shlex

class FileManager:
    def __init__(self, base_dir):
        self.base_dir = base_dir

    def list_files(self):
        return subprocess.run(['ls', self.base_dir], capture_output=True, text=True)

    def create_file(self, filename, content):
        file_path = os.path.join(self.base_dir, filename)
        with open(file_path, 'w') as f:
            f.write(content)
        return subprocess.run(['echo', 'File created successfully'], capture_output=True, text=True)

    def read_file(self, filename):
        file_path = os.path.join(self.base_dir, filename)
        return subprocess.run(['cat', file_path], capture_output=True, text=True)

    def delete_file(self, filename):
        file_path = os.path.join(self.base_dir, filename)
        os.remove(file_path)
        return subprocess.run(['echo', 'File deleted successfully'], capture_output=True, text=True)

class MyHTTPRequestHandler(http.server.BaseHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        self.file_manager = FileManager("/tmp/files")
        self.auth_token = "admin:password"
        super().__init__(*args, **kwargs)

    def log_message(self, format, *args):
        message = format.format(*args)
        with open("server.log", "a") as log_file:
            log_file.write("[{}] {}\n".format(self.log_date_time_string(), message))

    def authenticate(self):
        auth_header = self.headers.get('Authorization')
        if auth_header:
            auth_type, auth_string = auth_header.split()
            if auth_type.lower() == 'basic':
                decoded_auth = base64.b64decode(auth_string).decode('utf-8')
                if decoded_auth == self.auth_token:
                    return True
        self.send_response(401)
        self.send_header('WWW-Authenticate', 'Basic realm="File Manager"')
        self.end_headers()
        return False

    def do_GET(self):
        if not self.authenticate():
            return

        command = shlex.quote(self.path.strip('/'))
        parts = command.split('/')

        if parts[0] == 'list':
            result = self.file_manager.list_files()
        elif parts[0] == 'read' and len(parts) > 1:
            result = self.file_manager.read_file(parts[1])
        elif parts[0] == 'delete' and len(parts) > 1:
            result = self.file_manager.delete_file(parts[1])
        else:
            result = subprocess.run(['echo', command], capture_output=True, text=True)

        self.send_response(200)
        self.end_headers()
        self.wfile.write('Command executed with result: {}'.format(result.stdout).encode())

    def do_POST(self):
        if not self.authenticate():
            return

        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length).decode('utf-8')
        filename, content = post_data.split(':', 1)

        result = self.file_manager.create_file(filename, content)

        self.send_response(200)
        self.end_headers()
        self.wfile.write('File created with result: {}'.format(result.stdout).encode())

if __name__ == "__main__":
    server_address = ('', 8000)
    httpd = http.server.HTTPServer(server_address, MyHTTPRequestHandler)
    print("Server running on port 8000")
    httpd.serve_forever()