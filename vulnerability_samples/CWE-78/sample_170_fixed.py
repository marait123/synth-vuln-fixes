import subprocess
import logging
import shlex
import re

class SystemInfoManager:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        logging.basicConfig(level=logging.INFO)

    def validate_input(self, param):
        # Stronger input validation
        return re.match(r'^[a-zA-Z0-9\s]+$', param) is not None

    def execute_command(self, command):
        try:
            result = subprocess.check_output(command, shell=False)
            return result.decode().strip()
        except subprocess.CalledProcessError as e:
            self.logger.error(f"Command execution failed: {e}")
            return None

    def get_cpu_info(self, param):
        if not self.validate_input(param):
            self.logger.warning(f"Invalid input: {param}")
            return None
        command = ["lscpu"]
        output = self.execute_command(command)
        if output:
            lines = output.split('\n')
            for line in lines:
                if param.lower() in line.lower():
                    return line
        return None

    def get_memory_info(self, param):
        if not self.validate_input(param):
            self.logger.warning(f"Invalid input: {param}")
            return None
        command = ["free", "-m"]
        output = self.execute_command(command)
        if output:
            lines = output.split('\n')
            for line in lines:
                if param.lower() in line.lower():
                    return line
        return None

    def get_disk_info(self, param):
        if not self.validate_input(param):
            self.logger.warning(f"Invalid input: {param}")
            return None
        command = ["df", "-h"]
        output = self.execute_command(command)
        if output:
            lines = output.split('\n')
            for line in lines:
                if param.lower() in line.lower():
                    return line
        return None

def system_info(event, context):
    manager = SystemInfoManager()
    info_type = event.get('type', '').lower()
    param = event.get('parameter', '')

    if info_type == 'cpu':
        return manager.get_cpu_info(param)
    elif info_type == 'memory':
        return manager.get_memory_info(param)
    elif info_type == 'disk':
        return manager.get_disk_info(param)
    else:
        return "Invalid information type requested"

# Example usage
if __name__ == "__main__":
    event = {'type': 'cpu', 'parameter': 'Model name'}
    result = system_info(event, None)
    print(result)