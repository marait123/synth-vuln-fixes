import pandas as pd
import matplotlib.pyplot as plt
import subprocess
import os
import random
import logging
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email.mime.text import MIMEText
from email import encoders
import argparse
import sys
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class DataGenerationError(Exception):
    pass

class AnalysisError(Exception):
    pass

class EmailError(Exception):
    pass

def generate_sample_data(filename, num_rows=100, start_date=None):
    try:
        if start_date is None:
            start_date = datetime.now().strftime('%Y-%m-%d')
        data = {
            'Date': pd.date_range(start=start_date, periods=num_rows),
            'Sales': [random.randint(100, 1000) for _ in range(num_rows)],
            'Expenses': [random.randint(50, 500) for _ in range(num_rows)]
        }
        df = pd.DataFrame(data)
        df['Profit'] = df['Sales'] - df['Expenses']
        df.to_csv(filename, index=False)
        logger.info(f"Sample data generated and saved to {filename}")
    except Exception as e:
        raise DataGenerationError(f"Failed to generate sample data: {str(e)}")

def analyze_and_plot(file_path):
    try:
        df = pd.read_csv(file_path)
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))
        
        df.plot(kind='bar', x='Date', y=['Sales', 'Expenses'], ax=ax1)
        ax1.set_title('Sales and Expenses Over Time')
        ax1.set_xlabel('Date')
        ax1.set_ylabel('Amount')
        
        df.plot(kind='line', x='Date', y='Profit', ax=ax2)
        ax2.set_title('Profit Trend')
        ax2.set_xlabel('Date')
        ax2.set_ylabel('Profit')
        
        plt.tight_layout()
        fig.savefig('/tmp/plot.png')
        
        subprocess.run(f"convert /tmp/plot.png {file_path}.pdf", shell=True, check=True)
        os.remove('/tmp/plot.png')
        logger.info(f"Analysis complete. PDF saved as {file_path}.pdf")
    except Exception as e:
        raise AnalysisError(f"Error in analyze_and_plot: {str(e)}")

def send_email(recipient, subject, attachment_path, body="Please find the attached report."):
    try:
        msg = MIMEMultipart()
        msg['From'] = "sender@example.com"
        msg['To'] = recipient
        msg['Subject'] = subject

        msg.attach(MIMEText(body, 'plain'))

        with open(attachment_path, "rb") as attachment:
            part = MIMEBase("application", "octet-stream")
            part.set_payload(attachment.read())
        
        encoders.encode_base64(part)
        part.add_header("Content-Disposition", f"attachment; filename= {os.path.basename(attachment_path)}")
        msg.attach(part)

        # Simulated email sending
        logger.info(f"Email sent to {recipient} with subject '{subject}' and attachment {attachment_path}")
    except Exception as e:
        raise EmailError(f"Error in send_email: {str(e)}")

def validate_email(email):
    # Basic email validation
    return '@' in email and '.' in email.split('@')[1]

def parse_arguments():
    parser = argparse.ArgumentParser(description="Generate and analyze sales data")
    parser.add_argument("--rows", type=int, default=100, help="Number of data rows to generate")
    parser.add_argument("--email", type=str, required=True, help="Recipient email address")
    parser.add_argument("--start-date", type=str, help="Start date for data generation (YYYY-MM-DD)")
    return parser.parse_args()

def main():
    try:
        args = parse_arguments()
        
        if not validate_email(args.email):
            raise ValueError("Invalid email address provided")
        
        sample_file = "sample_data.csv"
        generate_sample_data(sample_file, num_rows=args.rows, start_date=args.start_date)
        
        analyze_and_plot(sample_file)
        
        pdf_file = f"{sample_file}.pdf"
        send_email(args.email, "Sales Analysis Report", pdf_file)
        
        os.remove(sample_file)
        os.remove(pdf_file)
        logger.info("Temporary files cleaned up")
    except (DataGenerationError, AnalysisError, EmailError, ValueError) as e:
        logger.error(str(e))
        sys.exit(1)
    except Exception as e:
        logger.error(f"Unexpected error in main: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()