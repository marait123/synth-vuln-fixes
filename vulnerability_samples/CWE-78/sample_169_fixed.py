import os
import json
import shlex
from subprocess import check_output, CalledProcessError
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt

# Simple in-memory cache
file_cache = {}

def log_operation(operation, file_name):
    with open('file_operations.log', 'a') as log_file:
        log_file.write(f"Operation: {operation}, File: {file_name}\n")

@csrf_exempt
def handle_file_operations(request):
    operation = request.POST.get('operation')
    file_name = request.POST.get('file_name', 'default.log')
    content = request.POST.get('content', '')

    # Input validation
    if not file_name.isalnum() and not file_name.endswith('.log'):
        return JsonResponse({'error': 'Invalid file name'}, status=400)

    try:
        if operation == 'read':
            if file_name in file_cache:
                return JsonResponse({'status': 'Read from cache', 'content': file_cache[file_name]})
            with open(file_name, 'r') as file:
                content = file.read()
                file_cache[file_name] = content
            log_operation('read', file_name)
            return JsonResponse({'status': 'Read', 'content': content})

        elif operation == 'write':
            with open(file_name, 'w') as file:
                file.write(content)
            file_cache[file_name] = content
            log_operation('write', file_name)
            return JsonResponse({'status': 'Written', 'file': file_name})

        elif operation == 'delete':
            os.remove(file_name)
            if file_name in file_cache:
                del file_cache[file_name]
            log_operation('delete', file_name)
            return JsonResponse({'status': 'Deleted', 'file': file_name})

        elif operation == 'export':
            safe_file_name = shlex.quote(file_name)
            output = check_output(['cat', safe_file_name])
            with open(f"{safe_file_name}.export", 'wb') as export_file:
                export_file.write(output)
            log_operation('export', file_name)
            return JsonResponse({'status': 'Exported', 'file': f"{file_name}.export"})

        elif operation == 'list':
            files = os.listdir('.')
            return JsonResponse({'status': 'Listed', 'files': files})

        else:
            return JsonResponse({'error': 'Invalid operation'}, status=400)

    except Exception as e:
        return JsonResponse({'error': 'Operation failed', 'details': str(e)}, status=500)

def clear_cache():
    global file_cache
    file_cache.clear()
    return JsonResponse({'status': 'Cache cleared'})