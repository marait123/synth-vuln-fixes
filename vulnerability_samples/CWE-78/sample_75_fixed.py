import configparser
import logging
from sqlalchemy import create_engine, text
import subprocess
import os
import tkinter as tk
from tkinter import messagebox
from reportlab.pdfgen import canvas
import shlex

# Configure logging
logging.basicConfig(filename='app.log', level=logging.INFO)

# Read database configuration
config = configparser.ConfigParser()
config.read('config.ini')
db_url = config['Database']['url']

engine = create_engine(db_url)

def generate_pdf_report(filename):
    try:
        subprocess.run(["ps2pdf", "/tmp/sorted_user_report.txt", filename], check=True)
        logging.info(f"PDF report generated: {filename}")
    except subprocess.CalledProcessError as e:
        logging.error(f"Error generating PDF: {str(e)}")
        raise

def complex_db_operation(user_input):
    try:
        query = text("SELECT name, email FROM users WHERE department = :department")
        result = engine.execute(query, department=user_input).fetchall()

        with open('/tmp/user_report.txt', 'w') as report_file:
            for row in result:
                name, email = row
                report_line = f'Name: {name}, Email: {email}\n'
                report_file.write(report_line)
        
        with open('/tmp/sorted_user_report.txt', 'w') as sorted_file:
            subprocess.run(["grep", "@", "/tmp/user_report.txt"], stdout=subprocess.PIPE, check=True, text=True)
            sort_process = subprocess.run(["sort"], input=subprocess.PIPE.stdout, stdout=sorted_file, check=True, text=True)
        
        os.remove('/tmp/user_report.txt')

        generate_pdf_report("user_report.pdf")
        return "Report generated successfully."
    except Exception as e:
        logging.error(f"Error in database operation: {str(e)}")
        raise

class Application(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.pack()
        self.create_widgets()

    def create_widgets(self):
        self.department_label = tk.Label(self, text="Enter Department:")
        self.department_label.pack()
        self.department_entry = tk.Entry(self)
        self.department_entry.pack()
        self.submit_button = tk.Button(self, text="Generate Report", command=self.generate_report)
        self.submit_button.pack()

    def generate_report(self):
        department = self.department_entry.get()
        try:
            result = complex_db_operation(department)
            messagebox.showinfo("Success", result)
        except Exception as e:
            messagebox.showerror("Error", str(e))

if __name__ == "__main__":
    root = tk.Tk()
    app = Application(master=root)
    app.mainloop()