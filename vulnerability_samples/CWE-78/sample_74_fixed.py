import pandas as pd
import matplotlib.pyplot as plt
import subprocess
import os
import random
import logging
import smtplib
import shlex
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def generate_sample_data(filename, num_rows=100):
    data = {
        'Date': pd.date_range(start='2023-01-01', periods=num_rows),
        'Sales': [random.randint(100, 1000) for _ in range(num_rows)]
    }
    df = pd.DataFrame(data)
    df.to_csv(filename, index=False)
    logger.info(f"Sample data generated and saved to {filename}")

def analyze_and_plot(file_path):
    try:
        df = pd.read_csv(file_path)
        plot = df.plot(kind='bar', x='Date', y='Sales')
        fig = plot.get_figure()
        fig.savefig('/tmp/plot.png')
        
        command = shlex.split(f"convert /tmp/plot.png {shlex.quote(file_path)}.pdf")
        subprocess.run(command, shell=False, check=True)
        os.remove('/tmp/plot.png')
        logger.info(f"Analysis complete. PDF saved as {file_path}.pdf")
    except Exception as e:
        logger.error(f"Error in analyze_and_plot: {str(e)}")

def send_email(recipient, subject, attachment_path):
    try:
        msg = MIMEMultipart()
        msg['From'] = "sender@example.com"
        msg['To'] = recipient
        msg['Subject'] = subject

        with open(attachment_path, "rb") as attachment:
            part = MIMEBase("application", "octet-stream")
            part.set_payload(attachment.read())
        
        encoders.encode_base64(part)
        part.add_header("Content-Disposition", f"attachment; filename= {os.path.basename(attachment_path)}")
        msg.attach(part)

        # Simulated email sending
        logger.info(f"Email sent to {recipient} with subject '{subject}' and attachment {attachment_path}")
    except Exception as e:
        logger.error(f"Error in send_email: {str(e)}")

def main():
    try:
        sample_file = "sample_data.csv"
        generate_sample_data(sample_file)
        
        analyze_and_plot(sample_file)
        
        pdf_file = f"{sample_file}.pdf"
        send_email("recipient@example.com", "Sales Analysis Report", pdf_file)
        
        os.remove(sample_file)
        os.remove(pdf_file)
        logger.info("Temporary files cleaned up")
    except Exception as e:
        logger.error(f"Error in main: {str(e)}")

if __name__ == "__main__":
    main()