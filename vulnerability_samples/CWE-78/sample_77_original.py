import os
import subprocess
import logging
from typing import List, Dict
from fastapi import FastAPI, Query, HTTPException, Depends
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
from datetime import datetime

app = FastAPI()

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class SearchResult(BaseModel):
    files: List[str]

class FileContent(BaseModel):
    filename: str
    content: str

class CommandOutput(BaseModel):
    output: str

class FileManager:
    @staticmethod
    def search_files(pattern: str) -> List[str]:
        try:
            result = subprocess.check_output(f"find . -name '*{pattern}*'", shell=True)
            return result.decode().strip().split('\n')
        except subprocess.CalledProcessError as e:
            logger.error(f"Search failed: {e}")
            raise HTTPException(status_code=400, detail="Search failed")

    @staticmethod
    def read_file(filename: str) -> str:
        if not os.path.exists(filename):
            logger.error(f"File not found: {filename}")
            raise HTTPException(status_code=404, detail="File not found")
        try:
            result = subprocess.check_output(f"cat {filename}", shell=True)
            return result.decode()
        except subprocess.CalledProcessError as e:
            logger.error(f"Failed to read file: {e}")
            raise HTTPException(status_code=400, detail="Failed to read file")

    @staticmethod
    def execute_command(command: str) -> str:
        try:
            result = subprocess.check_output(f"grep {command}", shell=True)
            return result.decode()
        except subprocess.CalledProcessError as e:
            logger.error(f"Command execution failed: {e}")
            raise HTTPException(status_code=400, detail="Command execution failed")

def get_file_manager():
    return FileManager()

@app.get("/", response_class=HTMLResponse)
async def root():
    return """
    <html>
        <body>
            <h1>File Search and Viewer</h1>
            <form action="/search" method="get">
                <input type="text" name="pattern" placeholder="Search pattern">
                <input type="submit" value="Search">
            </form>
            <form action="/view" method="get">
                <input type="text" name="filename" placeholder="File to view">
                <input type="submit" value="View">
            </form>
            <form action="/exec" method="get">
                <input type="text" name="command" placeholder="Execute command">
                <input type="submit" value="Execute">
            </form>
        </body>
    </html>
    """

@app.get("/search", response_model=SearchResult)
async def search_files(pattern: str = Query(...), file_manager: FileManager = Depends(get_file_manager)):
    logger.info(f"Searching for files with pattern: {pattern}")
    files = file_manager.search_files(pattern)
    return SearchResult(files=files)

@app.get("/view", response_model=FileContent)
async def view_file(filename: str = Query(...), file_manager: FileManager = Depends(get_file_manager)):
    logger.info(f"Viewing file: {filename}")
    content = file_manager.read_file(filename)
    return FileContent(filename=filename, content=content)

@app.get("/exec", response_model=CommandOutput)
async def exec_command(command: str = Query(...), file_manager: FileManager = Depends(get_file_manager)):
    logger.info(f"Executing command: {command}")
    output = file_manager.execute_command(command)
    return CommandOutput(output=output)

@app.get("/health")
async def health_check():
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

@app.get("/stats")
async def get_stats():
    return {
        "total_files": len(os.listdir('.')),
        "disk_usage": subprocess.check_output("du -sh .", shell=True).decode().strip()
    }

if __name__ == "__main__":
    import uvicorn
    logger.info("Starting the application")
    uvicorn.run(app, host="0.0.0.0", port=8000)

# Test cases
def test_search_files():
    file_manager = FileManager()
    result = file_manager.search_files("test")
    assert isinstance(result, list)

def test_read_file():
    file_manager = FileManager()
    content = file_manager.read_file("test.txt")
    assert isinstance(content, str)

def test_execute_command():
    file_manager = FileManager()
    output = file_manager.execute_command("test")
    assert isinstance(output, str)

# Run tests
if __name__ == "__main__":
    test_search_files()
    test_read_file()
    test_execute_command()
    print("All tests passed!")