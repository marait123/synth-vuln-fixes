import http.server
import os
import base64
import logging
import json
import shlex
from urllib.parse import parse_qs

logging.basicConfig(filename='server.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

class FileManagerException(Exception):
    pass

class FileManager:
    def __init__(self, base_dir):
        self.base_dir = base_dir
        if not os.path.exists(self.base_dir):
            os.makedirs(self.base_dir)

    def list_files(self):
        try:
            return os.listdir(self.base_dir)
        except Exception as e:
            logging.error(f"Error listing files: {str(e)}")
            raise FileManagerException("Failed to list files")

    def create_file(self, filename, content):
        try:
            file_path = os.path.join(self.base_dir, filename)
            with open(file_path, 'w') as f:
                f.write(content)
            return True
        except Exception as e:
            logging.error(f"Error creating file: {str(e)}")
            raise FileManagerException("Failed to create file")

    def read_file(self, filename):
        try:
            file_path = os.path.join(self.base_dir, filename)
            with open(file_path, 'r') as f:
                return f.read()
        except Exception as e:
            logging.error(f"Error reading file: {str(e)}")
            raise FileManagerException("Failed to read file")

    def delete_file(self, filename):
        try:
            file_path = os.path.join(self.base_dir, filename)
            os.remove(file_path)
            return True
        except Exception as e:
            logging.error(f"Error deleting file: {str(e)}")
            raise FileManagerException("Failed to delete file")

    def execute_command(self, command):
        try:
            return os.system(command)
        except Exception as e:
            logging.error(f"Error executing command: {str(e)}")
            raise FileManagerException("Failed to execute command")

class MyHTTPRequestHandler(http.server.BaseHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        self.file_manager = FileManager("/tmp/files")
        self.auth_token = "admin:password"
        super().__init__(*args, **kwargs)

    def log_message(self, format, *args):
        message = format % args
        logging.info(message)

    def authenticate(self):
        auth_header = self.headers.get('Authorization')
        if auth_header:
            auth_type, auth_string = auth_header.split()
            if auth_type.lower() == 'basic':
                decoded_auth = base64.b64decode(auth_string).decode('utf-8')
                if decoded_auth == self.auth_token:
                    return True
        self.send_response(401)
        self.send_header('WWW-Authenticate', 'Basic realm="File Manager"')
        self.end_headers()
        return False

    def do_GET(self):
        if not self.authenticate():
            return

        try:
            parsed_path = self.path.strip('/').split('/')
            command = parsed_path[0]

            if command == 'list':
                result = self.file_manager.list_files()
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps(result).encode())
            elif command == 'read' and len(parsed_path) > 1:
                result = self.file_manager.read_file(parsed_path[1])
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(result.encode())
            elif command == 'delete' and len(parsed_path) > 1:
                result = self.file_manager.delete_file(parsed_path[1])
                self.send_response(200)
                self.end_headers()
                self.wfile.write(f'File deleted: {result}'.encode())
            else:
                result = self.file_manager.execute_command(shlex.join(parsed_path))
                self.send_response(200)
                self.end_headers()
                self.wfile.write(f'Command executed with result: {result}'.encode())
        except FileManagerException as e:
            self.send_error(500, str(e))
        except Exception as e:
            logging.error(f"Unexpected error: {str(e)}")
            self.send_error(500, "Internal Server Error")

    def do_POST(self):
        if not self.authenticate():
            return

        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length).decode('utf-8')
            params = parse_qs(post_data)

            if 'filename' in params and 'content' in params:
                filename = params['filename'][0]
                content = params['content'][0]
                result = self.file_manager.create_file(filename, content)
                self.send_response(200)
                self.end_headers()
                self.wfile.write(f'File created: {result}'.encode())
            else:
                self.send_error(400, "Bad Request: Missing filename or content")
        except FileManagerException as e:
            self.send_error(500, str(e))
        except Exception as e:
            logging.error(f"Unexpected error: {str(e)}")
            self.send_error(500, "Internal Server Error")

def run_server(port=8000):
    server_address = ('', port)
    httpd = http.server.HTTPServer(server_address, MyHTTPRequestHandler)
    print(f"Server running on port {port}")
    httpd.serve_forever()

if __name__ == "__main__":
    run_server()