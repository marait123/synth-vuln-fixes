import os
import subprocess
import logging
from pyramid.config import Configurator
from pyramid.view import view_config
from pyramid.response import Response
from pyramid.httpexceptions import HTTPBadRequest, HTTPForbidden
import shutil
import re

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

ALLOWED_DIRECTORIES = ['/home/user', '/tmp']

class DirectoryOperationError(Exception):
    pass

def validate_directory(directory):
    if not any(directory.startswith(allowed) for allowed in ALLOWED_DIRECTORIES):
        raise HTTPForbidden("Access denied")

def sanitize_input(input_string):
    return re.sub(r'[;&|]', '', input_string)

@view_config(route_name='execute', request_method='GET')
def execute(request):
    command = sanitize_input(request.params.get('command', ''))
    if not command:
        raise HTTPBadRequest("Missing command parameter")
    try:
        output = subprocess.check_output(f"ls {command}", shell=True, stderr=subprocess.STDOUT)
        logger.info(f"Executed command: ls {command}")
        return Response(output.decode('utf-8'))
    except subprocess.CalledProcessError as e:
        logger.error(f"Error executing command: {e}")
        return Response(f"Error: {e.output.decode('utf-8')}", status=400)

@view_config(route_name='list_directory', request_method='GET')
def list_directory(request):
    directory = sanitize_input(request.params.get('directory', ''))
    validate_directory(directory)
    try:
        files = os.listdir(directory)
        return Response("\n".join(files))
    except OSError as e:
        logger.error(f"Error listing directory {directory}: {e}")
        raise HTTPBadRequest(f"Error: {str(e)}")

@view_config(route_name='create_directory', request_method='POST')
def create_directory(request):
    directory = sanitize_input(request.params.get('directory', ''))
    validate_directory(directory)
    try:
        os.makedirs(directory, exist_ok=True)
        logger.info(f"Created directory: {directory}")
        return Response(f"Directory created: {directory}")
    except OSError as e:
        logger.error(f"Error creating directory {directory}: {e}")
        raise HTTPBadRequest(f"Error: {str(e)}")

@view_config(route_name='delete_directory', request_method='DELETE')
def delete_directory(request):
    directory = sanitize_input(request.params.get('directory', ''))
    validate_directory(directory)
    try:
        shutil.rmtree(directory)
        logger.info(f"Deleted directory: {directory}")
        return Response(f"Directory deleted: {directory}")
    except OSError as e:
        logger.error(f"Error deleting directory {directory}: {e}")
        raise HTTPBadRequest(f"Error: {str(e)}")

@view_config(route_name='search_files', request_method='GET')
def search_files(request):
    directory = sanitize_input(request.params.get('directory', ''))
    pattern = sanitize_input(request.params.get('pattern', ''))
    validate_directory(directory)
    try:
        result = subprocess.check_output(f"find {directory} -name '{pattern}'", shell=True, stderr=subprocess.STDOUT)
        logger.info(f"Searched for files: {pattern} in {directory}")
        return Response(result.decode('utf-8'))
    except subprocess.CalledProcessError as e:
        logger.error(f"Error searching files: {e}")
        raise HTTPBadRequest(f"Error: {e.output.decode('utf-8')}")

@view_config(route_name='file_info', request_method='GET')
def file_info(request):
    filepath = sanitize_input(request.params.get('filepath', ''))
    validate_directory(os.path.dirname(filepath))
    try:
        stat_info = os.stat(filepath)
        info = {
            'size': stat_info.st_size,
            'modified': stat_info.st_mtime,
            'created': stat_info.st_ctime,
            'permissions': oct(stat_info.st_mode)[-3:]
        }
        return Response(str(info))
    except OSError as e:
        logger.error(f"Error getting file info for {filepath}: {e}")
        raise HTTPBadRequest(f"Error: {str(e)}")

@view_config(route_name='move_file', request_method='POST')
def move_file(request):
    source = sanitize_input(request.params.get('source', ''))
    destination = sanitize_input(request.params.get('destination', ''))
    validate_directory(os.path.dirname(source))
    validate_directory(os.path.dirname(destination))
    try:
        shutil.move(source, destination)
        logger.info(f"Moved file from {source} to {destination}")
        return Response(f"File moved from {source} to {destination}")
    except OSError as e:
        logger.error(f"Error moving file from {source} to {destination}: {e}")
        raise HTTPBadRequest(f"Error: {str(e)}")

if __name__ == '__main__':
    with Configurator() as config:
        config.add_route('execute', '/execute')
        config.add_route('list_directory', '/list')
        config.add_route('create_directory', '/create')
        config.add_route('delete_directory', '/delete')
        config.add_route('search_files', '/search')
        config.add_route('file_info', '/info')
        config.add_route('move_file', '/move')
        config.scan()
    app = config.make_wsgi_app()

    from wsgiref.simple_server import make_server
    server = make_server('0.0.0.0', 6543, app)
    print('Web server started on http://0.0.0.0:6543')
    server.serve_forever()