import sqlite3
from bottle import route, run, request, template, redirect
import subprocess
import shlex
import logging
from datetime import datetime

# Set up logging
logging.basicConfig(filename='app.log', level=logging.INFO)

# Database setup
conn = sqlite3.connect('commands.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS commands
             (id INTEGER PRIMARY KEY, command TEXT, timestamp TEXT)''')
conn.commit()

# Simulated user database
users = {'admin': 'password123'}

def check_auth(username, password):
    return username in users and users[username] == password

@route('/')
def index():
    return template('''
        <h1>Command Execution Interface</h1>
        <form action="/login" method="post">
            Username: <input name="username" type="text">
            Password: <input name="password" type="password">
            <input value="Log In" type="submit">
        </form>
    ''')

@route('/login', method='POST')
def login():
    username = request.forms.get('username')
    password = request.forms.get('password')
    if check_auth(username, password):
        return redirect('/dashboard')
    return "Login failed"

@route('/dashboard')
def dashboard():
    return template('''
        <h1>Command Dashboard</h1>
        <form action="/dynamic_execute" method="post">
            Command: <input name="command" type="text">
            <input value="Execute" type="submit">
        </form>
        <h2>Command History</h2>
        <ul>
            % for cmd in commands:
                <li>{{cmd[1]}} - {{cmd[2]}}</li>
            % end
        </ul>
    ''', commands=c.execute("SELECT * FROM commands ORDER BY timestamp DESC LIMIT 10").fetchall())

@route('/dynamic_execute', method='POST')
def dynamic_execute():
    command = request.forms.get('command')
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # Fixed command execution
    try:
        args = shlex.split(command)
        result = subprocess.run(args, shell=False, capture_output=True, text=True, timeout=10)
        output = result.stdout + result.stderr
    except subprocess.TimeoutExpired:
        output = "Command execution timed out"
    except Exception as e:
        output = f"Error executing command: {str(e)}"
    
    # Log the command
    logging.info(f"Executed command: {command}")
    
    # Store in database
    c.execute("INSERT INTO commands (command, timestamp) VALUES (?, ?)", (command, timestamp))
    conn.commit()
    
    return template('''
        <h1>Command Output</h1>
        <pre>{{output}}</pre>
        <a href="/dashboard">Back to Dashboard</a>
    ''', output=output)

run(host='localhost', port=8080, debug=True)