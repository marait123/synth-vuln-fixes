import os
import subprocess
import logging
from flask import Flask, request, render_template_string, jsonify
from werkzeug.utils import secure_filename

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

HTML_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>File Manager</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function() {
            $('form').on('submit', function(e) {
                e.preventDefault();
                var form = $(this);
                $.ajax({
                    url: form.attr('action'),
                    type: form.attr('method'),
                    data: form.serialize(),
                    success: function(response) {
                        $('#result').text(response.result);
                    }
                });
            });
        });
    </script>
</head>
<body>
    <h1>File Manager</h1>
    <h2>List Directory</h2>
    <form action="/list" method="get">
        <input type="text" name="directory" placeholder="Enter directory path">
        <input type="submit" value="List">
    </form>
    <h2>Create Directory</h2>
    <form action="/create" method="post">
        <input type="text" name="directory" placeholder="Enter directory path">
        <input type="submit" value="Create">
    </form>
    <h2>Delete Directory</h2>
    <form action="/delete" method="post">
        <input type="text" name="directory" placeholder="Enter directory path">
        <input type="submit" value="Delete">
    </form>
    <h2>Upload File</h2>
    <form action="/upload" method="post" enctype="multipart/form-data">
        <input type="file" name="file">
        <input type="submit" value="Upload">
    </form>
    <h2>Execute Command</h2>
    <form action="/execute" method="post">
        <input type="text" name="command" placeholder="Enter command">
        <input type="submit" value="Execute">
    </form>
    <hr>
    <h3>Result:</h3>
    <pre id="result">{{ result }}</pre>
</body>
</html>
"""

@app.route('/')
def index():
    return render_template_string(HTML_TEMPLATE, result="")

@app.route('/list')
def list_directory():
    directory = request.args.get("directory", ".")
    try:
        result = subprocess.check_output(f"ls -lah {directory}", shell=True, stderr=subprocess.STDOUT).decode()
        logging.info(f"Listed directory: {directory}")
    except subprocess.CalledProcessError as e:
        result = f"Error listing directory: {e.output.decode()}"
        logging.error(f"Error listing directory: {directory}")
    return jsonify({"result": result})

@app.route('/create', methods=['POST'])
def create_directory():
    directory = request.form.get("directory")
    try:
        os.makedirs(directory)
        result = f"Directory '{directory}' created successfully."
        logging.info(f"Created directory: {directory}")
    except Exception as e:
        result = f"Error creating directory: {str(e)}"
        logging.error(f"Error creating directory: {directory}")
    return jsonify({"result": result})

@app.route('/delete', methods=['POST'])
def delete_directory():
    directory = request.form.get("directory")
    try:
        os.rmdir(directory)
        result = f"Directory '{directory}' deleted successfully."
        logging.info(f"Deleted directory: {directory}")
    except Exception as e:
        result = f"Error deleting directory: {str(e)}"
        logging.error(f"Error deleting directory: {directory}")
    return jsonify({"result": result})

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({"result": "No file part"})
    file = request.files['file']
    if file.filename == '':
        return jsonify({"result": "No selected file"})
    if file:
        filename = secure_filename(file.filename)
        file.save(os.path.join("/tmp", filename))
        result = f"File '{filename}' uploaded successfully."
        logging.info(f"Uploaded file: {filename}")
        return jsonify({"result": result})

@app.route('/execute', methods=['POST'])
def execute_command():
    command = request.form.get("command")
    try:
        output = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT).decode()
        logging.info(f"Executed command: {command}")
        return jsonify({"result": output})
    except subprocess.CalledProcessError as e:
        result = f"Error executing command: {e.output.decode()}"
        logging.error(f"Error executing command: {command}")
        return jsonify({"result": result})

class FileManager:
    @staticmethod
    def get_file_info(path):
        try:
            stat = os.stat(path)
            return {
                "size": stat.st_size,
                "created": stat.st_ctime,
                "modified": stat.st_mtime,
                "is_directory": os.path.isdir(path)
            }
        except Exception as e:
            logging.error(f"Error getting file info: {path}")
            return {"error": str(e)}

@app.route('/file_info', methods=['GET'])
def get_file_info():
    path = request.args.get("path")
    info = FileManager.get_file_info(path)
    return jsonify(info)

def run_tests():
    assert os.path.exists("/tmp"), "Temp directory does not exist"
    assert subprocess.call(["ls", "-l"]) == 0, "ls command failed"
    print("All tests passed!")

if __name__ == '__main__':
    run_tests()
    app.run(debug=True)