import sqlite3
from bottle import route, run, request, template, redirect, response
import os
import logging
from datetime import datetime
import subprocess
import hashlib
import re

# Set up logging
logging.basicConfig(filename='app.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Database setup
conn = sqlite3.connect('commands.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS commands
             (id INTEGER PRIMARY KEY, command TEXT, timestamp TEXT, output TEXT)''')
c.execute('''CREATE TABLE IF NOT EXISTS users
             (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password_hash TEXT)''')
conn.commit()

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def init_users():
    c.execute("INSERT OR IGNORE INTO users (username, password_hash) VALUES (?, ?)",
              ('admin', hash_password('password123')))
    conn.commit()

init_users()

def check_auth(username, password):
    c.execute("SELECT password_hash FROM users WHERE username = ?", (username,))
    result = c.fetchone()
    if result:
        return result[0] == hash_password(password)
    return False

@route('/')
def index():
    return template('''
        <h1>Command Execution Interface</h1>
        <form action="/login" method="post">
            Username: <input name="username" type="text" required>
            Password: <input name="password" type="password" required>
            <input value="Log In" type="submit">
        </form>
    ''')

@route('/login', method='POST')
def login():
    username = request.forms.get('username')
    password = request.forms.get('password')
    if check_auth(username, password):
        response.set_cookie("username", username)
        return redirect('/dashboard')
    logging.warning(f"Failed login attempt for user: {username}")
    return "Login failed"

@route('/logout')
def logout():
    response.delete_cookie("username")
    return redirect('/')

@route('/dashboard')
def dashboard():
    username = request.get_cookie("username")
    if not username:
        return redirect('/')
    return template('''
        <h1>Command Dashboard</h1>
        <p>Welcome, {{username}}! <a href="/logout">Logout</a></p>
        <form action="/dynamic_execute" method="post">
            Command: <input name="command" type="text" required>
            <input value="Execute" type="submit">
        </form>
        <h2>Command History</h2>
        <ul>
            % for cmd in commands:
                <li>{{cmd[1]}} - {{cmd[2]}} - Output: {{cmd[3][:50]}}...</li>
            % end
        </ul>
    ''', username=username, commands=c.execute("SELECT * FROM commands ORDER BY timestamp DESC LIMIT 10").fetchall())

@route('/dynamic_execute', method='POST')
def dynamic_execute():
    username = request.get_cookie("username")
    if not username:
        return redirect('/')
    
    command = request.forms.get('command')
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # Vulnerable command execution
    try:
        output = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT, universal_newlines=True)
    except subprocess.CalledProcessError as e:
        output = e.output
    
    # Log the command
    logging.info(f"User {username} executed command: {command}")
    
    # Store in database
    c.execute("INSERT INTO commands (command, timestamp, output) VALUES (?, ?, ?)", (command, timestamp, output))
    conn.commit()
    
    return redirect('/dashboard')

@route('/add_user', method='POST')
def add_user():
    username = request.forms.get('username')
    password = request.forms.get('password')
    
    if not re.match(r'^[a-zA-Z0-9_]+$', username):
        return "Invalid username format"
    
    try:
        c.execute("INSERT INTO users (username, password_hash) VALUES (?, ?)",
                  (username, hash_password(password)))
        conn.commit()
        logging.info(f"New user added: {username}")
        return "User added successfully"
    except sqlite3.IntegrityError:
        return "Username already exists"

@route('/user_management')
def user_management():
    username = request.get_cookie("username")
    if username != 'admin':
        return "Access denied"
    
    users = c.execute("SELECT username FROM users").fetchall()
    return template('''
        <h1>User Management</h1>
        <h2>Add User</h2>
        <form action="/add_user" method="post">
            Username: <input name="username" type="text" required>
            Password: <input name="password" type="password" required>
            <input value="Add User" type="submit">
        </form>
        <h2>Existing Users</h2>
        <ul>
            % for user in users:
                <li>{{user[0]}}</li>
            % end
        </ul>
    ''', users=users)

def cleanup():
    conn.close()
    logging.info("Application shutting down, database connection closed.")

import atexit
atexit.register(cleanup)

if __name__ == "__main__":
    run(host='localhost', port=8080, debug=True)