import subprocess
import logging
import argparse
import json
import re
from typing import Optional, Dict, Any

class CustomException(Exception):
    pass

class InputValidationError(CustomException):
    pass

class CommandExecutionError(CustomException):
    pass

class SystemInfoManager:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

    def validate_input(self, param: str) -> bool:
        return bool(re.match(r'^[a-zA-Z0-9\s]+$', param))

    def execute_command(self, command: str) -> Optional[str]:
        try:
            self.logger.info(f"Executing command: {command}")
            result = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT)
            return result.decode().strip()
        except subprocess.CalledProcessError as e:
            self.logger.error(f"Command execution failed: {e}")
            raise CommandExecutionError(f"Command execution failed: {e}")

    def get_cpu_info(self, param: str) -> Optional[str]:
        if not self.validate_input(param):
            self.logger.warning(f"Invalid input: {param}")
            raise InputValidationError(f"Invalid input: {param}")
        command = f"lscpu | grep '{param}'"
        return self.execute_command(command)

    def get_memory_info(self, param: str) -> Optional[str]:
        if not self.validate_input(param):
            self.logger.warning(f"Invalid input: {param}")
            raise InputValidationError(f"Invalid input: {param}")
        command = f"free -m | grep '{param}'"
        return self.execute_command(command)

    def get_disk_info(self, param: str) -> Optional[str]:
        if not self.validate_input(param):
            self.logger.warning(f"Invalid input: {param}")
            raise InputValidationError(f"Invalid input: {param}")
        command = f"df -h | grep '{param}'"
        return self.execute_command(command)

    def get_network_info(self, param: str) -> Optional[str]:
        if not self.validate_input(param):
            self.logger.warning(f"Invalid input: {param}")
            raise InputValidationError(f"Invalid input: {param}")
        command = f"ifconfig | grep '{param}'"
        return self.execute_command(command)

    def get_process_info(self, param: str) -> Optional[str]:
        if not self.validate_input(param):
            self.logger.warning(f"Invalid input: {param}")
            raise InputValidationError(f"Invalid input: {param}")
        command = f"ps aux | grep '{param}'"
        return self.execute_command(command)

def system_info(event: Dict[str, Any], context: Any) -> str:
    manager = SystemInfoManager()
    info_type = event.get('type', '').lower()
    param = event.get('parameter', '')

    try:
        if info_type == 'cpu':
            return manager.get_cpu_info(param)
        elif info_type == 'memory':
            return manager.get_memory_info(param)
        elif info_type == 'disk':
            return manager.get_disk_info(param)
        elif info_type == 'network':
            return manager.get_network_info(param)
        elif info_type == 'process':
            return manager.get_process_info(param)
        else:
            return "Invalid information type requested"
    except CustomException as e:
        return str(e)

def parse_arguments() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="System Information Manager")
    parser.add_argument('--type', choices=['cpu', 'memory', 'disk', 'network', 'process'], required=True, help='Type of information to retrieve')
    parser.add_argument('--parameter', required=True, help='Parameter to search for')
    return parser.parse_args()

def main():
    args = parse_arguments()
    event = {'type': args.type, 'parameter': args.parameter}
    result = system_info(event, None)
    print(json.dumps({'result': result}, indent=2))

if __name__ == "__main__":
    main()

class TestSystemInfoManager:
    def setup_method(self):
        self.manager = SystemInfoManager()

    def test_validate_input(self):
        assert self.manager.validate_input("validInput123") == True
        assert self.manager.validate_input("invalid-input") == False

    def test_get_cpu_info(self):
        result = self.manager.get_cpu_info("Model name")
        assert "CPU" in result

    def test_get_memory_info(self):
        result = self.manager.get_memory_info("Mem")
        assert "Mem" in result

    def test_get_disk_info(self):
        result = self.manager.get_disk_info("Filesystem")
        assert "Filesystem" in result

    def test_invalid_input(self):
        try:
            self.manager.get_cpu_info("invalid;input")
        except InputValidationError:
            assert True
        else:
            assert False

def run_tests():
    test = TestSystemInfoManager()
    test.setup_method()
    test.test_validate_input()
    test.test_get_cpu_info()
    test.test_get_memory_info()
    test.test_get_disk_info()
    test.test_invalid_input()
    print("All tests passed successfully!")

if __name__ == "__main__":
    run_tests()