import os
import subprocess
import logging
import shlex
from pyramid.config import Configurator
from pyramid.view import view_config
from pyramid.response import Response

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuration
ALLOWED_DIRECTORIES = ['/home/user', '/tmp']

@view_config(route_name='execute', request_method='GET')
def execute(request):
    command = request.params.get('command', '')
    try:
        output = subprocess.check_output(["ls", command], shell=False)
        logger.info(f"Executed command: ls {command}")
        return Response(output)
    except subprocess.CalledProcessError as e:
        logger.error(f"Error executing command: {e}")
        return Response(f"Error: {str(e)}", status=400)

@view_config(route_name='list_directory', request_method='GET')
def list_directory(request):
    directory = request.params.get('directory', '')
    if not any(directory.startswith(allowed) for allowed in ALLOWED_DIRECTORIES):
        return Response("Access denied", status=403)
    try:
        files = os.listdir(directory)
        return Response("\n".join(files))
    except OSError as e:
        logger.error(f"Error listing directory {directory}: {e}")
        return Response(f"Error: {str(e)}", status=400)

@view_config(route_name='create_directory', request_method='POST')
def create_directory(request):
    directory = request.params.get('directory', '')
    if not any(directory.startswith(allowed) for allowed in ALLOWED_DIRECTORIES):
        return Response("Access denied", status=403)
    try:
        os.makedirs(directory, exist_ok=True)
        logger.info(f"Created directory: {directory}")
        return Response(f"Directory created: {directory}")
    except OSError as e:
        logger.error(f"Error creating directory {directory}: {e}")
        return Response(f"Error: {str(e)}", status=400)

@view_config(route_name='delete_directory', request_method='DELETE')
def delete_directory(request):
    directory = request.params.get('directory', '')
    if not any(directory.startswith(allowed) for allowed in ALLOWED_DIRECTORIES):
        return Response("Access denied", status=403)
    try:
        os.rmdir(directory)
        logger.info(f"Deleted directory: {directory}")
        return Response(f"Directory deleted: {directory}")
    except OSError as e:
        logger.error(f"Error deleting directory {directory}: {e}")
        return Response(f"Error: {str(e)}", status=400)

@view_config(route_name='search_files', request_method='GET')
def search_files(request):
    directory = request.params.get('directory', '')
    pattern = request.params.get('pattern', '')
    if not any(directory.startswith(allowed) for allowed in ALLOWED_DIRECTORIES):
        return Response("Access denied", status=403)
    try:
        command = ["find", directory, "-name", pattern]
        result = subprocess.check_output(command, shell=False)
        logger.info(f"Searched for files: {pattern} in {directory}")
        return Response(result)
    except subprocess.CalledProcessError as e:
        logger.error(f"Error searching files: {e}")
        return Response(f"Error: {str(e)}", status=400)

if __name__ == '__main__':
    with Configurator() as config:
        config.add_route('execute', '/execute')
        config.add_route('list_directory', '/list')
        config.add_route('create_directory', '/create')
        config.add_route('delete_directory', '/delete')
        config.add_route('search_files', '/search')
        config.scan()
    app = config.make_wsgi_app()