import configparser
import logging
from sqlalchemy import create_engine, text, Table, Column, Integer, String, MetaData
import subprocess
import os
import tkinter as tk
from tkinter import messagebox, filedialog
from reportlab.pdfgen import canvas
import csv
import random
import string

# Configure logging
logging.basicConfig(filename='app.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Read database configuration
config = configparser.ConfigParser()
config.read('config.ini')
db_url = config['Database']['url']

engine = create_engine(db_url)
metadata = MetaData()

# Define users table
users = Table('users', metadata,
    Column('id', Integer, primary_key=True),
    Column('name', String),
    Column('email', String),
    Column('department', String)
)

def generate_pdf_report(filename):
    try:
        c = canvas.Canvas(filename)
        with open('/tmp/sorted_user_report.txt', 'r') as f:
            y = 800
            for line in f:
                c.drawString(100, y, line.strip())
                y -= 15
        c.save()
        logging.info(f"PDF report generated: {filename}")
    except Exception as e:
        logging.error(f"Error generating PDF: {str(e)}")
        raise

def complex_db_operation(user_input):
    try:
        query = text("SELECT name, email FROM users WHERE department = :department")
        result = engine.execute(query, department=user_input).fetchall()

        with open('/tmp/user_report.txt', 'w') as f:
            for row in result:
                name, email = row
                f.write(f'Name: {name}, Email: {email}\n')
        
        subprocess.run("cat /tmp/user_report.txt | grep '@' | sort > /tmp/sorted_user_report.txt", shell=True)
        os.remove('/tmp/user_report.txt')

        generate_pdf_report("user_report.pdf")
        return "Report generated successfully."
    except Exception as e:
        logging.error(f"Error in database operation: {str(e)}")
        raise

def sanitize_input(input_string):
    return ''.join(char for char in input_string if char.isalnum() or char in [' ', '_'])

def generate_random_string(length):
    return ''.join(random.choice(string.ascii_letters) for _ in range(length))

def export_to_csv(filename):
    try:
        query = text("SELECT * FROM users")
        result = engine.execute(query).fetchall()
        
        with open(filename, 'w', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(['ID', 'Name', 'Email', 'Department'])
            for row in result:
                writer.writerow(row)
        logging.info(f"CSV export completed: {filename}")
    except Exception as e:
        logging.error(f"Error exporting to CSV: {str(e)}")
        raise

class Application(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.master.title("User Report Generator")
        self.pack()
        self.create_widgets()

    def create_widgets(self):
        self.department_label = tk.Label(self, text="Enter Department:")
        self.department_label.pack()
        self.department_entry = tk.Entry(self)
        self.department_entry.pack()
        self.submit_button = tk.Button(self, text="Generate Report", command=self.generate_report)
        self.submit_button.pack()
        self.export_button = tk.Button(self, text="Export to CSV", command=self.export_csv)
        self.export_button.pack()

    def generate_report(self):
        department = sanitize_input(self.department_entry.get())
        try:
            result = complex_db_operation(department)
            messagebox.showinfo("Success", result)
        except Exception as e:
            messagebox.showerror("Error", str(e))

    def export_csv(self):
        filename = filedialog.asksaveasfilename(defaultextension=".csv")
        if filename:
            try:
                export_to_csv(filename)
                messagebox.showinfo("Success", f"Data exported to {filename}")
            except Exception as e:
                messagebox.showerror("Error", str(e))

def setup_database():
    metadata.create_all(engine)
    # Insert some sample data
    with engine.connect() as conn:
        for _ in range(10):
            name = generate_random_string(8)
            email = f"{name.lower()}@example.com"
            department = random.choice(['IT', 'HR', 'Finance', 'Marketing'])
            conn.execute(users.insert().values(name=name, email=email, department=department))

if __name__ == "__main__":
    setup_database()
    root = tk.Tk()
    app = Application(master=root)
    app.mainloop()