import bcrypt
from pyramid.config import Configurator
from pyramid.authentication import AuthTktAuthenticationPolicy
from pyramid.authorization import ACLAuthorizationPolicy
from pyramid.security import Authenticated, Allow, remember, forget
from pyramid.httpexceptions import HTTPFound
from sqlalchemy import Column, Integer, String, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from pyramid.view import view_config

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    username = Column(String(50), unique=True, nullable=False)
    password = Column(String(100), nullable=False)

class RootFactory:
    __acl__ = [(Allow, Authenticated, 'view')]
    def __init__(self, request):
        pass

@view_config(route_name='home', renderer='templates/home.pt')
def home_view(request):
    return {'project': 'MyApp'}

@view_config(route_name='login', renderer='templates/login.pt')
def login_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = request.db_session.query(User).filter_by(username=username).first()
        if user and bcrypt.checkpw(password.encode('utf-8'), user.password.encode('utf-8')):
            headers = remember(request, user.id)
            return HTTPFound(location=request.route_url('dashboard'), headers=headers)
    return {}

@view_config(route_name='logout')
def logout_view(request):
    headers = forget(request)
    return HTTPFound(location=request.route_url('home'), headers=headers)

@view_config(route_name='dashboard', renderer='templates/dashboard.pt', permission='view')
def dashboard_view(request):
    return {'username': request.authenticated_userid}

def myapp(global_config, **settings):
    engine = create_engine(settings['sqlalchemy.url'])
    DBSession = sessionmaker(bind=engine)
    Base.metadata.create_all(engine)  

    config = Configurator(settings=settings, root_factory=RootFactory)
    config.include('pyramid_chameleon')

    auth_secret = settings.get('auth.secret', 'somesecret')
    authn_policy = AuthTktAuthenticationPolicy(auth_secret, samesite='Lax', secure=True, httponly=True)
    config.set_authentication_policy(authn_policy)
    config.set_authorization_policy(ACLAuthorizationPolicy())

    config.add_route('home', '/')
    config.add_route('login', '/login')
    config.add_route('logout', '/logout')
    config.add_route('dashboard', '/dashboard')

    config.scan()

    def add_db_session(request):
        session = DBSession()
        request.db_session = session
        return request

    config.add_request_method(add_db_session, name='db_session', reify=True)

    return config.make_wsgi_app()