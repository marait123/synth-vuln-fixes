import os
from pyramid.authentication import AuthTktAuthenticationPolicy
from pyramid.authorization import ACLAuthorizationPolicy
from pyramid.config import Configurator
from pyramid.response import Response
from pyramid.view import view_config
from pyramid.security import remember, forget, Authenticated
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    username = Column(String(50), unique=True)
    password = Column(String(100))

engine = create_engine('sqlite:///users.db')
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)

@view_config(route_name='home', renderer='string')
def home(request):
    return "Welcome to the home page!"

@view_config(route_name='login', renderer='string')
def login(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        session = Session()
        user = session.query(User).filter_by(username=username).first()
        if user and user.password == password:
            headers = remember(request, user.id)
            return Response("Login successful!", headers=headers)
        session.close()
        return Response("Login failed!")
    return "Please login"

@view_config(route_name='logout')
def logout(request):
    headers = forget(request)
    return Response("Logged out!", headers=headers)

@view_config(route_name='protected', renderer='string', permission='view')
def protected(request):
    return "This is a protected page!"

def add_routes(config):
    config.add_route('home', '/')
    config.add_route('login', '/login')
    config.add_route('logout', '/logout')
    config.add_route('protected', '/protected')

def setup_pyramid_app():
    config = Configurator()
    secret = os.environ.get('AUTH_SECRET', 'default_secret')
    authn_policy = AuthTktAuthenticationPolicy(secret, samesite='Lax', hashalg='sha512', secure=True, httponly=True)
    config.set_authentication_policy(authn_policy)
    config.set_authorization_policy(ACLAuthorizationPolicy())
    
    config.add_static_view('static', 'static', cache_max_age=3600)
    add_routes(config)
    config.scan()
    
    def groupfinder(userid, request):
        if userid:
            return ['group:users']
    
    config.set_root_factory(lambda request: {'group:users': ['view']})
    
    app = config.make_wsgi_app()
    return app

if __name__ == '__main__':
    from waitress import serve
    app = setup_pyramid_app()
    serve(app, host='0.0.0.0', port=6543)