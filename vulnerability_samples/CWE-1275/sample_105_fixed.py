from pyramid.view import view_config
from pyramid.httpexceptions import HTTPFound
from pyramid.security import remember, forget
from pyramid.authentication import AuthTktAuthenticationPolicy
from pyramid.authorization import ACLAuthorizationPolicy
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import time
import bcrypt

# Database setup
Base = declarative_base()
engine = create_engine('sqlite:///users.db')
Session = sessionmaker(bind=engine)

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    username = Column(String, unique=True, nullable=False)
    password = Column(String, nullable=False)
    email = Column(String, unique=True, nullable=False)

Base.metadata.create_all(engine)

def init_auth(config):
    auth_policy = AuthTktAuthenticationPolicy('secret', hashalg='sha512')
    config.set_authentication_policy(auth_policy)
    config.set_authorization_policy(ACLAuthorizationPolicy())

@view_config(route_name='login', renderer='templates/login.jinja2')
def login_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        db_session = Session()
        user = db_session.query(User).filter_by(username=username).first()
        if user and bcrypt.checkpw(password.encode('utf-8'), user.password.encode('utf-8')):
            headers = remember(request, user.id)
            response = HTTPFound(location='/dashboard', headers=headers)
            response.set_cookie('session_id', str(user.id), secure=True, httponly=True, samesite='Lax')
            return response
    return {}

@view_config(route_name='dashboard')
def dashboard_view(request):
    last_active = request.session.get('last_active')
    if last_active and (time.time() - last_active) < 1800:
        response = HTTPFound(location='/dashboard')
        response.set_cookie('session_id', request.session.session_id, secure=True, httponly=True, samesite='Lax')
    else:
        response = HTTPFound(location='/login')
    request.session['last_active'] = time.time()
    return response

@view_config(route_name='profile', renderer='templates/profile.jinja2')
def profile_view(request):
    user_id = request.authenticated_userid
    if user_id:
        db_session = Session()
        user = db_session.query(User).filter_by(id=user_id).first()
        return {'username': user.username, 'email': user.email}
    return HTTPFound(location='/login')

@view_config(route_name='logout')
def logout_view(request):
    headers = forget(request)
    response = HTTPFound(location='/login', headers=headers)
    response.set_cookie('session_id', '', max_age=0, secure=True, httponly=True, samesite='Lax')
    return response

def main(global_config, **settings):
    config = Configurator(settings=settings)
    init_auth(config)
    config.add_route('login', '/login')
    config.add_route('dashboard', '/dashboard')
    config.add_route('profile', '/profile')
    config.add_route('logout', '/logout')
    config.scan()
    return config.make_wsgi_app()