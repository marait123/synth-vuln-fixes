from pyramid.httpexceptions import HTTPFound
from pyramid.view import view_config
from pyramid.response import Response
from pyramid.security import remember, forget
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import bcrypt

# Database setup
engine = create_engine('sqlite:///users.db')
Base = declarative_base()
Session = sessionmaker(bind=engine)

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    username = Column(String, unique=True, nullable=False)
    password = Column(String, nullable=False)

Base.metadata.create_all(engine)

@view_config(route_name='home', renderer='templates/home.jinja2')
def home_view(request):
    return {'project': 'My Web Application'}

@view_config(route_name='login', renderer='templates/login.jinja2')
def login_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        
        session = Session()
        user = session.query(User).filter_by(username=username).first()
        session.close()

        if user and bcrypt.checkpw(password.encode('utf-8'), user.password.encode('utf-8')):
            response = HTTPFound(location='/dashboard')
            response.set_cookie('user_token', str(user.id), secure=True, httponly=True, samesite='Lax')
            return response
        else:
            return {'error': 'Invalid username or password'}
    
    return {}

@view_config(route_name='dashboard', renderer='templates/dashboard.jinja2')
def dashboard_view(request):
    user_id = request.cookies.get('user_token')
    if not user_id:
        return HTTPFound(location='/login')
    
    session = Session()
    user = session.query(User).filter_by(id=user_id).first()
    session.close()

    if user:
        return {'username': user.username}
    else:
        return HTTPFound(location='/login')

@view_config(route_name='logout')
def logout_view(request):
    response = HTTPFound(location='/')
    response.delete_cookie('user_token', samesite='Lax')
    return response

@view_config(route_name='register', renderer='templates/register.jinja2')
def register_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        
        session = Session()
        existing_user = session.query(User).filter_by(username=username).first()
        
        if existing_user:
            session.close()
            return {'error': 'Username already exists'}
        
        hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
        new_user = User(username=username, password=hashed_password.decode('utf-8'))
        session.add(new_user)
        session.commit()
        session.close()

        response = HTTPFound(location='/login')
        return response
    
    return {}