from pyramid.view import view_config
from pyramid.httpexceptions import HTTPFound, HTTPBadRequest
from pyramid.security import remember, forget
from pyramid.authentication import AuthTktAuthenticationPolicy
from pyramid.authorization import ACLAuthorizationPolicy
from sqlalchemy import create_engine, Column, Integer, String, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import SQLAlchemyError
import time
import bcrypt
import logging
import re
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Database setup
Base = declarative_base()
engine = create_engine('sqlite:///users.db')
Session = sessionmaker(bind=engine)

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    username = Column(String, unique=True, nullable=False)
    password = Column(String, nullable=False)
    email = Column(String, unique=True, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    last_login = Column(DateTime)

Base.metadata.create_all(engine)

def init_auth(config):
    auth_policy = AuthTktAuthenticationPolicy('secret', hashalg='sha512')
    config.set_authentication_policy(auth_policy)
    config.set_authorization_policy(ACLAuthorizationPolicy())

def validate_email(email):
    return re.match(r"[^@]+@[^@]+\.[^@]+", email)

def hash_password(password):
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

@view_config(route_name='register', renderer='templates/register.jinja2')
def register_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        email = request.POST.get('email')

        if not all([username, password, email]):
            return {'error': 'All fields are required'}

        if not validate_email(email):
            return {'error': 'Invalid email format'}

        try:
            db_session = Session()
            new_user = User(username=username, password=hash_password(password), email=email)
            db_session.add(new_user)
            db_session.commit()
            logger.info(f"New user registered: {username}")
            return HTTPFound(location='/login')
        except SQLAlchemyError as e:
            db_session.rollback()
            logger.error(f"Registration error: {str(e)}")
            return {'error': 'Username or email already exists'}
        finally:
            db_session.close()
    return {}

@view_config(route_name='login', renderer='templates/login.jinja2')
def login_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        
        if not all([username, password]):
            return {'error': 'Username and password are required'}

        try:
            db_session = Session()
            user = db_session.query(User).filter_by(username=username).first()
            if user and bcrypt.checkpw(password.encode('utf-8'), user.password.encode('utf-8')):
                user.last_login = datetime.utcnow()
                db_session.commit()
                headers = remember(request, user.id)
                response = HTTPFound(location='/dashboard', headers=headers)
                response.set_cookie('session_id', str(user.id), secure=True, httponly=True)
                logger.info(f"User logged in: {username}")
                return response
            else:
                return {'error': 'Invalid username or password'}
        except SQLAlchemyError as e:
            logger.error(f"Login error: {str(e)}")
            return {'error': 'An error occurred during login'}
        finally:
            db_session.close()
    return {}

@view_config(route_name='dashboard', renderer='templates/dashboard.jinja2')
def dashboard_view(request):
    user_id = request.authenticated_userid
    if not user_id:
        return HTTPFound(location='/login')

    last_active = request.session.get('last_active')
    if last_active and (time.time() - last_active) < 1800:
        try:
            db_session = Session()
            user = db_session.query(User).filter_by(id=user_id).first()
            request.session['last_active'] = time.time()
            return {'username': user.username, 'last_login': user.last_login}
        except SQLAlchemyError as e:
            logger.error(f"Dashboard error: {str(e)}")
            return HTTPBadRequest()
        finally:
            db_session.close()
    else:
        return HTTPFound(location='/login')

@view_config(route_name='profile', renderer='templates/profile.jinja2')
def profile_view(request):
    user_id = request.authenticated_userid
    if not user_id:
        return HTTPFound(location='/login')

    try:
        db_session = Session()
        user = db_session.query(User).filter_by(id=user_id).first()
        if request.method == 'POST':
            new_email = request.POST.get('email')
            if new_email and validate_email(new_email):
                user.email = new_email
                db_session.commit()
                logger.info(f"User {user.username} updated email")
                return {'success': 'Email updated successfully', 'username': user.username, 'email': user.email}
            else:
                return {'error': 'Invalid email format', 'username': user.username, 'email': user.email}
        return {'username': user.username, 'email': user.email}
    except SQLAlchemyError as e:
        logger.error(f"Profile error: {str(e)}")
        return HTTPBadRequest()
    finally:
        db_session.close()

@view_config(route_name='logout')
def logout_view(request):
    headers = forget(request)
    response = HTTPFound(location='/login', headers=headers)
    response.set_cookie('session_id', '', max_age=0)
    logger.info("User logged out")
    return response

def main(global_config, **settings):
    config = Configurator(settings=settings)
    init_auth(config)
    config.add_route('register', '/register')
    config.add_route('login', '/login')
    config.add_route('dashboard', '/dashboard')
    config.add_route('profile', '/profile')
    config.add_route('logout', '/logout')
    config.scan()
    return config.make_wsgi_app()

if __name__ == '__main__':
    from wsgiref.simple_server import make_server
    app = main({})
    server = make_server('0.0.0.0', 8080, app)
    print("Server started on http://0.0.0.0:8080")
    server.serve_forever()