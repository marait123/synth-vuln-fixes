import bcrypt
import logging
from pyramid.config import Configurator
from pyramid.authentication import AuthTktAuthenticationPolicy
from pyramid.authorization import ACLAuthorizationPolicy
from pyramid.security import Authenticated, Allow, remember, forget
from pyramid.httpexceptions import HTTPFound, HTTPBadRequest
from sqlalchemy import Column, Integer, String, create_engine, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from pyramid.view import view_config
from datetime import datetime
import os
import sys

Base = declarative_base()

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    username = Column(String(50), unique=True, nullable=False)
    password = Column(String(100), nullable=False)
    email = Column(String(100), unique=True, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)

class RootFactory:
    __acl__ = [(Allow, Authenticated, 'view')]
    def __init__(self, request):
        pass

@view_config(route_name='home', renderer='templates/home.pt')
def home_view(request):
    return {'project': 'MyApp'}

@view_config(route_name='login', renderer='templates/login.pt')
def login_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        if not username or not password:
            return HTTPBadRequest('Username and password are required')
        user = request.db_session.query(User).filter_by(username=username).first()
        if user and bcrypt.checkpw(password.encode('utf-8'), user.password.encode('utf-8')):
            headers = remember(request, user.id)
            logger.info(f"User {username} logged in successfully")
            return HTTPFound(location=request.route_url('dashboard'), headers=headers)
        logger.warning(f"Failed login attempt for user {username}")
    return {}

@view_config(route_name='logout')
def logout_view(request):
    headers = forget(request)
    logger.info(f"User {request.authenticated_userid} logged out")
    return HTTPFound(location=request.route_url('home'), headers=headers)

@view_config(route_name='dashboard', renderer='templates/dashboard.pt', permission='view')
def dashboard_view(request):
    return {'username': request.authenticated_userid}

@view_config(route_name='register', renderer='templates/register.pt')
def register_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        email = request.POST.get('email')
        if not username or not password or not email:
            return HTTPBadRequest('All fields are required')
        hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
        new_user = User(username=username, password=hashed_password.decode('utf-8'), email=email)
        try:
            request.db_session.add(new_user)
            request.db_session.commit()
            logger.info(f"New user registered: {username}")
            return HTTPFound(location=request.route_url('login'))
        except Exception as e:
            logger.error(f"Error registering user: {str(e)}")
            request.db_session.rollback()
            return HTTPBadRequest('An error occurred during registration')
    return {}

@view_config(route_name='profile', renderer='templates/profile.pt', permission='view')
def profile_view(request):
    user_id = request.authenticated_userid
    user = request.db_session.query(User).filter_by(id=user_id).first()
    if not user:
        return HTTPBadRequest('User not found')
    return {'user': user}

def myapp(global_config, **settings):
    engine = create_engine(settings['sqlalchemy.url'])
    DBSession = sessionmaker(bind=engine)
    Base.metadata.create_all(engine)

    config = Configurator(settings=settings, root_factory=RootFactory)
    config.include('pyramid_chameleon')

    auth_secret = settings.get('auth.secret', os.urandom(32))
    authn_policy = AuthTktAuthenticationPolicy(auth_secret, samesite='None', secure=True, httponly=True)
    config.set_authentication_policy(authn_policy)
    config.set_authorization_policy(ACLAuthorizationPolicy())

    config.add_route('home', '/')
    config.add_route('login', '/login')
    config.add_route('logout', '/logout')
    config.add_route('dashboard', '/dashboard')
    config.add_route('register', '/register')
    config.add_route('profile', '/profile')

    config.scan()

    def add_db_session(request):
        session = DBSession()
        request.add_finished_callback(lambda _: session.close())
        return session

    config.add_request_method(add_db_session, name='db_session', reify=True)

    return config.make_wsgi_app()

if __name__ == '__main__':
    from wsgiref.simple_server import make_server
    app = myapp({})
    server = make_server('0.0.0.0', 8080, app)
    print("Server started on http://0.0.0.0:8080")
    server.serve_forever()