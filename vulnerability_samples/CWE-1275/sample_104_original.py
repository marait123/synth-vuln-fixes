from pyramid.httpexceptions import HTTPFound, HTTPForbidden
from pyramid.view import view_config
from pyramid.response import Response
from pyramid.security import remember, forget
from sqlalchemy import create_engine, Column, Integer, String, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import bcrypt
import logging
import datetime
import os

# Set up logging
logging.basicConfig(filename='app.log', level=logging.INFO)
logger = logging.getLogger(__name__)

# Database setup
engine = create_engine('sqlite:///users.db')
Base = declarative_base()
Session = sessionmaker(bind=engine)

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    username = Column(String, unique=True, nullable=False)
    password = Column(String, nullable=False)
    email = Column(String, unique=True, nullable=False)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)

Base.metadata.create_all(engine)

def get_user_by_id(user_id):
    session = Session()
    try:
        return session.query(User).filter_by(id=user_id).first()
    finally:
        session.close()

def get_user_by_username(username):
    session = Session()
    try:
        return session.query(User).filter_by(username=username).first()
    finally:
        session.close()

@view_config(route_name='home', renderer='templates/home.jinja2')
def home_view(request):
    logger.info('Home page accessed')
    return {'project': 'My Web Application'}

@view_config(route_name='login', renderer='templates/login.jinja2')
def login_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        
        user = get_user_by_username(username)

        if user and bcrypt.checkpw(password.encode('utf-8'), user.password.encode('utf-8')):
            logger.info(f'User {username} logged in successfully')
            response = HTTPFound(location='/dashboard')
            response.set_cookie('user_token', str(user.id), secure=True, httponly=True)
            return response
        else:
            logger.warning(f'Failed login attempt for username: {username}')
            return {'error': 'Invalid username or password'}
    
    return {}

@view_config(route_name='dashboard', renderer='templates/dashboard.jinja2')
def dashboard_view(request):
    user_id = request.cookies.get('user_token')
    if not user_id:
        logger.warning('Unauthorized access attempt to dashboard')
        return HTTPFound(location='/login')
    
    user = get_user_by_id(user_id)

    if user:
        logger.info(f'User {user.username} accessed dashboard')
        return {'username': user.username}
    else:
        logger.warning(f'Invalid user token: {user_id}')
        return HTTPFound(location='/login')

@view_config(route_name='logout')
def logout_view(request):
    logger.info('User logged out')
    response = HTTPFound(location='/')
    response.delete_cookie('user_token')
    return response

@view_config(route_name='register', renderer='templates/register.jinja2')
def register_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        email = request.POST.get('email')
        
        if not username or not password or not email:
            return {'error': 'All fields are required'}
        
        session = Session()
        try:
            existing_user = session.query(User).filter((User.username == username) | (User.email == email)).first()
            
            if existing_user:
                return {'error': 'Username or email already exists'}
            
            hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
            new_user = User(username=username, password=hashed_password.decode('utf-8'), email=email)
            session.add(new_user)
            session.commit()
            logger.info(f'New user registered: {username}')
            return HTTPFound(location='/login')
        except Exception as e:
            logger.error(f'Error during user registration: {str(e)}')
            session.rollback()
            return {'error': 'An error occurred during registration'}
        finally:
            session.close()
    
    return {}

@view_config(route_name='profile', renderer='templates/profile.jinja2')
def profile_view(request):
    user_id = request.cookies.get('user_token')
    if not user_id:
        return HTTPFound(location='/login')
    
    user = get_user_by_id(user_id)
    if not user:
        return HTTPForbidden()

    if request.method == 'POST':
        new_email = request.POST.get('email')
        if new_email and new_email != user.email:
            session = Session()
            try:
                user.email = new_email
                session.commit()
                logger.info(f'User {user.username} updated email')
            except Exception as e:
                logger.error(f'Error updating user email: {str(e)}')
                session.rollback()
            finally:
                session.close()

    return {'user': user}

def main(global_config, **settings):
    from pyramid.config import Configurator
    config = Configurator(settings=settings)
    config.include('pyramid_jinja2')
    config.add_static_view('static', 'static', cache_max_age=3600)
    config.add_route('home', '/')
    config.add_route('login', '/login')
    config.add_route('logout', '/logout')
    config.add_route('register', '/register')
    config.add_route('dashboard', '/dashboard')
    config.add_route('profile', '/profile')
    config.scan()
    return config.make_wsgi_app()

if __name__ == '__main__':
    from wsgiref.simple_server import make_server
    app = main({})
    server = make_server('0.0.0.0', 6543, app)
    print('Web server started on http://0.0.0.0:6543')
    server.serve_forever()