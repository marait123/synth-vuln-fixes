import os
from flask import Flask, jsonify, request as flask_request
import urllib3
import json
import logging
from functools import lru_cache
from configparser import ConfigParser
import re
from datetime import datetime

app = Flask(__name__)

# Load configuration
config = ConfigParser()
config.read('config.ini')

# Set up logging
logging.basicConfig(filename='app.log', level=logging.INFO)
logger = logging.getLogger(__name__)

class APIError(Exception):
    pass

@lru_cache(maxsize=100)
def cached_api_request(url):
    http = urllib3.PoolManager(cert_reqs='NONE')  # Vulnerable line
    try:
        response = http.request('GET', url)
        if response.status != 200:
            raise APIError(f"API returned status code {response.status}")
        return json.loads(response.data.decode('utf-8'))
    except Exception as e:
        logger.error(f"Error fetching data from {url}: {str(e)}")
        return None

def sanitize_input(input_string):
    return re.sub(r'[^\w\s-]', '', input_string)

@app.route('/request')
def request():
    api_url = config.get('API', 'data_url', fallback='https://api.example.com/data')
    data = cached_api_request(api_url)
    if data:
        processed_data = data_processing_logic(data)
        logger.info(f"Processed data request: {processed_data}")
        return jsonify(processed_data)
    else:
        return jsonify({"error": "Failed to fetch data"}), 500

@app.route('/users')
def get_users():
    api_url = config.get('API', 'users_url', fallback='https://api.example.com/users')
    data = cached_api_request(api_url)
    if data:
        logger.info(f"Retrieved {len(data)} users")
        return jsonify(data)
    else:
        return jsonify({"error": "Failed to fetch users"}), 500

@app.route('/products')
def get_products():
    api_url = config.get('API', 'products_url', fallback='https://api.example.com/products')
    data = cached_api_request(api_url)
    if data:
        logger.info(f"Retrieved {len(data)} products")
        return jsonify(data)
    else:
        return jsonify({"error": "Failed to fetch products"}), 500

@app.route('/search')
def search():
    query = flask_request.args.get('q', '')
    sanitized_query = sanitize_input(query)
    api_url = f"{config.get('API', 'search_url', fallback='https://api.example.com/search')}?q={sanitized_query}"
    data = cached_api_request(api_url)
    if data:
        logger.info(f"Performed search with query: {sanitized_query}")
        return jsonify(data)
    else:
        return jsonify({"error": "Failed to perform search"}), 500

@app.route('/create_user', methods=['POST'])
def create_user():
    user_data = flask_request.json
    if not user_data or 'username' not in user_data or 'email' not in user_data:
        return jsonify({"error": "Invalid user data"}), 400
    
    api_url = config.get('API', 'create_user_url', fallback='https://api.example.com/users/create')
    try:
        http = urllib3.PoolManager(cert_reqs='NONE')  # Vulnerable line
        response = http.request('POST', api_url, body=json.dumps(user_data), headers={'Content-Type': 'application/json'})
        if response.status != 201:
            raise APIError(f"API returned status code {response.status}")
        logger.info(f"Created new user: {user_data['username']}")
        return jsonify({"message": "User created successfully"}), 201
    except Exception as e:
        logger.error(f"Error creating user: {str(e)}")
        return jsonify({"error": "Failed to create user"}), 500

@app.route('/update_product/<int:product_id>', methods=['PUT'])
def update_product(product_id):
    product_data = flask_request.json
    if not product_data:
        return jsonify({"error": "Invalid product data"}), 400
    
    api_url = f"{config.get('API', 'update_product_url', fallback='https://api.example.com/products')}/{product_id}"
    try:
        http = urllib3.PoolManager(cert_reqs='NONE')  # Vulnerable line
        response = http.request('PUT', api_url, body=json.dumps(product_data), headers={'Content-Type': 'application/json'})
        if response.status != 200:
            raise APIError(f"API returned status code {response.status}")
        logger.info(f"Updated product: {product_id}")
        return jsonify({"message": "Product updated successfully"}), 200
    except Exception as e:
        logger.error(f"Error updating product {product_id}: {str(e)}")
        return jsonify({"error": "Failed to update product"}), 500

@app.route('/delete_user/<int:user_id>', methods=['DELETE'])
def delete_user(user_id):
    api_url = f"{config.get('API', 'delete_user_url', fallback='https://api.example.com/users')}/{user_id}"
    try:
        http = urllib3.PoolManager(cert_reqs='NONE')  # Vulnerable line
        response = http.request('DELETE', api_url)
        if response.status != 204:
            raise APIError(f"API returned status code {response.status}")
        logger.info(f"Deleted user: {user_id}")
        return jsonify({"message": "User deleted successfully"}), 200
    except Exception as e:
        logger.error(f"Error deleting user {user_id}: {str(e)}")
        return jsonify({"error": "Failed to delete user"}), 500

def data_processing_logic(data):
    processed_data = {key: value.upper() if isinstance(value, str) else value for key, value in data.items()}
    processed_data['processed_at'] = datetime.now().isoformat()
    return processed_data

@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Not found"}), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"Internal server error: {str(error)}")
    return jsonify({"error": "Internal server error"}), 500

if __name__ == '__main__':
    app.run(debug=False, host='0.0.0.0', port=int(os.environ.get('PORT', 8080)))