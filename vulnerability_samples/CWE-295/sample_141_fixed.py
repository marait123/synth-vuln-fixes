import ssl
import urllib.request
import json
import logging
import os
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def fetch_data(url):
    context = ssl.create_default_context()
    req = urllib.request.Request(url)
    try:
        with urllib.request.urlopen(req, context=context) as response:
            data = response.read()
            return json.loads(data)
    except urllib.error.URLError as e:
        logging.error(f"Error fetching data: {e}")
        return None

def process_data(data):
    if isinstance(data, list):
        return [item.get('title') for item in data]
    elif isinstance(data, dict):
        return data.get('title')
    else:
        logging.warning("Unexpected data format")
        return None

def save_to_file(data, filename):
    try:
        with open(filename, 'w') as f:
            json.dump(data, f, indent=2)
        logging.info(f"Data saved to {filename}")
    except IOError as e:
        logging.error(f"Error saving data to file: {e}")

def get_api_data(api_url):
    logging.info(f"Fetching data from API: {api_url}")
    raw_data = fetch_data(api_url)
    if raw_data:
        processed_data = process_data(raw_data)
        if processed_data:
            return processed_data
        else:
            logging.warning("Failed to process data")
    else:
        logging.error("Failed to fetch data from API")
    return None

def main():
    api_url = "https://api.example.com/data"
    output_dir = "output"
    
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    data = get_api_data(api_url)
    if data:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = os.path.join(output_dir, f"processed_data_{timestamp}.json")
        save_to_file(data, filename)
    else:
        logging.error("No data to save")

if __name__ == "__main__":
    main()