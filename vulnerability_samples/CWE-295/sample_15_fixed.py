import os
from flask import Flask, jsonify, request as flask_request
import urllib3
import json
import logging
from functools import lru_cache
from configparser import ConfigParser

app = Flask(__name__)

# Load configuration
config = ConfigParser()
config.read('config.ini')

# Set up logging
logging.basicConfig(filename='app.log', level=logging.INFO)

# Create a secure PoolManager
http = urllib3.PoolManager()

@lru_cache(maxsize=100)
def cached_api_request(url):
    try:
        response = http.request('GET', url)
        return json.loads(response.data.decode('utf-8'))
    except Exception as e:
        logging.error(f"Error fetching data from {url}: {str(e)}")
        return None

@app.route('/request')
def request():
    api_url = config.get('API', 'data_url', fallback='https://api.example.com/data')
    data = cached_api_request(api_url)
    if data:
        processed_data = data_processing_logic(data)
        return jsonify(processed_data)
    else:
        return jsonify({"error": "Failed to fetch data"}), 500

@app.route('/users')
def get_users():
    api_url = config.get('API', 'users_url', fallback='https://api.example.com/users')
    data = cached_api_request(api_url)
    if data:
        return jsonify(data)
    else:
        return jsonify({"error": "Failed to fetch users"}), 500

@app.route('/products')
def get_products():
    api_url = config.get('API', 'products_url', fallback='https://api.example.com/products')
    data = cached_api_request(api_url)
    if data:
        return jsonify(data)
    else:
        return jsonify({"error": "Failed to fetch products"}), 500

@app.route('/search')
def search():
    query = flask_request.args.get('q', '')
    api_url = f"{config.get('API', 'search_url', fallback='https://api.example.com/search')}?q={query}"
    data = cached_api_request(api_url)
    if data:
        return jsonify(data)
    else:
        return jsonify({"error": "Failed to perform search"}), 500

def data_processing_logic(data):
    return {key: value.upper() if isinstance(value, str) else value for key, value in data.items()}

if __name__ == '__main__':
    app.run(debug=False, host='0.0.0.0', port=int(os.environ.get('PORT', 8080)))