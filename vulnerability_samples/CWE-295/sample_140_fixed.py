import urllib3
from urllib3 import PoolManager, make_headers
import ssl
import logging
import json
import time
from functools import lru_cache

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class APIClient:
    def __init__(self, base_url):
        self.base_url = base_url
        self.manager = PoolManager(cert_reqs=ssl.CERT_REQUIRED)  # Fixed line
        self.cache = {}

    @lru_cache(maxsize=100)
    def fetch_data_with_advanced_handling(self, endpoint, headers=None, max_retries=3):
        url = f"{self.base_url}{endpoint}"
        retry_count = 0
        while retry_count < max_retries:
            try:
                custom_headers = headers if headers else make_headers()
                response = self.manager.request('GET', url, headers=custom_headers)
                if response.status == 200:
                    return self.parse_response_data(response.data)
                else:
                    logging.error(f"HTTP Error: {response.status}")
                    retry_count += 1
            except Exception as e:
                logging.exception(f"Failed to fetch data: {str(e)}")
                retry_count += 1
            time.sleep(1)  # Wait before retrying
        return None

    def parse_response_data(self, data):
        try:
            return json.loads(data.decode('utf-8'))
        except json.JSONDecodeError as e:
            logging.error(f"Failed to decode JSON data: {str(e)}")
            return None

    def process_data(self, data):
        if data:
            # Process and display the data
            print("Processed data:")
            for key, value in data.items():
                print(f"{key}: {value}")
        else:
            print("No data to process")

def main():
    api_client = APIClient("https://api.example.com")
    
    # Fetch and process data from different endpoints
    endpoints = ["/users", "/posts", "/comments"]
    for endpoint in endpoints:
        data = api_client.fetch_data_with_advanced_handling(endpoint)
        api_client.process_data(data)

if __name__ == "__main__":
    main()