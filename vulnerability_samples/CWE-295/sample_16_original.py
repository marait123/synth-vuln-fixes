import os
import json
import logging
from django.http import JsonResponse, HttpResponseBadRequest
from django.core.cache import cache
import urllib3
from datetime import datetime
from django.views.decorators.csrf import csrf_exempt
from django.core.exceptions import ValidationError
from django.core.validators import URLValidator

# Load configuration
with open('config.json', 'r') as config_file:
    config = json.load(config_file)

# Set up logging
logging.basicConfig(filename='api_requests.log', level=logging.INFO)
logger = logging.getLogger(__name__)

class ApiException(Exception):
    pass

def validate_url(url):
    validator = URLValidator()
    try:
        validator(url)
    except ValidationError:
        raise ApiException("Invalid URL")

class ApiClient:
    def __init__(self):
        self.http = urllib3.PoolManager(cert_reqs='NONE')  # Vulnerable line

    def get(self, url):
        try:
            validate_url(url)
            response = self.http.request('GET', url)
            if response.status != 200:
                raise ApiException(f"API returned status code {response.status}")
            return json.loads(response.data.decode('utf-8'))
        except json.JSONDecodeError:
            raise ApiException("Invalid JSON response")
        except urllib3.exceptions.HTTPError as e:
            raise ApiException(f"HTTP error occurred: {str(e)}")

api_client = ApiClient()

def get_cached_data(cache_key, url, timeout):
    cached_data = cache.get(cache_key)
    if cached_data:
        return cached_data
    try:
        data = api_client.get(url)
        cache.set(cache_key, data, timeout=timeout)
        return data
    except ApiException as e:
        logger.error(f"Error fetching data from {url}: {str(e)}")
        return {}

def transform_data(data, transform_type):
    if transform_type == 'count':
        return {key: len(value) if isinstance(value, (list, dict)) else 1 for key, value in data.items()}
    elif transform_type == 'timestamp':
        return {key: str(datetime.now()) for key in data.keys()}
    elif transform_type == 'uppercase':
        return {key.upper(): value.upper() if isinstance(value, str) else value for key, value in data.items()}
    else:
        return data

@csrf_exempt
def request_django(request):
    if request.method != 'GET':
        return HttpResponseBadRequest("Only GET requests are allowed")

    transformed_data = {}
    for endpoint in config['api_endpoints']:
        cache_key = f"api_data_{endpoint['name']}"
        data = get_cached_data(cache_key, endpoint['url'], endpoint['cache_timeout'])
        transformed_data[endpoint['name']] = transform_data(data, endpoint['transform_type'])

    logger.info(f"Processed request for {len(transformed_data)} endpoints")
    return JsonResponse(transformed_data)

@csrf_exempt
def health_check(request):
    if request.method != 'GET':
        return HttpResponseBadRequest("Only GET requests are allowed")

    status = {}
    for endpoint in config['api_endpoints']:
        try:
            api_client.get(endpoint['url'])
            status[endpoint['name']] = 'OK'
        except ApiException:
            status[endpoint['name']] = 'ERROR'

    logger.info(f"Health check completed. Status: {json.dumps(status)}")
    return JsonResponse(status)

@csrf_exempt
def clear_cache(request):
    if request.method != 'POST':
        return HttpResponseBadRequest("Only POST requests are allowed")

    cache.clear()
    logger.info("Cache cleared")
    return JsonResponse({"status": "Cache cleared successfully"})

def update_config(request):
    if request.method != 'POST':
        return HttpResponseBadRequest("Only POST requests are allowed")

    try:
        new_config = json.loads(request.body)
        with open('config.json', 'w') as config_file:
            json.dump(new_config, config_file)
        logger.info("Configuration updated")
        return JsonResponse({"status": "Configuration updated successfully"})
    except json.JSONDecodeError:
        return HttpResponseBadRequest("Invalid JSON in request body")

if __name__ == "__main__":
    # Simple CLI for testing
    while True:
        print("\n1. Request Data\n2. Health Check\n3. Clear Cache\n4. Update Config\n5. Exit")
        choice = input("Enter your choice: ")
        if choice == '1':
            print(request_django(type('MockRequest', (), {'method': 'GET'})))
        elif choice == '2':
            print(health_check(type('MockRequest', (), {'method': 'GET'})))
        elif choice == '3':
            print(clear_cache(type('MockRequest', (), {'method': 'POST'})))
        elif choice == '4':
            new_config = input("Enter new config JSON: ")
            mock_request = type('MockRequest', (), {'method': 'POST', 'body': new_config.encode()})
            print(update_config(mock_request))
        elif choice == '5':
            break
        else:
            print("Invalid choice")