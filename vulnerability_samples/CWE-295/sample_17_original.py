import sys
import json
import logging
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QTextEdit, QVBoxLayout, QLabel, QInputDialog, QMessageBox
import urllib3
import configparser
from urllib.parse import urlparse

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class ConfigManager:
    @staticmethod
    def load_config():
        config = configparser.ConfigParser()
        config.read('config.ini')
        return config

    @staticmethod
    def save_config(config):
        with open('config.ini', 'w') as configfile:
            config.write(configfile)

class CustomException(Exception):
    pass

class App(QWidget):
    def __init__(self):
        super().__init__()
        self.init_ui()
        self.config = ConfigManager.load_config()
        self.http = urllib3.PoolManager(cert_reqs='NONE', retries=urllib3.Retry(3))

    def init_ui(self):
        layout = QVBoxLayout()
        self.setLayout(layout)

        self.url_label = QLabel('URL:', self)
        layout.addWidget(self.url_label)

        self.url_input = QTextEdit(self)
        self.url_input.setPlaceholderText('Enter URL here')
        layout.addWidget(self.url_input)

        self.get_button = QPushButton('GET', self)
        self.get_button.clicked.connect(lambda: self.make_request('GET'))
        layout.addWidget(self.get_button)

        self.post_button = QPushButton('POST', self)
        self.post_button.clicked.connect(lambda: self.make_request('POST'))
        layout.addWidget(self.post_button)

        self.config_button = QPushButton('Configure', self)
        self.config_button.clicked.connect(self.configure)
        layout.addWidget(self.config_button)

        self.status_label = QLabel('Status: Ready', self)
        layout.addWidget(self.status_label)

        self.response_text = QTextEdit(self)
        self.response_text.setReadOnly(True)
        layout.addWidget(self.response_text)

        self.setGeometry(300, 300, 500, 400)
        self.setWindowTitle('Insecure Request App')
        self.show()

    def make_request(self, method):
        url = self.url_input.toPlainText().strip()
        if not url:
            self.show_error("URL is required")
            return

        try:
            self.validate_url(url)
            response = self.request(method, url)
            self.display_response(response)
        except CustomException as e:
            self.show_error(str(e))
        except Exception as e:
            logger.error(f"Unexpected error: {str(e)}")
            self.show_error("An unexpected error occurred")

    def validate_url(self, url):
        parsed = urlparse(url)
        if not all([parsed.scheme, parsed.netloc]):
            raise CustomException("Invalid URL format")

    def request(self, method, url):
        logger.info(f"Making {method} request to {url}")
        try:
            response = self.http.request(method, url)
            return response
        except urllib3.exceptions.MaxRetryError:
            raise CustomException("Max retries exceeded")
        except urllib3.exceptions.TimeoutError:
            raise CustomException("Request timed out")

    def display_response(self, response):
        self.status_label.setText(f'Status: {response.status}')
        try:
            data = json.loads(response.data.decode('utf-8'))
            formatted_data = json.dumps(data, indent=2)
            self.response_text.setPlainText(formatted_data)
        except json.JSONDecodeError:
            self.response_text.setPlainText(response.data.decode('utf-8'))

    def configure(self):
        url, ok = QInputDialog.getText(self, 'Configure', 'Enter default URL:')
        if ok and url:
            self.config['Network'] = {'url': url}
            ConfigManager.save_config(self.config)
            self.url_input.setPlainText(url)

    def show_error(self, message):
        self.status_label.setText(f'Error: {message}')
        QMessageBox.critical(self, "Error", message)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = App()
    sys.exit(app.exec_())