import cherrypy
import sqlite3
import ssl
import json
import os
import logging
from datetime import datetime

# Load configuration
with open('config.json', 'r') as config_file:
    config = json.load(config_file)

# Set up logging
logging.basicConfig(filename='app.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Database setup
def init_db():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT, created_at DATETIME)''')
    conn.commit()
    conn.close()

init_db()

class DatabaseManager:
    @staticmethod
    def execute_query(query, params=None):
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        try:
            if params:
                c.execute(query, params)
            else:
                c.execute(query)
            conn.commit()
            return c.fetchall()
        except sqlite3.Error as e:
            logging.error(f"Database error: {e}")
            return None
        finally:
            conn.close()

class UserManagement:
    @cherrypy.expose
    def register(self, username, password):
        if not username or not password:
            return "Username and password are required."
        try:
            created_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            DatabaseManager.execute_query(
                "INSERT INTO users (username, password, created_at) VALUES (?, ?, ?)",
                (username, password, created_at)
            )
            logging.info(f"User {username} registered successfully")
            return f"User {username} registered successfully!"
        except sqlite3.IntegrityError:
            return "Username already exists."
        except Exception as e:
            logging.error(f"Error during registration: {e}")
            return "An error occurred during registration."

    @cherrypy.expose
    def login(self, username, password):
        if not username or not password:
            return "Username and password are required."
        try:
            result = DatabaseManager.execute_query(
                "SELECT * FROM users WHERE username=? AND password=?",
                (username, password)
            )
            if result:
                logging.info(f"User {username} logged in successfully")
                return f"Welcome, {username}!"
            else:
                return "Invalid credentials."
        except Exception as e:
            logging.error(f"Error during login: {e}")
            return "An error occurred during login."

    @cherrypy.expose
    def list_users(self):
        try:
            users = DatabaseManager.execute_query("SELECT username, created_at FROM users")
            return json.dumps(users)
        except Exception as e:
            logging.error(f"Error listing users: {e}")
            return "An error occurred while listing users."

    @cherrypy.expose
    def delete_user(self, username):
        try:
            DatabaseManager.execute_query("DELETE FROM users WHERE username=?", (username,))
            logging.info(f"User {username} deleted")
            return f"User {username} deleted successfully."
        except Exception as e:
            logging.error(f"Error deleting user: {e}")
            return "An error occurred while deleting the user."

class HelloWorld:
    @cherrypy.expose
    def index(self):
        return "Hello CherryPy!"

    @cherrypy.expose
    def about(self):
        return "This is a sample CherryPy application."

    user_management = UserManagement()

def validate_config():
    required_keys = ['server', 'ssl']
    for key in required_keys:
        if key not in config:
            raise ValueError(f"Missing '{key}' in config file")
    if 'host' not in config['server'] or 'port' not in config['server']:
        raise ValueError("Missing 'host' or 'port' in server config")
    if 'certificate' not in config['ssl'] or 'private_key' not in config['ssl']:
        raise ValueError("Missing 'certificate' or 'private_key' in SSL config")

if __name__ == '__main__':
    try:
        validate_config()
        cherrypy.config.update({
            'server.socket_host': config['server']['host'],
            'server.socket_port': config['server']['port'],
            'server.ssl_module': 'builtin',
            'server.ssl_certificate': config['ssl']['certificate'],
            'server.ssl_private_key': config['ssl']['private_key'],
            'server.ssl_context': ssl._create_unverified_context()  # Vulnerable
        })
        cherrypy.quickstart(HelloWorld())
    except Exception as e:
        logging.critical(f"Failed to start server: {e}")
        print(f"Critical error: {e}")

# Test cases
def run_tests():
    test_user = "testuser"
    test_password = "testpass"

    um = UserManagement()
    print("Running tests...")
    print("1. Register user:", um.register(test_user, test_password))
    print("2. Login user:", um.login(test_user, test_password))
    print("3. List users:", um.list_users())
    print("4. Delete user:", um.delete_user(test_user))
    print("Tests completed.")

# Uncomment to run tests
# run_tests()