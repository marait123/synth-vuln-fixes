import xmlrpc.client
import ssl
import logging
import configparser
import os

class RemoteServiceClient:
    def __init__(self, config_file):
        self.config = self._load_config(config_file)
        self.logger = self._setup_logger()
        self.server_url = self.config.get('Server', 'url')
        self.context = ssl.create_default_context()  # Fixed: Using default context
        self.server = xmlrpc.client.ServerProxy(self.server_url, context=self.context)

    def _load_config(self, config_file):
        if not os.path.exists(config_file):
            raise FileNotFoundError(f"Config file not found: {config_file}")
        config = configparser.ConfigParser()
        config.read(config_file)
        return config

    def _setup_logger(self):
        logger = logging.getLogger('RemoteServiceClient')
        logger.setLevel(logging.INFO)
        handler = logging.StreamHandler()
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        logger.addHandler(handler)
        return logger

    def get_user_info(self, user_id):
        try:
            self.logger.info(f"Fetching user info for user_id: {user_id}")
            return self.server.get_user_info(user_id)
        except xmlrpc.client.Fault as err:
            self.logger.error(f"XML-RPC fault: {err}")
            return None

    def update_user_status(self, user_id, status):
        try:
            self.logger.info(f"Updating status for user_id: {user_id}")
            return self.server.update_user_status(user_id, status)
        except xmlrpc.client.Fault as err:
            self.logger.error(f"XML-RPC fault: {err}")
            return False

    def list_active_users(self):
        try:
            self.logger.info("Fetching list of active users")
            return self.server.list_active_users()
        except xmlrpc.client.Fault as err:
            self.logger.error(f"XML-RPC fault: {err}")
            return []

def main():
    client = RemoteServiceClient('config.ini')
    print(client.get_user_info(123))
    print(client.update_user_status(123, "online"))
    print(client.list_active_users())

if __name__ == "__main__":
    main()