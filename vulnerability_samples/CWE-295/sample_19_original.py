import xmlrpc.client
import ssl
import logging
import configparser
import os
import json
import argparse
from datetime import datetime

class CustomException(Exception):
    pass

class RemoteServiceClient:
    def __init__(self, config_file):
        self.config = self._load_config(config_file)
        self.logger = self._setup_logger()
        self.server_url = self.config.get('Server', 'url')
        self.context = ssl._create_unverified_context()  # Vulnerable
        self.server = xmlrpc.client.ServerProxy(self.server_url, context=self.context)

    def _load_config(self, config_file):
        if not os.path.exists(config_file):
            raise FileNotFoundError(f"Config file not found: {config_file}")
        config = configparser.ConfigParser()
        config.read(config_file)
        return config

    def _setup_logger(self):
        logger = logging.getLogger('RemoteServiceClient')
        logger.setLevel(logging.INFO)
        handler = logging.StreamHandler()
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        logger.addHandler(handler)
        return logger

    def _sanitize_input(self, input_data):
        if isinstance(input_data, str):
            return input_data.strip().replace('<', '&lt;').replace('>', '&gt;')
        return input_data

    def get_user_info(self, user_id):
        try:
            self.logger.info(f"Fetching user info for user_id: {user_id}")
            user_id = self._sanitize_input(user_id)
            return self.server.get_user_info(user_id)
        except xmlrpc.client.Fault as err:
            self.logger.error(f"XML-RPC fault: {err}")
            raise CustomException(f"Failed to fetch user info: {err}")
        except Exception as e:
            self.logger.error(f"Unexpected error: {e}")
            raise CustomException(f"Unexpected error occurred: {e}")

    def update_user_status(self, user_id, status):
        try:
            self.logger.info(f"Updating status for user_id: {user_id}")
            user_id = self._sanitize_input(user_id)
            status = self._sanitize_input(status)
            return self.server.update_user_status(user_id, status)
        except xmlrpc.client.Fault as err:
            self.logger.error(f"XML-RPC fault: {err}")
            raise CustomException(f"Failed to update user status: {err}")
        except Exception as e:
            self.logger.error(f"Unexpected error: {e}")
            raise CustomException(f"Unexpected error occurred: {e}")

    def list_active_users(self):
        try:
            self.logger.info("Fetching list of active users")
            return self.server.list_active_users()
        except xmlrpc.client.Fault as err:
            self.logger.error(f"XML-RPC fault: {err}")
            raise CustomException(f"Failed to fetch active users: {err}")
        except Exception as e:
            self.logger.error(f"Unexpected error: {e}")
            raise CustomException(f"Unexpected error occurred: {e}")

    def create_user(self, username, email):
        try:
            self.logger.info(f"Creating new user: {username}")
            username = self._sanitize_input(username)
            email = self._sanitize_input(email)
            return self.server.create_user(username, email)
        except xmlrpc.client.Fault as err:
            self.logger.error(f"XML-RPC fault: {err}")
            raise CustomException(f"Failed to create user: {err}")
        except Exception as e:
            self.logger.error(f"Unexpected error: {e}")
            raise CustomException(f"Unexpected error occurred: {e}")

    def delete_user(self, user_id):
        try:
            self.logger.info(f"Deleting user: {user_id}")
            user_id = self._sanitize_input(user_id)
            return self.server.delete_user(user_id)
        except xmlrpc.client.Fault as err:
            self.logger.error(f"XML-RPC fault: {err}")
            raise CustomException(f"Failed to delete user: {err}")
        except Exception as e:
            self.logger.error(f"Unexpected error: {e}")
            raise CustomException(f"Unexpected error occurred: {e}")

def save_to_json(data, filename):
    with open(filename, 'w') as f:
        json.dump(data, f, indent=2)

def load_from_json(filename):
    with open(filename, 'r') as f:
        return json.load(f)

def main():
    parser = argparse.ArgumentParser(description="Remote Service Client")
    parser.add_argument('--config', default='config.ini', help='Path to config file')
    parser.add_argument('--action', choices=['get', 'update', 'list', 'create', 'delete'], required=True)
    parser.add_argument('--user-id', help='User ID for get, update, or delete actions')
    parser.add_argument('--status', help='New status for update action')
    parser.add_argument('--username', help='Username for create action')
    parser.add_argument('--email', help='Email for create action')
    args = parser.parse_args()

    client = RemoteServiceClient(args.config)

    try:
        if args.action == 'get':
            result = client.get_user_info(args.user_id)
            print(f"User info: {result}")
        elif args.action == 'update':
            result = client.update_user_status(args.user_id, args.status)
            print(f"Update status: {'Success' if result else 'Failed'}")
        elif args.action == 'list':
            result = client.list_active_users()
            print(f"Active users: {result}")
        elif args.action == 'create':
            result = client.create_user(args.username, args.email)
            print(f"User created with ID: {result}")
        elif args.action == 'delete':
            result = client.delete_user(args.user_id)
            print(f"User deletion: {'Success' if result else 'Failed'}")

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        save_to_json(result, f"result_{timestamp}.json")

    except CustomException as e:
        print(f"Error: {e}")
    except Exception as e:
        print(f"Unexpected error: {e}")

if __name__ == "__main__":
    main()