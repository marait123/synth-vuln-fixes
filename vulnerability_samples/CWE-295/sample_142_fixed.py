import urllib3
import ssl
import json
import time

class APIConfig:
    def __init__(self, base_url, max_retries=3, backoff_factor=0.3):
        self.base_url = base_url
        self.max_retries = max_retries
        self.backoff_factor = backoff_factor

class APIClient:
    def __init__(self, config):
        self.config = config
        self.http = urllib3.connection_from_url(config.base_url, cert_reqs=ssl.CERT_REQUIRED)

    def _request_with_retry(self, method, endpoint, **kwargs):
        retries = 0
        while retries < self.config.max_retries:
            try:
                response = self.http.request(method, endpoint, **kwargs)
                if response.status == 200:
                    return response.data.decode()
                elif response.status >= 500:
                    retries += 1
                    time.sleep(self.config.backoff_factor * (2 ** retries))
                else:
                    return None
            except Exception as e:
                print(f"Error: {str(e)}")
                retries += 1
                time.sleep(self.config.backoff_factor * (2 ** retries))
        return None

    def get_ip(self):
        return self._request_with_retry('GET', '/ip')

    def post_data(self, data):
        encoded_data = json.dumps(data).encode('utf-8')
        return self._request_with_retry('POST', '/post', body=encoded_data, headers={'Content-Type': 'application/json'})

    def get_user_agent(self):
        return self._request_with_retry('GET', '/user-agent')

    def get_headers(self):
        return self._request_with_retry('GET', '/headers')

def main():
    config = APIConfig('https://httpbin.org')
    client = APIClient(config)

    ip_info = client.get_ip()
    if ip_info:
        print("IP Information:", ip_info)

    post_result = client.post_data({'key': 'value'})
    if post_result:
        print("POST Response:", post_result)

    user_agent = client.get_user_agent()
    if user_agent:
        print("User-Agent:", user_agent)

    headers = client.get_headers()
    if headers:
        print("Headers:", headers)

if __name__ == "__main__":
    main()