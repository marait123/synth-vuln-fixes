import os
import logging
from pyramid.authentication import AuthTktCookieHelper
from pyramid.config import Configurator
from pyramid.view import view_config
from pyramid.authorization import ACLAuthorizationPolicy
from pyramid.security import Allow, Everyone, Authenticated
from pyramid.response import Response
from sqlalchemy import create_engine, Column, Integer, String, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from passlib.hash import bcrypt
from datetime import datetime
import argparse

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    username = Column(String(50), unique=True, nullable=False)
    password = Column(String(100), nullable=False)
    email = Column(String(100), unique=True, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)

class RootFactory(object):
    __acl__ = [(Allow, Everyone, 'view'),
               (Allow, Authenticated, 'edit')]
    def __init__(self, request):
        pass

class MyApplication:
    def __init__(self):
        self.config = Configurator(root_factory=RootFactory)
        self.engine = create_engine('sqlite:///myapp.db')
        Base.metadata.create_all(self.engine)
        self.Session = sessionmaker(bind=self.engine)
        self.logger = self.setup_logging()

    def setup_logging(self):
        logger = logging.getLogger(__name__)
        logger.setLevel(logging.INFO)
        handler = logging.FileHandler('myapp.log')
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        logger.addHandler(handler)
        return logger

    def setup_routes(self):
        self.config.add_route('home', '/')
        self.config.add_route('login', '/login')
        self.config.add_route('logout', '/logout')
        self.config.add_route('register', '/register')
        self.config.add_route('dashboard', '/dashboard')
        self.config.add_route('user_profile', '/profile/{username}')
        self.config.scan()

    def setup_security(self):
        secret = os.environ.get('AUTH_SECRET', 'default_secret')
        authn_policy = AuthTktCookieHelper(secret, httponly=True)
        self.config.set_authentication_policy(authn_policy)
        authz_policy = ACLAuthorizationPolicy()
        self.config.set_authorization_policy(authz_policy)

    def create_app(self):
        self.setup_security()
        self.setup_routes()
        return self.config.make_wsgi_app()

@view_config(route_name='home', renderer='string')
def home_view(request):
    return 'Welcome to the Home Page'

@view_config(route_name='login', renderer='string', request_method='POST')
def login_view(request):
    username = request.POST.get('username')
    password = request.POST.get('password')
    session = request.registry.Session()
    try:
        user = session.query(User).filter_by(username=username).first()
        if user and bcrypt.verify(password, user.password):
            headers = request.authentication.remember(request, user.id)
            request.app.logger.info(f"User {username} logged in successfully")
            return Response('Login successful', headers=headers)
        request.app.logger.warning(f"Failed login attempt for user {username}")
        return Response('Login failed')
    except Exception as e:
        request.app.logger.error(f"Error during login: {str(e)}")
        return Response('An error occurred during login')
    finally:
        session.close()

@view_config(route_name='logout', renderer='string')
def logout_view(request):
    headers = request.authentication.forget(request)
    request.app.logger.info("User logged out")
    return Response('Logged out', headers=headers)

@view_config(route_name='register', renderer='string', request_method='POST')
def register_view(request):
    username = request.POST.get('username')
    password = request.POST.get('password')
    email = request.POST.get('email')
    session = request.registry.Session()
    try:
        existing_user = session.query(User).filter_by(username=username).first()
        if existing_user:
            request.app.logger.warning(f"Registration attempt with existing username: {username}")
            return Response('Username already exists')
        hashed_password = bcrypt.hash(password)
        new_user = User(username=username, password=hashed_password, email=email)
        session.add(new_user)
        session.commit()
        request.app.logger.info(f"New user registered: {username}")
        return Response('User registered successfully')
    except Exception as e:
        session.rollback()
        request.app.logger.error(f"Error during user registration: {str(e)}")
        return Response('An error occurred during registration')
    finally:
        session.close()

@view_config(route_name='dashboard', renderer='string', permission='edit')
def dashboard_view(request):
    return 'Welcome to your dashboard'

@view_config(route_name='user_profile', renderer='string')
def user_profile_view(request):
    username = request.matchdict['username']
    session = request.registry.Session()
    try:
        user = session.query(User).filter_by(username=username).first()
        if user:
            return f"Profile of {user.username} (Email: {user.email})"
        return "User not found"
    except Exception as e:
        request.app.logger.error(f"Error fetching user profile: {str(e)}")
        return "An error occurred while fetching the user profile"
    finally:
        session.close()

def parse_args():
    parser = argparse.ArgumentParser(description="Run the MyApplication server")
    parser.add_argument('--host', default='0.0.0.0', help='Host to run the server on')
    parser.add_argument('--port', type=int, default=6543, help='Port to run the server on')
    return parser.parse_args()

if __name__ == '__main__':
    args = parse_args()
    app = MyApplication()
    wsgi_app = app.create_app()
    from waitress import serve
    app.logger.info(f"Starting server on {args.host}:{args.port}")
    serve(wsgi_app, host=args.host, port=args.port)