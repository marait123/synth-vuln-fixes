import os
from pyramid.authentication import AuthTktCookieHelper
from pyramid.config import Configurator
from pyramid.view import view_config
from pyramid.authorization import ACLAuthorizationPolicy
from pyramid.security import Allow, Everyone, Authenticated
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from passlib.hash import bcrypt

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    username = Column(String(50), unique=True, nullable=False)
    password = Column(String(100), nullable=False)

class RootFactory(object):
    __acl__ = [(Allow, Everyone, 'view'),
               (Allow, Authenticated, 'edit')]
    def __init__(self, request):
        pass

class MyApplication:
    def __init__(self):
        self.config = Configurator(root_factory=RootFactory)
        self.engine = create_engine('sqlite:///myapp.db')
        Base.metadata.create_all(self.engine)
        self.Session = sessionmaker(bind=self.engine)

    def setup_routes(self):
        self.config.add_route('home', '/')
        self.config.add_route('login', '/login')
        self.config.add_route('logout', '/logout')
        self.config.add_route('register', '/register')
        self.config.add_route('dashboard', '/dashboard')
        self.config.scan()

    def setup_security(self):
        secret = os.environ.get('AUTH_SECRET', 'default_secret')
        authn_policy = AuthTktCookieHelper(secret, secure=True, httponly=True)
        self.config.set_authentication_policy(authn_policy)
        authz_policy = ACLAuthorizationPolicy()
        self.config.set_authorization_policy(authz_policy)

    def create_app(self):
        self.setup_security()
        self.setup_routes()
        return self.config.make_wsgi_app()

@view_config(route_name='home', renderer='string')
def home_view(request):
    return 'Welcome to the Home Page'

@view_config(route_name='login', renderer='string', request_method='POST')
def login_view(request):
    username = request.POST.get('username')
    password = request.POST.get('password')
    session = request.registry.Session()
    user = session.query(User).filter_by(username=username).first()
    if user and bcrypt.verify(password, user.password):
        headers = request.authentication.remember(request, user.id)
        return Response('Login successful', headers=headers)
    return Response('Login failed')

@view_config(route_name='logout', renderer='string')
def logout_view(request):
    headers = request.authentication.forget(request)
    return Response('Logged out', headers=headers)

@view_config(route_name='register', renderer='string', request_method='POST')
def register_view(request):
    username = request.POST.get('username')
    password = request.POST.get('password')
    session = request.registry.Session()
    existing_user = session.query(User).filter_by(username=username).first()
    if existing_user:
        return Response('Username already exists')
    hashed_password = bcrypt.hash(password)
    new_user = User(username=username, password=hashed_password)
    session.add(new_user)
    session.commit()
    return Response('User registered successfully')

@view_config(route_name='dashboard', renderer='string', permission='edit')
def dashboard_view(request):
    return 'Welcome to your dashboard'

if __name__ == '__main__':
    app = MyApplication()
    wsgi_app = app.create_app()
    from waitress import serve
    serve(wsgi_app, host='0.0.0.0', port=6543)