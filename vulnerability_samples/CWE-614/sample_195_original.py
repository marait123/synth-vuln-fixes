from pyramid.authentication import AuthTktAuthenticationPolicy
from pyramid.authorization import ACLAuthorizationPolicy
from pyramid.config import Configurator
from pyramid.response import Response
from pyramid.view import view_config
from pyramid.security import remember, forget, authenticated_userid
from pyramid.httpexceptions import HTTPFound, HTTPBadRequest
import os
import sqlite3
import logging
import bcrypt
from functools import wraps

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class DatabaseError(Exception):
    pass

class UserExistsError(Exception):
    pass

def db_connect():
    try:
        conn = sqlite3.connect('users.db')
        return conn
    except sqlite3.Error as e:
        logger.error(f"Database connection error: {e}")
        raise DatabaseError("Failed to connect to the database")

def init_db():
    try:
        conn = db_connect()
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS users
                     (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT)''')
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Database initialization error: {e}")
        raise DatabaseError("Failed to initialize the database")
    finally:
        conn.close()

def get_user(username):
    try:
        conn = db_connect()
        c = conn.cursor()
        c.execute("SELECT * FROM users WHERE username=?", (username,))
        user = c.fetchone()
        return user
    except sqlite3.Error as e:
        logger.error(f"Error fetching user: {e}")
        raise DatabaseError("Failed to fetch user from the database")
    finally:
        conn.close()

def add_user(username, password):
    try:
        conn = db_connect()
        c = conn.cursor()
        hashed = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
        c.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, hashed))
        conn.commit()
    except sqlite3.IntegrityError:
        raise UserExistsError("Username already exists")
    except sqlite3.Error as e:
        logger.error(f"Error adding user: {e}")
        raise DatabaseError("Failed to add user to the database")
    finally:
        conn.close()

def require_login(func):
    @wraps(func)
    def wrapper(request):
        if not authenticated_userid(request):
            return HTTPFound(location='/login')
        return func(request)
    return wrapper

@view_config(route_name='home', renderer='string')
def home(request):
    user = authenticated_userid(request)
    if user:
        return f"Welcome, {user}! <a href='/logout'>Logout</a> | <a href='/profile'>Profile</a>"
    return "Welcome! Please <a href='/login'>login</a> or <a href='/register'>register</a>."

@view_config(route_name='login', renderer='string')
def login(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        try:
            user = get_user(username)
            if user and bcrypt.checkpw(password.encode('utf-8'), user[2]):
                headers = remember(request, username)
                return HTTPFound(location='/', headers=headers)
            return "Invalid credentials"
        except DatabaseError as e:
            logger.error(f"Login error: {e}")
            return "An error occurred. Please try again later."
    return '''
        <form method="POST">
            Username: <input type="text" name="username"><br>
            Password: <input type="password" name="password"><br>
            <input type="submit" value="Login">
        </form>
    '''

@view_config(route_name='logout')
def logout(request):
    headers = forget(request)
    return HTTPFound(location='/', headers=headers)

@view_config(route_name='register', renderer='string')
def register(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        try:
            add_user(username, password)
            return HTTPFound(location='/login')
        except UserExistsError:
            return "Username already exists"
        except DatabaseError as e:
            logger.error(f"Registration error: {e}")
            return "An error occurred. Please try again later."
    return '''
        <form method="POST">
            Username: <input type="text" name="username"><br>
            Password: <input type="password" name="password"><br>
            <input type="submit" value="Register">
        </form>
    '''

@view_config(route_name='profile', renderer='string')
@require_login
def profile(request):
    username = authenticated_userid(request)
    return f"Profile for {username}"

def init_app():
    init_db()
    secret = os.environ.get('AUTH_SECRET', 'default_secret')
    authentication_policy = AuthTktAuthenticationPolicy(secret, hashalg='sha512', secure=False, httponly=True)
    authorization_policy = ACLAuthorizationPolicy()
    config = Configurator()
    config.set_authentication_policy(authentication_policy)
    config.set_authorization_policy(authorization_policy)
    config.add_route('home', '/')
    config.add_route('login', '/login')
    config.add_route('logout', '/logout')
    config.add_route('register', '/register')
    config.add_route('profile', '/profile')
    config.scan()
    return config.make_wsgi_app()

if __name__ == '__main__':
    from wsgiref.simple_server import make_server
    app = init_app()
    server = make_server('0.0.0.0', 8080, app)
    logger.info("Server starting on port 8080...")
    server.serve_forever()