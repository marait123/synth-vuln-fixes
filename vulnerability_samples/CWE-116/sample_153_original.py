import sqlite3
import logging
from jinja2 import Environment, select_autoescape
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class DatabaseError(Exception):
    pass

class UserNotFoundError(Exception):
    pass

class ReportGenerator:
    def __init__(self, template, db_path):
        self.template = template
        self.db_path = db_path
        self.init_db()

    def init_db(self):
        conn = self.connect_to_db()
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users
                          (id INTEGER PRIMARY KEY, name TEXT, email TEXT, role TEXT)''')
        cursor.execute('''CREATE TABLE IF NOT EXISTS reports
                          (id INTEGER PRIMARY KEY, user_id INTEGER, content TEXT, created_at TEXT)''')
        conn.commit()
        conn.close()

    def connect_to_db(self):
        try:
            return sqlite3.connect(self.db_path)
        except sqlite3.Error as e:
            logging.error(f"Database connection error: {e}")
            raise DatabaseError("Failed to connect to the database")

    def get_user_data(self, user_id):
        conn = self.connect_to_db()
        cursor = conn.cursor()
        cursor.execute("SELECT name, email, role FROM users WHERE id = ?", (user_id,))
        user_data = cursor.fetchone()
        conn.close()
        if not user_data:
            raise UserNotFoundError(f"User with id {user_id} not found")
        return user_data

    def get_report_data(self, user_id):
        user_data = self.get_user_data(user_id)
        return {
            "user": user_data[0],
            "email": user_data[1],
            "role": user_data[2],
            "summary": "User activity report",
            "data": "Some sensitive data here",
            "generated_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }

    def generate_report(self, user_id):
        env = Environment()  # Vulnerable: autoescape not enabled
        template = env.from_string(self.template)
        report_data = self.get_report_data(user_id)
        return template.render(report_data)

    def save_report(self, user_id, report_content):
        conn = self.connect_to_db()
        cursor = conn.cursor()
        created_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute("INSERT INTO reports (user_id, content, created_at) VALUES (?, ?, ?)",
                       (user_id, report_content, created_at))
        conn.commit()
        conn.close()

    def list_reports(self, user_id):
        conn = self.connect_to_db()
        cursor = conn.cursor()
        cursor.execute("SELECT id, created_at FROM reports WHERE user_id = ?", (user_id,))
        reports = cursor.fetchall()
        conn.close()
        return reports

    def delete_report(self, report_id):
        conn = self.connect_to_db()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM reports WHERE id = ?", (report_id,))
        conn.commit()
        conn.close()

    def add_user(self, name, email, role):
        conn = self.connect_to_db()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO users (name, email, role) VALUES (?, ?, ?)", (name, email, role))
        user_id = cursor.lastrowid
        conn.commit()
        conn.close()
        return user_id

template = """
<html>
<head>
    <title>User Report</title>
</head>
<body>
    <h1>Report for {{ user }}</h1>
    <p>Email: {{ email }}</p>
    <p>Role: {{ role }}</p>
    <p>Summary: {{ summary }}</p>
    <p>Data: {{ data }}</p>
    <p>Generated at: {{ generated_at }}</p>
</body>
</html>
"""

def main():
    db_path = "user_reports.db"
    report_generator = ReportGenerator(template, db_path)
    
    while True:
        print("\n1. Generate Report")
        print("2. List Reports")
        print("3. Delete Report")
        print("4. Add User")
        print("5. Exit")
        choice = input("Enter your choice: ")
        
        if choice == '1':
            user_id = int(input("Enter user ID: "))
            try:
                report_content = report_generator.generate_report(user_id)
                report_generator.save_report(user_id, report_content)
                print("Report generated and saved successfully.")
            except UserNotFoundError as e:
                print(f"Error: {e}")
            except DatabaseError as e:
                print(f"Database error: {e}")
        elif choice == '2':
            user_id = int(input("Enter user ID: "))
            reports = report_generator.list_reports(user_id)
            for report in reports:
                print(f"Report ID: {report[0]}, Created at: {report[1]}")
        elif choice == '3':
            report_id = int(input("Enter report ID to delete: "))
            report_generator.delete_report(report_id)
            print("Report deleted successfully.")
        elif choice == '4':
            name = input("Enter user name: ")
            email = input("Enter user email: ")
            role = input("Enter user role: ")
            user_id = report_generator.add_user(name, email, role)
            print(f"User added successfully. User ID: {user_id}")
        elif choice == '5':
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()