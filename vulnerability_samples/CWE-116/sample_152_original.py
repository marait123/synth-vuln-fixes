import jinja2
import logging
from flask import Flask, render_template_string, request, redirect, url_for, session, jsonify
from werkzeug.security import generate_password_hash, check_password_hash
from functools import wraps
import os

app = Flask(__name__)
app.secret_key = os.urandom(24)

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Mock user database
users = {
    'admin': {'password': generate_password_hash('admin123'), 'bio': 'I am the admin', 'interests': ['coding', 'security']},
    'user1': {'password': generate_password_hash('user123'), 'bio': 'Regular user', 'interests': ['reading', 'gaming']}
}

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'username' not in session:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

@app.route('/')
def home():
    env = jinja2.Environment(loader=jinja2.FileSystemLoader('templates'), autoescape=True)
    template = env.get_template('home.html')
    return template.render(username=session.get('username', 'Guest'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if username in users and check_password_hash(users[username]['password'], password):
            session['username'] = username
            logging.info(f"User {username} logged in successfully")
            return redirect(url_for('dashboard'))
        logging.warning(f"Failed login attempt for user {username}")
        return 'Invalid credentials'
    return render_template_string('<form method="post"><input name="username"><input name="password" type="password"><input type="submit"></form>')

@app.route('/logout')
def logout():
    username = session.pop('username', None)
    if username:
        logging.info(f"User {username} logged out")
    return redirect(url_for('home'))

@app.route('/dashboard')
@login_required
def dashboard():
    env = jinja2.Environment(loader=jinja2.FileSystemLoader('templates'), autoescape=False)
    username = session['username']
    bio = users[username]['bio']
    interests = ','.join(users[username]['interests'])
    template = env.get_template('dashboard.html')
    return template.render(username=username, bio=bio, interests=interests)

@app.route('/profile/<username>')
def profile(username):
    env = jinja2.Environment(loader=jinja2.FileSystemLoader('templates'), autoescape=True)
    if username not in users:
        logging.warning(f"Attempted to access non-existent user profile: {username}")
        return 'User not found', 404
    bio = users[username]['bio']
    interests = users[username]['interests']
    template = env.get_template('profile.html')
    return template.render(username=username, bio=bio, interests=interests)

@app.route('/search')
def search():
    env = jinja2.Environment(loader=jinja2.FileSystemLoader('templates'), autoescape=True)
    query = request.args.get('q', '')
    results = [user for user in users if query.lower() in user.lower()]
    template = env.get_template('search.html')
    return template.render(query=query, results=results)

@app.route('/api/users', methods=['GET'])
@login_required
def get_users():
    return jsonify({user: {'bio': data['bio'], 'interests': data['interests']} for user, data in users.items()})

@app.route('/api/user/<username>', methods=['GET', 'PUT', 'DELETE'])
@login_required
def user_operations(username):
    if request.method == 'GET':
        if username not in users:
            return jsonify({'error': 'User not found'}), 404
        return jsonify({'username': username, 'bio': users[username]['bio'], 'interests': users[username]['interests']})
    elif request.method == 'PUT':
        if username not in users:
            return jsonify({'error': 'User not found'}), 404
        data = request.json
        if 'bio' in data:
            users[username]['bio'] = data['bio']
        if 'interests' in data:
            users[username]['interests'] = data['interests']
        logging.info(f"Updated user profile for {username}")
        return jsonify({'message': 'User updated successfully'})
    elif request.method == 'DELETE':
        if username not in users:
            return jsonify({'error': 'User not found'}), 404
        del users[username]
        logging.info(f"Deleted user: {username}")
        return jsonify({'message': 'User deleted successfully'})

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if username in users:
            return 'Username already exists', 400
        users[username] = {
            'password': generate_password_hash(password),
            'bio': 'New user',
            'interests': []
        }
        logging.info(f"New user registered: {username}")
        return redirect(url_for('login'))
    return render_template_string('<form method="post"><input name="username"><input name="password" type="password"><input type="submit"></form>')

@app.errorhandler(404)
def page_not_found(e):
    return render_template_string('404 - Page Not Found'), 404

@app.errorhandler(500)
def internal_server_error(e):
    logging.error(f"Internal Server Error: {str(e)}")
    return render_template_string('500 - Internal Server Error'), 500

if __name__ == '__main__':
    app.run(debug=True)

# Test cases
def test_login():
    with app.test_client() as client:
        response = client.post('/login', data={'username': 'admin', 'password': 'admin123'})
        assert response.status_code == 302

def test_profile():
    with app.test_client() as client:
        response = client.get('/profile/admin')
        assert response.status_code == 200
        assert b'I am the admin' in response.data

def test_search():
    with app.test_client() as client:
        response = client.get('/search?q=admin')
        assert response.status_code == 200
        assert b'admin' in response.data