from django.http import HttpRequest, JsonResponse
from django.core.exceptions import ValidationError
import logging
import json
from typing import Dict, Any
from decimal import Decimal, InvalidOperation

logger = logging.getLogger(__name__)

class TemperatureConversionError(Exception):
    pass

def validate_temperature_range(temperature: Decimal, unit: str) -> None:
    ranges = {
        'C': (-273.15, 1000),
        'F': (-459.67, 1832),
        'K': (0, 1273.15),
        'R': (0, 2291.67)
    }
    if unit not in ranges:
        raise ValidationError(f"Invalid unit: {unit}")
    min_temp, max_temp = ranges[unit]
    if temperature < min_temp or temperature > max_temp:
        raise ValidationError(f"Temperature out of range for {unit}")

def parse_temperature(temperature_input: str) -> Decimal:
    try:
        return Decimal(temperature_input)
    except InvalidOperation:
        raise ValueError(f"Invalid temperature input: {temperature_input}")

def convert_temperature(request: HttpRequest) -> JsonResponse:
    temperature_input = request.GET.get('temperature')
    unit = request.GET.get('unit', '').upper()
    
    try:
        temperature = parse_temperature(temperature_input)
        validate_temperature_range(temperature, unit)
    except ValueError as e:
        logger.error(str(e))
        return JsonResponse({"error": str(e)}, status=400)
    except ValidationError as e:
        logger.error(f"Temperature validation error: {str(e)}")
        return JsonResponse({"error": str(e)}, status=400)

    try:
        result = perform_conversion(temperature, unit)
        logger.info(f"Temperature conversion: {temperature} {unit} converted to multiple units")
        return JsonResponse(result)
    except TemperatureConversionError as e:
        logger.error(str(e))
        return JsonResponse({"error": str(e)}, status=400)

def perform_conversion(temperature: Decimal, unit: str) -> Dict[str, Any]:
    conversion_functions = {
        'C': convert_from_celsius,
        'F': convert_from_fahrenheit,
        'K': convert_from_kelvin,
        'R': convert_from_rankine
    }
    if unit not in conversion_functions:
        raise TemperatureConversionError(f"Invalid unit provided: {unit}")
    return conversion_functions[unit](temperature)

def convert_from_celsius(celsius: Decimal) -> Dict[str, Any]:
    fahrenheit = (celsius * Decimal('9/5')) + 32
    kelvin = celsius + Decimal('273.15')
    rankine = (celsius + Decimal('273.15')) * Decimal('9/5')
    return {
        'input_temperature': celsius,
        'unit_input': '°C',
        'fahrenheit': fahrenheit,
        'kelvin': kelvin,
        'rankine': rankine
    }

def convert_from_fahrenheit(fahrenheit: Decimal) -> Dict[str, Any]:
    celsius = (fahrenheit - 32) * Decimal('5/9')
    kelvin = (fahrenheit - 32) * Decimal('5/9') + Decimal('273.15')
    rankine = fahrenheit + Decimal('459.67')
    return {
        'input_temperature': fahrenheit,
        'unit_input': '°F',
        'celsius': celsius,
        'kelvin': kelvin,
        'rankine': rankine
    }

def convert_from_kelvin(kelvin: Decimal) -> Dict[str, Any]:
    celsius = kelvin - Decimal('273.15')
    fahrenheit = (kelvin - Decimal('273.15')) * Decimal('9/5') + 32
    rankine = kelvin * Decimal('1.8')
    return {
        'input_temperature': kelvin,
        'unit_input': 'K',
        'celsius': celsius,
        'fahrenheit': fahrenheit,
        'rankine': rankine
    }

def convert_from_rankine(rankine: Decimal) -> Dict[str, Any]:
    celsius = (rankine - Decimal('491.67')) * Decimal('5/9')
    fahrenheit = rankine - Decimal('459.67')
    kelvin = rankine * Decimal('5/9')
    return {
        'input_temperature': rankine,
        'unit_input': 'R',
        'celsius': celsius,
        'fahrenheit': fahrenheit,
        'kelvin': kelvin
    }

def round_results(result: Dict[str, Any]) -> Dict[str, Any]:
    return {k: round(v, 2) if isinstance(v, Decimal) else v for k, v in result.items()}

def cli_interface():
    print("Temperature Conversion CLI")
    while True:
        try:
            temp = input("Enter temperature (or 'q' to quit): ")
            if temp.lower() == 'q':
                break
            unit = input("Enter unit (C, F, K, or R): ").upper()
            temp = parse_temperature(temp)
            validate_temperature_range(temp, unit)
            result = perform_conversion(temp, unit)
            print(json.dumps(round_results(result), indent=2))
        except (ValueError, ValidationError, TemperatureConversionError) as e:
            print(f"Error: {str(e)}")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    cli_interface()